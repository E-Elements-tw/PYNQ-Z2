-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc117 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    Len : IN STD_LOGIC_VECTOR (31 downto 0);
    InA_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    InA_TVALID : IN STD_LOGIC;
    InA_TREADY : OUT STD_LOGIC;
    InA_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    InA_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    InA_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    InA_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    InA_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    InA_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    InB_TVALID : IN STD_LOGIC;
    InB_TREADY : OUT STD_LOGIC;
    InB_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    InB_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    InB_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    Buff_A_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff_A_full_n : IN STD_LOGIC;
    Buff_A_write : OUT STD_LOGIC;
    Buff_B_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff_B_full_n : IN STD_LOGIC;
    Buff_B_write : OUT STD_LOGIC;
    Len_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Len_out_full_n : IN STD_LOGIC;
    Len_out_write : OUT STD_LOGIC );
end;


architecture behav of Loop_1_proc117 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_401921FB4D12D84A : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011001001000011111101101001101000100101101100001001010";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal InA_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal InA_V_data_V_0_vld_in : STD_LOGIC;
    signal InA_V_data_V_0_vld_out : STD_LOGIC;
    signal InA_V_data_V_0_ack_in : STD_LOGIC;
    signal InA_V_data_V_0_ack_out : STD_LOGIC;
    signal InA_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal InA_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal InA_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal InA_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal InA_V_data_V_0_sel : STD_LOGIC;
    signal InA_V_data_V_0_load_A : STD_LOGIC;
    signal InA_V_data_V_0_load_B : STD_LOGIC;
    signal InA_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal InA_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal InA_V_dest_V_0_vld_in : STD_LOGIC;
    signal InA_V_dest_V_0_ack_out : STD_LOGIC;
    signal InA_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal InB_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal InB_V_data_V_0_vld_in : STD_LOGIC;
    signal InB_V_data_V_0_vld_out : STD_LOGIC;
    signal InB_V_data_V_0_ack_in : STD_LOGIC;
    signal InB_V_data_V_0_ack_out : STD_LOGIC;
    signal InB_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal InB_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal InB_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal InB_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal InB_V_data_V_0_sel : STD_LOGIC;
    signal InB_V_data_V_0_load_A : STD_LOGIC;
    signal InB_V_data_V_0_load_B : STD_LOGIC;
    signal InB_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal InB_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal InB_V_dest_V_0_vld_in : STD_LOGIC;
    signal InB_V_dest_V_0_ack_out : STD_LOGIC;
    signal InB_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal InA_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_i_130_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal InB_TDATA_blk_n : STD_LOGIC;
    signal Buff_A_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter87 : STD_LOGIC := '0';
    signal tmp_i_130_reg_304_pp0_iter86_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Buff_B_blk_n : STD_LOGIC;
    signal Len_out_blk_n : STD_LOGIC;
    signal i_i_reg_196 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_cast_i_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter66 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter67 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter68 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter69 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter70 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter71 : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter72 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter73 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter74 : BOOLEAN;
    signal ap_block_state82_pp0_stage0_iter75 : BOOLEAN;
    signal ap_block_state83_pp0_stage0_iter76 : BOOLEAN;
    signal ap_block_state84_pp0_stage0_iter77 : BOOLEAN;
    signal ap_block_state85_pp0_stage0_iter78 : BOOLEAN;
    signal ap_block_state86_pp0_stage0_iter79 : BOOLEAN;
    signal ap_block_state87_pp0_stage0_iter80 : BOOLEAN;
    signal ap_block_state88_pp0_stage0_iter81 : BOOLEAN;
    signal ap_block_state89_pp0_stage0_iter82 : BOOLEAN;
    signal ap_block_state90_pp0_stage0_iter83 : BOOLEAN;
    signal ap_block_state91_pp0_stage0_iter84 : BOOLEAN;
    signal ap_block_state92_pp0_stage0_iter85 : BOOLEAN;
    signal ap_block_state93_pp0_stage0_iter86 : BOOLEAN;
    signal ap_block_state94_pp0_stage0_iter87 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_i_130_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter71_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter72_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter73_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter74_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter75_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter76_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter77_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter78_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter79_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter80_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter81_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter82_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter83_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter84_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_130_reg_304_pp0_iter85_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_274_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_V_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter38_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter39_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter40_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter41_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter42_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter43_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter44_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter45_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter46_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter47_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter48_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter49_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter50_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter51_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter52_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter53_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter54_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter55_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter56_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter57_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter58_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter59_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter60_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter61_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter62_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter63_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter64_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter65_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter66_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter67_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter68_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter69_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter70_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter71_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter72_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter73_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter74_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter75_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_313_pp0_iter76_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter38_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter39_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter40_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter41_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter42_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter43_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter44_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter45_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter46_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter47_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter48_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter49_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter50_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter51_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter52_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter53_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter54_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter55_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter56_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter57_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter58_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter59_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter60_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter61_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter62_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter63_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter64_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter65_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter66_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter67_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter68_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter69_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter70_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter71_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter72_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter73_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter74_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter75_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_318_pp0_iter76_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_i_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_i_reg_328 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_207_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_338 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_i_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_i_reg_348 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_op_assign_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_i_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter73 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter74 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter75 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter76 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter77 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter78 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter79 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter80 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter81 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter82 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter83 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter84 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter85 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter86 : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_207_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_207_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_207_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_207_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_207_ap_ce : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_207_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_232_ce : STD_LOGIC;
    signal grp_fu_235_ce : STD_LOGIC;
    signal grp_fu_241_ce : STD_LOGIC;
    signal grp_fu_246_ce : STD_LOGIC;
    signal grp_fu_251_ce : STD_LOGIC;
    signal grp_fu_256_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pitchshift_fmul_3pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pitchshift_sitofpqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pitchshift_fptrunrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pitchshift_dsub_6sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pitchshift_dmul_6tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pitchshift_ddiv_6udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pitchshift_sitodpvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_207 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_207_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_207_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_207_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_207_ap_ready,
        ap_ce => grp_sin_or_cos_double_s_fu_207_ap_ce,
        t_in => x_assign_reg_333,
        ap_return => grp_sin_or_cos_double_s_fu_207_ap_return);

    pitchshift_fmul_3pcA_U28 : component pitchshift_fmul_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_op_assign_reg_353,
        din1 => tmp_28_i_reg_359,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    pitchshift_fmul_3pcA_U29 : component pitchshift_fmul_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_op_assign_reg_353,
        din1 => tmp_30_i_reg_364,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    pitchshift_sitofpqcK_U30 : component pitchshift_sitofpqcK
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_data_V_reg_313_pp0_iter76_reg,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p1);

    pitchshift_sitofpqcK_U31 : component pitchshift_sitofpqcK
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_data_V_3_reg_318_pp0_iter76_reg,
        ce => grp_fu_235_ce,
        dout => grp_fu_235_p1);

    pitchshift_fptrunrcU_U32 : component pitchshift_fptrunrcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_26_i_reg_348,
        dout => i_op_assign_fu_238_p1);

    pitchshift_dsub_6sc4_U33 : component pitchshift_dsub_6sc4
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_i_i_reg_338,
        ce => grp_fu_241_ce,
        dout => grp_fu_241_p2);

    pitchshift_dmul_6tde_U34 : component pitchshift_dmul_6tde
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_21_i_reg_323,
        din1 => ap_const_lv64_401921FB4D12D84A,
        ce => grp_fu_246_ce,
        dout => grp_fu_246_p2);

    pitchshift_dmul_6tde_U35 : component pitchshift_dmul_6tde
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_25_i_reg_343,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_251_ce,
        dout => grp_fu_251_p2);

    pitchshift_ddiv_6udo_U36 : component pitchshift_ddiv_6udo
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_22_i_reg_328,
        din1 => tmp_i_reg_294,
        ce => grp_fu_256_ce,
        dout => grp_fu_256_p2);

    pitchshift_sitodpvdy_U37 : component pitchshift_sitodpvdy
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_260_p0,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p1);





    InA_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InA_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = InA_V_data_V_0_ack_out) and (ap_const_logic_1 = InA_V_data_V_0_vld_out))) then 
                                        InA_V_data_V_0_sel_rd <= not(InA_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    InA_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InA_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = InA_V_data_V_0_ack_in) and (ap_const_logic_1 = InA_V_data_V_0_vld_in))) then 
                                        InA_V_data_V_0_sel_wr <= not(InA_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    InA_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InA_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = InA_V_data_V_0_state) and (ap_const_logic_0 = InA_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = InA_V_data_V_0_state) and (ap_const_logic_0 = InA_V_data_V_0_vld_in) and (ap_const_logic_1 = InA_V_data_V_0_ack_out)))) then 
                    InA_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = InA_V_data_V_0_state) and (ap_const_logic_0 = InA_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = InA_V_data_V_0_state) and (ap_const_logic_0 = InA_V_data_V_0_ack_out) and (ap_const_logic_1 = InA_V_data_V_0_vld_in)))) then 
                    InA_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = InA_V_data_V_0_vld_in) and (ap_const_logic_1 = InA_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = InA_V_data_V_0_ack_out) and (ap_const_logic_1 = InA_V_data_V_0_vld_in))) and (ap_const_lv2_3 = InA_V_data_V_0_state)) or ((ap_const_lv2_1 = InA_V_data_V_0_state) and (ap_const_logic_1 = InA_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = InA_V_data_V_0_state) and (ap_const_logic_1 = InA_V_data_V_0_vld_in)))) then 
                    InA_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    InA_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    InA_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InA_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = InA_V_dest_V_0_state) and (ap_const_logic_0 = InA_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = InA_V_dest_V_0_state) and (ap_const_logic_0 = InA_V_dest_V_0_vld_in) and (ap_const_logic_1 = InA_V_dest_V_0_ack_out)))) then 
                    InA_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = InA_V_dest_V_0_state) and (ap_const_logic_0 = InA_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = InA_V_dest_V_0_state) and (ap_const_logic_0 = InA_V_dest_V_0_ack_out) and (ap_const_logic_1 = InA_V_dest_V_0_vld_in)))) then 
                    InA_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = InA_V_dest_V_0_vld_in) and (ap_const_logic_1 = InA_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = InA_V_dest_V_0_ack_out) and (ap_const_logic_1 = InA_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = InA_V_dest_V_0_state)) or ((ap_const_lv2_1 = InA_V_dest_V_0_state) and (ap_const_logic_1 = InA_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = InA_V_dest_V_0_state) and (ap_const_logic_1 = InA_V_dest_V_0_vld_in)))) then 
                    InA_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    InA_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    InB_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InB_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = InB_V_data_V_0_ack_out) and (ap_const_logic_1 = InB_V_data_V_0_vld_out))) then 
                                        InB_V_data_V_0_sel_rd <= not(InB_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    InB_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InB_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = InB_V_data_V_0_ack_in) and (ap_const_logic_1 = InB_V_data_V_0_vld_in))) then 
                                        InB_V_data_V_0_sel_wr <= not(InB_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    InB_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InB_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = InB_V_data_V_0_state) and (ap_const_logic_0 = InB_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = InB_V_data_V_0_state) and (ap_const_logic_0 = InB_V_data_V_0_vld_in) and (ap_const_logic_1 = InB_V_data_V_0_ack_out)))) then 
                    InB_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = InB_V_data_V_0_state) and (ap_const_logic_0 = InB_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = InB_V_data_V_0_state) and (ap_const_logic_0 = InB_V_data_V_0_ack_out) and (ap_const_logic_1 = InB_V_data_V_0_vld_in)))) then 
                    InB_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = InB_V_data_V_0_vld_in) and (ap_const_logic_1 = InB_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = InB_V_data_V_0_ack_out) and (ap_const_logic_1 = InB_V_data_V_0_vld_in))) and (ap_const_lv2_3 = InB_V_data_V_0_state)) or ((ap_const_lv2_1 = InB_V_data_V_0_state) and (ap_const_logic_1 = InB_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = InB_V_data_V_0_state) and (ap_const_logic_1 = InB_V_data_V_0_vld_in)))) then 
                    InB_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    InB_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    InB_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                InB_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = InB_V_dest_V_0_state) and (ap_const_logic_0 = InB_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = InB_V_dest_V_0_state) and (ap_const_logic_0 = InB_V_dest_V_0_vld_in) and (ap_const_logic_1 = InB_V_dest_V_0_ack_out)))) then 
                    InB_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = InB_V_dest_V_0_state) and (ap_const_logic_0 = InB_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = InB_V_dest_V_0_state) and (ap_const_logic_0 = InB_V_dest_V_0_ack_out) and (ap_const_logic_1 = InB_V_dest_V_0_vld_in)))) then 
                    InB_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = InB_V_dest_V_0_vld_in) and (ap_const_logic_1 = InB_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = InB_V_dest_V_0_ack_out) and (ap_const_logic_1 = InB_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = InB_V_dest_V_0_state)) or ((ap_const_lv2_1 = InB_V_dest_V_0_state) and (ap_const_logic_1 = InB_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = InB_V_dest_V_0_state) and (ap_const_logic_1 = InB_V_dest_V_0_vld_in)))) then 
                    InB_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    InB_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter73_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter73 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter74 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter75_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter75 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter76_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter76 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter77_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter77 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter78_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter78 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter78 <= ap_enable_reg_pp0_iter77;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter79_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter79 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter79 <= ap_enable_reg_pp0_iter78;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter80_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter80 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter80 <= ap_enable_reg_pp0_iter79;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter81_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter81 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter81 <= ap_enable_reg_pp0_iter80;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter82_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter82 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter82 <= ap_enable_reg_pp0_iter81;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter83_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter83 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter83 <= ap_enable_reg_pp0_iter82;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter84_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter84 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter84 <= ap_enable_reg_pp0_iter83;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter85_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter85 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter85 <= ap_enable_reg_pp0_iter84;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter86_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter86 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter86 <= ap_enable_reg_pp0_iter85;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter87_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter87 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter87 <= ap_enable_reg_pp0_iter86;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter87 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_207_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_i_130_reg_304_pp0_iter41_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_207_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_i_reg_196 <= i_fu_274_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_196 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = InA_V_data_V_0_load_A)) then
                InA_V_data_V_0_payload_A <= InA_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = InA_V_data_V_0_load_B)) then
                InA_V_data_V_0_payload_B <= InA_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = InB_V_data_V_0_load_A)) then
                InB_V_data_V_0_payload_A <= InB_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = InB_V_data_V_0_load_B)) then
                InB_V_data_V_0_payload_B <= InB_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter81_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_reg_353 <= i_op_assign_fu_238_p1;
                tmp_28_i_reg_359 <= grp_fu_232_p1;
                tmp_30_i_reg_364 <= grp_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_21_i_reg_323 <= grp_fu_260_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_22_i_reg_328 <= grp_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter74_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_25_i_reg_343 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter80_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_26_i_reg_348 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter85_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_29_i_reg_369 <= grp_fu_224_p2;
                tmp_31_i_reg_374 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_V_3_reg_318 <= InB_V_data_V_0_data_out;
                tmp_data_V_reg_313 <= InA_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_data_V_3_reg_318_pp0_iter10_reg <= tmp_data_V_3_reg_318_pp0_iter9_reg;
                tmp_data_V_3_reg_318_pp0_iter11_reg <= tmp_data_V_3_reg_318_pp0_iter10_reg;
                tmp_data_V_3_reg_318_pp0_iter12_reg <= tmp_data_V_3_reg_318_pp0_iter11_reg;
                tmp_data_V_3_reg_318_pp0_iter13_reg <= tmp_data_V_3_reg_318_pp0_iter12_reg;
                tmp_data_V_3_reg_318_pp0_iter14_reg <= tmp_data_V_3_reg_318_pp0_iter13_reg;
                tmp_data_V_3_reg_318_pp0_iter15_reg <= tmp_data_V_3_reg_318_pp0_iter14_reg;
                tmp_data_V_3_reg_318_pp0_iter16_reg <= tmp_data_V_3_reg_318_pp0_iter15_reg;
                tmp_data_V_3_reg_318_pp0_iter17_reg <= tmp_data_V_3_reg_318_pp0_iter16_reg;
                tmp_data_V_3_reg_318_pp0_iter18_reg <= tmp_data_V_3_reg_318_pp0_iter17_reg;
                tmp_data_V_3_reg_318_pp0_iter19_reg <= tmp_data_V_3_reg_318_pp0_iter18_reg;
                tmp_data_V_3_reg_318_pp0_iter20_reg <= tmp_data_V_3_reg_318_pp0_iter19_reg;
                tmp_data_V_3_reg_318_pp0_iter21_reg <= tmp_data_V_3_reg_318_pp0_iter20_reg;
                tmp_data_V_3_reg_318_pp0_iter22_reg <= tmp_data_V_3_reg_318_pp0_iter21_reg;
                tmp_data_V_3_reg_318_pp0_iter23_reg <= tmp_data_V_3_reg_318_pp0_iter22_reg;
                tmp_data_V_3_reg_318_pp0_iter24_reg <= tmp_data_V_3_reg_318_pp0_iter23_reg;
                tmp_data_V_3_reg_318_pp0_iter25_reg <= tmp_data_V_3_reg_318_pp0_iter24_reg;
                tmp_data_V_3_reg_318_pp0_iter26_reg <= tmp_data_V_3_reg_318_pp0_iter25_reg;
                tmp_data_V_3_reg_318_pp0_iter27_reg <= tmp_data_V_3_reg_318_pp0_iter26_reg;
                tmp_data_V_3_reg_318_pp0_iter28_reg <= tmp_data_V_3_reg_318_pp0_iter27_reg;
                tmp_data_V_3_reg_318_pp0_iter29_reg <= tmp_data_V_3_reg_318_pp0_iter28_reg;
                tmp_data_V_3_reg_318_pp0_iter2_reg <= tmp_data_V_3_reg_318;
                tmp_data_V_3_reg_318_pp0_iter30_reg <= tmp_data_V_3_reg_318_pp0_iter29_reg;
                tmp_data_V_3_reg_318_pp0_iter31_reg <= tmp_data_V_3_reg_318_pp0_iter30_reg;
                tmp_data_V_3_reg_318_pp0_iter32_reg <= tmp_data_V_3_reg_318_pp0_iter31_reg;
                tmp_data_V_3_reg_318_pp0_iter33_reg <= tmp_data_V_3_reg_318_pp0_iter32_reg;
                tmp_data_V_3_reg_318_pp0_iter34_reg <= tmp_data_V_3_reg_318_pp0_iter33_reg;
                tmp_data_V_3_reg_318_pp0_iter35_reg <= tmp_data_V_3_reg_318_pp0_iter34_reg;
                tmp_data_V_3_reg_318_pp0_iter36_reg <= tmp_data_V_3_reg_318_pp0_iter35_reg;
                tmp_data_V_3_reg_318_pp0_iter37_reg <= tmp_data_V_3_reg_318_pp0_iter36_reg;
                tmp_data_V_3_reg_318_pp0_iter38_reg <= tmp_data_V_3_reg_318_pp0_iter37_reg;
                tmp_data_V_3_reg_318_pp0_iter39_reg <= tmp_data_V_3_reg_318_pp0_iter38_reg;
                tmp_data_V_3_reg_318_pp0_iter3_reg <= tmp_data_V_3_reg_318_pp0_iter2_reg;
                tmp_data_V_3_reg_318_pp0_iter40_reg <= tmp_data_V_3_reg_318_pp0_iter39_reg;
                tmp_data_V_3_reg_318_pp0_iter41_reg <= tmp_data_V_3_reg_318_pp0_iter40_reg;
                tmp_data_V_3_reg_318_pp0_iter42_reg <= tmp_data_V_3_reg_318_pp0_iter41_reg;
                tmp_data_V_3_reg_318_pp0_iter43_reg <= tmp_data_V_3_reg_318_pp0_iter42_reg;
                tmp_data_V_3_reg_318_pp0_iter44_reg <= tmp_data_V_3_reg_318_pp0_iter43_reg;
                tmp_data_V_3_reg_318_pp0_iter45_reg <= tmp_data_V_3_reg_318_pp0_iter44_reg;
                tmp_data_V_3_reg_318_pp0_iter46_reg <= tmp_data_V_3_reg_318_pp0_iter45_reg;
                tmp_data_V_3_reg_318_pp0_iter47_reg <= tmp_data_V_3_reg_318_pp0_iter46_reg;
                tmp_data_V_3_reg_318_pp0_iter48_reg <= tmp_data_V_3_reg_318_pp0_iter47_reg;
                tmp_data_V_3_reg_318_pp0_iter49_reg <= tmp_data_V_3_reg_318_pp0_iter48_reg;
                tmp_data_V_3_reg_318_pp0_iter4_reg <= tmp_data_V_3_reg_318_pp0_iter3_reg;
                tmp_data_V_3_reg_318_pp0_iter50_reg <= tmp_data_V_3_reg_318_pp0_iter49_reg;
                tmp_data_V_3_reg_318_pp0_iter51_reg <= tmp_data_V_3_reg_318_pp0_iter50_reg;
                tmp_data_V_3_reg_318_pp0_iter52_reg <= tmp_data_V_3_reg_318_pp0_iter51_reg;
                tmp_data_V_3_reg_318_pp0_iter53_reg <= tmp_data_V_3_reg_318_pp0_iter52_reg;
                tmp_data_V_3_reg_318_pp0_iter54_reg <= tmp_data_V_3_reg_318_pp0_iter53_reg;
                tmp_data_V_3_reg_318_pp0_iter55_reg <= tmp_data_V_3_reg_318_pp0_iter54_reg;
                tmp_data_V_3_reg_318_pp0_iter56_reg <= tmp_data_V_3_reg_318_pp0_iter55_reg;
                tmp_data_V_3_reg_318_pp0_iter57_reg <= tmp_data_V_3_reg_318_pp0_iter56_reg;
                tmp_data_V_3_reg_318_pp0_iter58_reg <= tmp_data_V_3_reg_318_pp0_iter57_reg;
                tmp_data_V_3_reg_318_pp0_iter59_reg <= tmp_data_V_3_reg_318_pp0_iter58_reg;
                tmp_data_V_3_reg_318_pp0_iter5_reg <= tmp_data_V_3_reg_318_pp0_iter4_reg;
                tmp_data_V_3_reg_318_pp0_iter60_reg <= tmp_data_V_3_reg_318_pp0_iter59_reg;
                tmp_data_V_3_reg_318_pp0_iter61_reg <= tmp_data_V_3_reg_318_pp0_iter60_reg;
                tmp_data_V_3_reg_318_pp0_iter62_reg <= tmp_data_V_3_reg_318_pp0_iter61_reg;
                tmp_data_V_3_reg_318_pp0_iter63_reg <= tmp_data_V_3_reg_318_pp0_iter62_reg;
                tmp_data_V_3_reg_318_pp0_iter64_reg <= tmp_data_V_3_reg_318_pp0_iter63_reg;
                tmp_data_V_3_reg_318_pp0_iter65_reg <= tmp_data_V_3_reg_318_pp0_iter64_reg;
                tmp_data_V_3_reg_318_pp0_iter66_reg <= tmp_data_V_3_reg_318_pp0_iter65_reg;
                tmp_data_V_3_reg_318_pp0_iter67_reg <= tmp_data_V_3_reg_318_pp0_iter66_reg;
                tmp_data_V_3_reg_318_pp0_iter68_reg <= tmp_data_V_3_reg_318_pp0_iter67_reg;
                tmp_data_V_3_reg_318_pp0_iter69_reg <= tmp_data_V_3_reg_318_pp0_iter68_reg;
                tmp_data_V_3_reg_318_pp0_iter6_reg <= tmp_data_V_3_reg_318_pp0_iter5_reg;
                tmp_data_V_3_reg_318_pp0_iter70_reg <= tmp_data_V_3_reg_318_pp0_iter69_reg;
                tmp_data_V_3_reg_318_pp0_iter71_reg <= tmp_data_V_3_reg_318_pp0_iter70_reg;
                tmp_data_V_3_reg_318_pp0_iter72_reg <= tmp_data_V_3_reg_318_pp0_iter71_reg;
                tmp_data_V_3_reg_318_pp0_iter73_reg <= tmp_data_V_3_reg_318_pp0_iter72_reg;
                tmp_data_V_3_reg_318_pp0_iter74_reg <= tmp_data_V_3_reg_318_pp0_iter73_reg;
                tmp_data_V_3_reg_318_pp0_iter75_reg <= tmp_data_V_3_reg_318_pp0_iter74_reg;
                tmp_data_V_3_reg_318_pp0_iter76_reg <= tmp_data_V_3_reg_318_pp0_iter75_reg;
                tmp_data_V_3_reg_318_pp0_iter7_reg <= tmp_data_V_3_reg_318_pp0_iter6_reg;
                tmp_data_V_3_reg_318_pp0_iter8_reg <= tmp_data_V_3_reg_318_pp0_iter7_reg;
                tmp_data_V_3_reg_318_pp0_iter9_reg <= tmp_data_V_3_reg_318_pp0_iter8_reg;
                tmp_data_V_reg_313_pp0_iter10_reg <= tmp_data_V_reg_313_pp0_iter9_reg;
                tmp_data_V_reg_313_pp0_iter11_reg <= tmp_data_V_reg_313_pp0_iter10_reg;
                tmp_data_V_reg_313_pp0_iter12_reg <= tmp_data_V_reg_313_pp0_iter11_reg;
                tmp_data_V_reg_313_pp0_iter13_reg <= tmp_data_V_reg_313_pp0_iter12_reg;
                tmp_data_V_reg_313_pp0_iter14_reg <= tmp_data_V_reg_313_pp0_iter13_reg;
                tmp_data_V_reg_313_pp0_iter15_reg <= tmp_data_V_reg_313_pp0_iter14_reg;
                tmp_data_V_reg_313_pp0_iter16_reg <= tmp_data_V_reg_313_pp0_iter15_reg;
                tmp_data_V_reg_313_pp0_iter17_reg <= tmp_data_V_reg_313_pp0_iter16_reg;
                tmp_data_V_reg_313_pp0_iter18_reg <= tmp_data_V_reg_313_pp0_iter17_reg;
                tmp_data_V_reg_313_pp0_iter19_reg <= tmp_data_V_reg_313_pp0_iter18_reg;
                tmp_data_V_reg_313_pp0_iter20_reg <= tmp_data_V_reg_313_pp0_iter19_reg;
                tmp_data_V_reg_313_pp0_iter21_reg <= tmp_data_V_reg_313_pp0_iter20_reg;
                tmp_data_V_reg_313_pp0_iter22_reg <= tmp_data_V_reg_313_pp0_iter21_reg;
                tmp_data_V_reg_313_pp0_iter23_reg <= tmp_data_V_reg_313_pp0_iter22_reg;
                tmp_data_V_reg_313_pp0_iter24_reg <= tmp_data_V_reg_313_pp0_iter23_reg;
                tmp_data_V_reg_313_pp0_iter25_reg <= tmp_data_V_reg_313_pp0_iter24_reg;
                tmp_data_V_reg_313_pp0_iter26_reg <= tmp_data_V_reg_313_pp0_iter25_reg;
                tmp_data_V_reg_313_pp0_iter27_reg <= tmp_data_V_reg_313_pp0_iter26_reg;
                tmp_data_V_reg_313_pp0_iter28_reg <= tmp_data_V_reg_313_pp0_iter27_reg;
                tmp_data_V_reg_313_pp0_iter29_reg <= tmp_data_V_reg_313_pp0_iter28_reg;
                tmp_data_V_reg_313_pp0_iter2_reg <= tmp_data_V_reg_313;
                tmp_data_V_reg_313_pp0_iter30_reg <= tmp_data_V_reg_313_pp0_iter29_reg;
                tmp_data_V_reg_313_pp0_iter31_reg <= tmp_data_V_reg_313_pp0_iter30_reg;
                tmp_data_V_reg_313_pp0_iter32_reg <= tmp_data_V_reg_313_pp0_iter31_reg;
                tmp_data_V_reg_313_pp0_iter33_reg <= tmp_data_V_reg_313_pp0_iter32_reg;
                tmp_data_V_reg_313_pp0_iter34_reg <= tmp_data_V_reg_313_pp0_iter33_reg;
                tmp_data_V_reg_313_pp0_iter35_reg <= tmp_data_V_reg_313_pp0_iter34_reg;
                tmp_data_V_reg_313_pp0_iter36_reg <= tmp_data_V_reg_313_pp0_iter35_reg;
                tmp_data_V_reg_313_pp0_iter37_reg <= tmp_data_V_reg_313_pp0_iter36_reg;
                tmp_data_V_reg_313_pp0_iter38_reg <= tmp_data_V_reg_313_pp0_iter37_reg;
                tmp_data_V_reg_313_pp0_iter39_reg <= tmp_data_V_reg_313_pp0_iter38_reg;
                tmp_data_V_reg_313_pp0_iter3_reg <= tmp_data_V_reg_313_pp0_iter2_reg;
                tmp_data_V_reg_313_pp0_iter40_reg <= tmp_data_V_reg_313_pp0_iter39_reg;
                tmp_data_V_reg_313_pp0_iter41_reg <= tmp_data_V_reg_313_pp0_iter40_reg;
                tmp_data_V_reg_313_pp0_iter42_reg <= tmp_data_V_reg_313_pp0_iter41_reg;
                tmp_data_V_reg_313_pp0_iter43_reg <= tmp_data_V_reg_313_pp0_iter42_reg;
                tmp_data_V_reg_313_pp0_iter44_reg <= tmp_data_V_reg_313_pp0_iter43_reg;
                tmp_data_V_reg_313_pp0_iter45_reg <= tmp_data_V_reg_313_pp0_iter44_reg;
                tmp_data_V_reg_313_pp0_iter46_reg <= tmp_data_V_reg_313_pp0_iter45_reg;
                tmp_data_V_reg_313_pp0_iter47_reg <= tmp_data_V_reg_313_pp0_iter46_reg;
                tmp_data_V_reg_313_pp0_iter48_reg <= tmp_data_V_reg_313_pp0_iter47_reg;
                tmp_data_V_reg_313_pp0_iter49_reg <= tmp_data_V_reg_313_pp0_iter48_reg;
                tmp_data_V_reg_313_pp0_iter4_reg <= tmp_data_V_reg_313_pp0_iter3_reg;
                tmp_data_V_reg_313_pp0_iter50_reg <= tmp_data_V_reg_313_pp0_iter49_reg;
                tmp_data_V_reg_313_pp0_iter51_reg <= tmp_data_V_reg_313_pp0_iter50_reg;
                tmp_data_V_reg_313_pp0_iter52_reg <= tmp_data_V_reg_313_pp0_iter51_reg;
                tmp_data_V_reg_313_pp0_iter53_reg <= tmp_data_V_reg_313_pp0_iter52_reg;
                tmp_data_V_reg_313_pp0_iter54_reg <= tmp_data_V_reg_313_pp0_iter53_reg;
                tmp_data_V_reg_313_pp0_iter55_reg <= tmp_data_V_reg_313_pp0_iter54_reg;
                tmp_data_V_reg_313_pp0_iter56_reg <= tmp_data_V_reg_313_pp0_iter55_reg;
                tmp_data_V_reg_313_pp0_iter57_reg <= tmp_data_V_reg_313_pp0_iter56_reg;
                tmp_data_V_reg_313_pp0_iter58_reg <= tmp_data_V_reg_313_pp0_iter57_reg;
                tmp_data_V_reg_313_pp0_iter59_reg <= tmp_data_V_reg_313_pp0_iter58_reg;
                tmp_data_V_reg_313_pp0_iter5_reg <= tmp_data_V_reg_313_pp0_iter4_reg;
                tmp_data_V_reg_313_pp0_iter60_reg <= tmp_data_V_reg_313_pp0_iter59_reg;
                tmp_data_V_reg_313_pp0_iter61_reg <= tmp_data_V_reg_313_pp0_iter60_reg;
                tmp_data_V_reg_313_pp0_iter62_reg <= tmp_data_V_reg_313_pp0_iter61_reg;
                tmp_data_V_reg_313_pp0_iter63_reg <= tmp_data_V_reg_313_pp0_iter62_reg;
                tmp_data_V_reg_313_pp0_iter64_reg <= tmp_data_V_reg_313_pp0_iter63_reg;
                tmp_data_V_reg_313_pp0_iter65_reg <= tmp_data_V_reg_313_pp0_iter64_reg;
                tmp_data_V_reg_313_pp0_iter66_reg <= tmp_data_V_reg_313_pp0_iter65_reg;
                tmp_data_V_reg_313_pp0_iter67_reg <= tmp_data_V_reg_313_pp0_iter66_reg;
                tmp_data_V_reg_313_pp0_iter68_reg <= tmp_data_V_reg_313_pp0_iter67_reg;
                tmp_data_V_reg_313_pp0_iter69_reg <= tmp_data_V_reg_313_pp0_iter68_reg;
                tmp_data_V_reg_313_pp0_iter6_reg <= tmp_data_V_reg_313_pp0_iter5_reg;
                tmp_data_V_reg_313_pp0_iter70_reg <= tmp_data_V_reg_313_pp0_iter69_reg;
                tmp_data_V_reg_313_pp0_iter71_reg <= tmp_data_V_reg_313_pp0_iter70_reg;
                tmp_data_V_reg_313_pp0_iter72_reg <= tmp_data_V_reg_313_pp0_iter71_reg;
                tmp_data_V_reg_313_pp0_iter73_reg <= tmp_data_V_reg_313_pp0_iter72_reg;
                tmp_data_V_reg_313_pp0_iter74_reg <= tmp_data_V_reg_313_pp0_iter73_reg;
                tmp_data_V_reg_313_pp0_iter75_reg <= tmp_data_V_reg_313_pp0_iter74_reg;
                tmp_data_V_reg_313_pp0_iter76_reg <= tmp_data_V_reg_313_pp0_iter75_reg;
                tmp_data_V_reg_313_pp0_iter7_reg <= tmp_data_V_reg_313_pp0_iter6_reg;
                tmp_data_V_reg_313_pp0_iter8_reg <= tmp_data_V_reg_313_pp0_iter7_reg;
                tmp_data_V_reg_313_pp0_iter9_reg <= tmp_data_V_reg_313_pp0_iter8_reg;
                tmp_i_130_reg_304_pp0_iter10_reg <= tmp_i_130_reg_304_pp0_iter9_reg;
                tmp_i_130_reg_304_pp0_iter11_reg <= tmp_i_130_reg_304_pp0_iter10_reg;
                tmp_i_130_reg_304_pp0_iter12_reg <= tmp_i_130_reg_304_pp0_iter11_reg;
                tmp_i_130_reg_304_pp0_iter13_reg <= tmp_i_130_reg_304_pp0_iter12_reg;
                tmp_i_130_reg_304_pp0_iter14_reg <= tmp_i_130_reg_304_pp0_iter13_reg;
                tmp_i_130_reg_304_pp0_iter15_reg <= tmp_i_130_reg_304_pp0_iter14_reg;
                tmp_i_130_reg_304_pp0_iter16_reg <= tmp_i_130_reg_304_pp0_iter15_reg;
                tmp_i_130_reg_304_pp0_iter17_reg <= tmp_i_130_reg_304_pp0_iter16_reg;
                tmp_i_130_reg_304_pp0_iter18_reg <= tmp_i_130_reg_304_pp0_iter17_reg;
                tmp_i_130_reg_304_pp0_iter19_reg <= tmp_i_130_reg_304_pp0_iter18_reg;
                tmp_i_130_reg_304_pp0_iter20_reg <= tmp_i_130_reg_304_pp0_iter19_reg;
                tmp_i_130_reg_304_pp0_iter21_reg <= tmp_i_130_reg_304_pp0_iter20_reg;
                tmp_i_130_reg_304_pp0_iter22_reg <= tmp_i_130_reg_304_pp0_iter21_reg;
                tmp_i_130_reg_304_pp0_iter23_reg <= tmp_i_130_reg_304_pp0_iter22_reg;
                tmp_i_130_reg_304_pp0_iter24_reg <= tmp_i_130_reg_304_pp0_iter23_reg;
                tmp_i_130_reg_304_pp0_iter25_reg <= tmp_i_130_reg_304_pp0_iter24_reg;
                tmp_i_130_reg_304_pp0_iter26_reg <= tmp_i_130_reg_304_pp0_iter25_reg;
                tmp_i_130_reg_304_pp0_iter27_reg <= tmp_i_130_reg_304_pp0_iter26_reg;
                tmp_i_130_reg_304_pp0_iter28_reg <= tmp_i_130_reg_304_pp0_iter27_reg;
                tmp_i_130_reg_304_pp0_iter29_reg <= tmp_i_130_reg_304_pp0_iter28_reg;
                tmp_i_130_reg_304_pp0_iter2_reg <= tmp_i_130_reg_304_pp0_iter1_reg;
                tmp_i_130_reg_304_pp0_iter30_reg <= tmp_i_130_reg_304_pp0_iter29_reg;
                tmp_i_130_reg_304_pp0_iter31_reg <= tmp_i_130_reg_304_pp0_iter30_reg;
                tmp_i_130_reg_304_pp0_iter32_reg <= tmp_i_130_reg_304_pp0_iter31_reg;
                tmp_i_130_reg_304_pp0_iter33_reg <= tmp_i_130_reg_304_pp0_iter32_reg;
                tmp_i_130_reg_304_pp0_iter34_reg <= tmp_i_130_reg_304_pp0_iter33_reg;
                tmp_i_130_reg_304_pp0_iter35_reg <= tmp_i_130_reg_304_pp0_iter34_reg;
                tmp_i_130_reg_304_pp0_iter36_reg <= tmp_i_130_reg_304_pp0_iter35_reg;
                tmp_i_130_reg_304_pp0_iter37_reg <= tmp_i_130_reg_304_pp0_iter36_reg;
                tmp_i_130_reg_304_pp0_iter38_reg <= tmp_i_130_reg_304_pp0_iter37_reg;
                tmp_i_130_reg_304_pp0_iter39_reg <= tmp_i_130_reg_304_pp0_iter38_reg;
                tmp_i_130_reg_304_pp0_iter3_reg <= tmp_i_130_reg_304_pp0_iter2_reg;
                tmp_i_130_reg_304_pp0_iter40_reg <= tmp_i_130_reg_304_pp0_iter39_reg;
                tmp_i_130_reg_304_pp0_iter41_reg <= tmp_i_130_reg_304_pp0_iter40_reg;
                tmp_i_130_reg_304_pp0_iter42_reg <= tmp_i_130_reg_304_pp0_iter41_reg;
                tmp_i_130_reg_304_pp0_iter43_reg <= tmp_i_130_reg_304_pp0_iter42_reg;
                tmp_i_130_reg_304_pp0_iter44_reg <= tmp_i_130_reg_304_pp0_iter43_reg;
                tmp_i_130_reg_304_pp0_iter45_reg <= tmp_i_130_reg_304_pp0_iter44_reg;
                tmp_i_130_reg_304_pp0_iter46_reg <= tmp_i_130_reg_304_pp0_iter45_reg;
                tmp_i_130_reg_304_pp0_iter47_reg <= tmp_i_130_reg_304_pp0_iter46_reg;
                tmp_i_130_reg_304_pp0_iter48_reg <= tmp_i_130_reg_304_pp0_iter47_reg;
                tmp_i_130_reg_304_pp0_iter49_reg <= tmp_i_130_reg_304_pp0_iter48_reg;
                tmp_i_130_reg_304_pp0_iter4_reg <= tmp_i_130_reg_304_pp0_iter3_reg;
                tmp_i_130_reg_304_pp0_iter50_reg <= tmp_i_130_reg_304_pp0_iter49_reg;
                tmp_i_130_reg_304_pp0_iter51_reg <= tmp_i_130_reg_304_pp0_iter50_reg;
                tmp_i_130_reg_304_pp0_iter52_reg <= tmp_i_130_reg_304_pp0_iter51_reg;
                tmp_i_130_reg_304_pp0_iter53_reg <= tmp_i_130_reg_304_pp0_iter52_reg;
                tmp_i_130_reg_304_pp0_iter54_reg <= tmp_i_130_reg_304_pp0_iter53_reg;
                tmp_i_130_reg_304_pp0_iter55_reg <= tmp_i_130_reg_304_pp0_iter54_reg;
                tmp_i_130_reg_304_pp0_iter56_reg <= tmp_i_130_reg_304_pp0_iter55_reg;
                tmp_i_130_reg_304_pp0_iter57_reg <= tmp_i_130_reg_304_pp0_iter56_reg;
                tmp_i_130_reg_304_pp0_iter58_reg <= tmp_i_130_reg_304_pp0_iter57_reg;
                tmp_i_130_reg_304_pp0_iter59_reg <= tmp_i_130_reg_304_pp0_iter58_reg;
                tmp_i_130_reg_304_pp0_iter5_reg <= tmp_i_130_reg_304_pp0_iter4_reg;
                tmp_i_130_reg_304_pp0_iter60_reg <= tmp_i_130_reg_304_pp0_iter59_reg;
                tmp_i_130_reg_304_pp0_iter61_reg <= tmp_i_130_reg_304_pp0_iter60_reg;
                tmp_i_130_reg_304_pp0_iter62_reg <= tmp_i_130_reg_304_pp0_iter61_reg;
                tmp_i_130_reg_304_pp0_iter63_reg <= tmp_i_130_reg_304_pp0_iter62_reg;
                tmp_i_130_reg_304_pp0_iter64_reg <= tmp_i_130_reg_304_pp0_iter63_reg;
                tmp_i_130_reg_304_pp0_iter65_reg <= tmp_i_130_reg_304_pp0_iter64_reg;
                tmp_i_130_reg_304_pp0_iter66_reg <= tmp_i_130_reg_304_pp0_iter65_reg;
                tmp_i_130_reg_304_pp0_iter67_reg <= tmp_i_130_reg_304_pp0_iter66_reg;
                tmp_i_130_reg_304_pp0_iter68_reg <= tmp_i_130_reg_304_pp0_iter67_reg;
                tmp_i_130_reg_304_pp0_iter69_reg <= tmp_i_130_reg_304_pp0_iter68_reg;
                tmp_i_130_reg_304_pp0_iter6_reg <= tmp_i_130_reg_304_pp0_iter5_reg;
                tmp_i_130_reg_304_pp0_iter70_reg <= tmp_i_130_reg_304_pp0_iter69_reg;
                tmp_i_130_reg_304_pp0_iter71_reg <= tmp_i_130_reg_304_pp0_iter70_reg;
                tmp_i_130_reg_304_pp0_iter72_reg <= tmp_i_130_reg_304_pp0_iter71_reg;
                tmp_i_130_reg_304_pp0_iter73_reg <= tmp_i_130_reg_304_pp0_iter72_reg;
                tmp_i_130_reg_304_pp0_iter74_reg <= tmp_i_130_reg_304_pp0_iter73_reg;
                tmp_i_130_reg_304_pp0_iter75_reg <= tmp_i_130_reg_304_pp0_iter74_reg;
                tmp_i_130_reg_304_pp0_iter76_reg <= tmp_i_130_reg_304_pp0_iter75_reg;
                tmp_i_130_reg_304_pp0_iter77_reg <= tmp_i_130_reg_304_pp0_iter76_reg;
                tmp_i_130_reg_304_pp0_iter78_reg <= tmp_i_130_reg_304_pp0_iter77_reg;
                tmp_i_130_reg_304_pp0_iter79_reg <= tmp_i_130_reg_304_pp0_iter78_reg;
                tmp_i_130_reg_304_pp0_iter7_reg <= tmp_i_130_reg_304_pp0_iter6_reg;
                tmp_i_130_reg_304_pp0_iter80_reg <= tmp_i_130_reg_304_pp0_iter79_reg;
                tmp_i_130_reg_304_pp0_iter81_reg <= tmp_i_130_reg_304_pp0_iter80_reg;
                tmp_i_130_reg_304_pp0_iter82_reg <= tmp_i_130_reg_304_pp0_iter81_reg;
                tmp_i_130_reg_304_pp0_iter83_reg <= tmp_i_130_reg_304_pp0_iter82_reg;
                tmp_i_130_reg_304_pp0_iter84_reg <= tmp_i_130_reg_304_pp0_iter83_reg;
                tmp_i_130_reg_304_pp0_iter85_reg <= tmp_i_130_reg_304_pp0_iter84_reg;
                tmp_i_130_reg_304_pp0_iter86_reg <= tmp_i_130_reg_304_pp0_iter85_reg;
                tmp_i_130_reg_304_pp0_iter8_reg <= tmp_i_130_reg_304_pp0_iter7_reg;
                tmp_i_130_reg_304_pp0_iter9_reg <= tmp_i_130_reg_304_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_130_reg_304 <= tmp_i_130_fu_269_p2;
                tmp_i_130_reg_304_pp0_iter1_reg <= tmp_i_130_reg_304;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter69_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_i_reg_338 <= grp_sin_or_cos_double_s_fu_207_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_i_reg_294 <= grp_fu_260_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_130_reg_304_pp0_iter41_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_reg_333 <= grp_fu_256_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, Len_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter87, tmp_i_130_fu_269_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter86)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = Len_out_full_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_i_130_fu_269_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter87 = ap_const_logic_1) and (ap_enable_reg_pp0_iter86 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter87 = ap_const_logic_1) and (ap_enable_reg_pp0_iter86 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_i_130_fu_269_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    Buff_A_blk_n_assign_proc : process(Buff_A_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter87, tmp_i_130_reg_304_pp0_iter86_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter87 = ap_const_logic_1))) then 
            Buff_A_blk_n <= Buff_A_full_n;
        else 
            Buff_A_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Buff_A_din <= tmp_29_i_reg_369;

    Buff_A_write_assign_proc : process(ap_enable_reg_pp0_iter87, tmp_i_130_reg_304_pp0_iter86_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter87 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff_A_write <= ap_const_logic_1;
        else 
            Buff_A_write <= ap_const_logic_0;
        end if; 
    end process;


    Buff_B_blk_n_assign_proc : process(Buff_B_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter87, tmp_i_130_reg_304_pp0_iter86_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter87 = ap_const_logic_1))) then 
            Buff_B_blk_n <= Buff_B_full_n;
        else 
            Buff_B_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Buff_B_din <= tmp_31_i_reg_374;

    Buff_B_write_assign_proc : process(ap_enable_reg_pp0_iter87, tmp_i_130_reg_304_pp0_iter86_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter87 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff_B_write <= ap_const_logic_1;
        else 
            Buff_B_write <= ap_const_logic_0;
        end if; 
    end process;


    InA_TDATA_blk_n_assign_proc : process(InA_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_i_130_reg_304)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            InA_TDATA_blk_n <= InA_V_data_V_0_state(0);
        else 
            InA_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    InA_TREADY <= InA_V_dest_V_0_state(1);
    InA_V_data_V_0_ack_in <= InA_V_data_V_0_state(1);

    InA_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_130_reg_304, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            InA_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            InA_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    InA_V_data_V_0_data_out_assign_proc : process(InA_V_data_V_0_payload_A, InA_V_data_V_0_payload_B, InA_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = InA_V_data_V_0_sel)) then 
            InA_V_data_V_0_data_out <= InA_V_data_V_0_payload_B;
        else 
            InA_V_data_V_0_data_out <= InA_V_data_V_0_payload_A;
        end if; 
    end process;

    InA_V_data_V_0_load_A <= (not(InA_V_data_V_0_sel_wr) and InA_V_data_V_0_state_cmp_full);
    InA_V_data_V_0_load_B <= (InA_V_data_V_0_state_cmp_full and InA_V_data_V_0_sel_wr);
    InA_V_data_V_0_sel <= InA_V_data_V_0_sel_rd;
    InA_V_data_V_0_state_cmp_full <= '0' when (InA_V_data_V_0_state = ap_const_lv2_1) else '1';
    InA_V_data_V_0_vld_in <= InA_TVALID;
    InA_V_data_V_0_vld_out <= InA_V_data_V_0_state(0);

    InA_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_130_reg_304, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            InA_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            InA_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    InA_V_dest_V_0_vld_in <= InA_TVALID;

    InB_TDATA_blk_n_assign_proc : process(InB_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_i_130_reg_304)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            InB_TDATA_blk_n <= InB_V_data_V_0_state(0);
        else 
            InB_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    InB_TREADY <= InB_V_dest_V_0_state(1);
    InB_V_data_V_0_ack_in <= InB_V_data_V_0_state(1);

    InB_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_130_reg_304, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            InB_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            InB_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    InB_V_data_V_0_data_out_assign_proc : process(InB_V_data_V_0_payload_A, InB_V_data_V_0_payload_B, InB_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = InB_V_data_V_0_sel)) then 
            InB_V_data_V_0_data_out <= InB_V_data_V_0_payload_B;
        else 
            InB_V_data_V_0_data_out <= InB_V_data_V_0_payload_A;
        end if; 
    end process;

    InB_V_data_V_0_load_A <= (not(InB_V_data_V_0_sel_wr) and InB_V_data_V_0_state_cmp_full);
    InB_V_data_V_0_load_B <= (InB_V_data_V_0_state_cmp_full and InB_V_data_V_0_sel_wr);
    InB_V_data_V_0_sel <= InB_V_data_V_0_sel_rd;
    InB_V_data_V_0_state_cmp_full <= '0' when (InB_V_data_V_0_state = ap_const_lv2_1) else '1';
    InB_V_data_V_0_vld_in <= InB_TVALID;
    InB_V_data_V_0_vld_out <= InB_V_data_V_0_state(0);

    InB_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_130_reg_304, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            InB_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            InB_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    InB_V_dest_V_0_vld_in <= InB_TVALID;

    Len_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, Len_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Len_out_blk_n <= Len_out_full_n;
        else 
            Len_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Len_out_din <= Len;

    Len_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, Len_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = Len_out_full_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Len_out_write <= ap_const_logic_1;
        else 
            Len_out_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state95 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(InA_V_data_V_0_vld_out, InB_V_data_V_0_vld_out, Buff_A_full_n, Buff_B_full_n, ap_enable_reg_pp0_iter1, tmp_i_130_reg_304, ap_enable_reg_pp0_iter87, tmp_i_130_reg_304_pp0_iter86_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter87 = ap_const_logic_1) and (((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_B_full_n)) or ((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_A_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InB_V_data_V_0_vld_out)) or ((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InA_V_data_V_0_vld_out)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(InA_V_data_V_0_vld_out, InB_V_data_V_0_vld_out, Buff_A_full_n, Buff_B_full_n, ap_enable_reg_pp0_iter1, tmp_i_130_reg_304, ap_enable_reg_pp0_iter87, tmp_i_130_reg_304_pp0_iter86_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter87 = ap_const_logic_1) and (((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_B_full_n)) or ((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_A_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InB_V_data_V_0_vld_out)) or ((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InA_V_data_V_0_vld_out)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(InA_V_data_V_0_vld_out, InB_V_data_V_0_vld_out, Buff_A_full_n, Buff_B_full_n, ap_enable_reg_pp0_iter1, tmp_i_130_reg_304, ap_enable_reg_pp0_iter87, tmp_i_130_reg_304_pp0_iter86_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter87 = ap_const_logic_1) and (((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_B_full_n)) or ((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_A_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InB_V_data_V_0_vld_out)) or ((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InA_V_data_V_0_vld_out)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, Len_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = Len_out_full_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter67 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter68 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter70 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter71 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage0_iter72 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter73 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage0_iter74 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage0_iter75 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage0_iter76 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage0_iter77 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage0_iter78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage0_iter79 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage0_iter80 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage0_iter81 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage0_iter82 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter1_assign_proc : process(InA_V_data_V_0_vld_out, InB_V_data_V_0_vld_out, tmp_i_130_reg_304)
    begin
                ap_block_state8_pp0_stage0_iter1 <= (((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InB_V_data_V_0_vld_out)) or ((tmp_i_130_reg_304 = ap_const_lv1_1) and (ap_const_logic_0 = InA_V_data_V_0_vld_out)));
    end process;

        ap_block_state90_pp0_stage0_iter83 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage0_iter84 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage0_iter85 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage0_iter86 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state94_pp0_stage0_iter87_assign_proc : process(Buff_A_full_n, Buff_B_full_n, tmp_i_130_reg_304_pp0_iter86_reg)
    begin
                ap_block_state94_pp0_stage0_iter87 <= (((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_B_full_n)) or ((tmp_i_130_reg_304_pp0_iter86_reg = ap_const_lv1_1) and (ap_const_logic_0 = Buff_A_full_n)));
    end process;

        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(tmp_i_130_fu_269_p2)
    begin
        if ((tmp_i_130_fu_269_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter87, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter73, ap_enable_reg_pp0_iter74, ap_enable_reg_pp0_iter75, ap_enable_reg_pp0_iter76, ap_enable_reg_pp0_iter77, ap_enable_reg_pp0_iter78, ap_enable_reg_pp0_iter79, ap_enable_reg_pp0_iter80, ap_enable_reg_pp0_iter81, ap_enable_reg_pp0_iter82, ap_enable_reg_pp0_iter83, ap_enable_reg_pp0_iter84, ap_enable_reg_pp0_iter85, ap_enable_reg_pp0_iter86)
    begin
        if (((ap_enable_reg_pp0_iter87 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter86 = ap_const_logic_0) and (ap_enable_reg_pp0_iter85 = ap_const_logic_0) and (ap_enable_reg_pp0_iter84 = ap_const_logic_0) and (ap_enable_reg_pp0_iter83 = ap_const_logic_0) and (ap_enable_reg_pp0_iter82 = ap_const_logic_0) and (ap_enable_reg_pp0_iter81 = ap_const_logic_0) and (ap_enable_reg_pp0_iter80 = ap_const_logic_0) and (ap_enable_reg_pp0_iter79 = ap_const_logic_0) and (ap_enable_reg_pp0_iter78 = ap_const_logic_0) and (ap_enable_reg_pp0_iter77 = ap_const_logic_0) and (ap_enable_reg_pp0_iter76 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_0) and (ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter73 = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_228_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_232_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_232_ce <= ap_const_logic_1;
        else 
            grp_fu_232_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_235_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_235_ce <= ap_const_logic_1;
        else 
            grp_fu_235_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_241_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_241_ce <= ap_const_logic_1;
        else 
            grp_fu_241_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_246_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_246_ce <= ap_const_logic_1;
        else 
            grp_fu_246_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_251_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_251_ce <= ap_const_logic_1;
        else 
            grp_fu_251_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_256_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_256_ce <= ap_const_logic_1;
        else 
            grp_fu_256_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_260_ce_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, Len_out_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_1 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_const_logic_0 = Len_out_full_n) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            grp_fu_260_ce <= ap_const_logic_0;
        else 
            grp_fu_260_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_260_p0_assign_proc : process(ap_CS_fsm_state1, Len, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_cast_i_fu_264_p1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_260_p0 <= i_cast_i_fu_264_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_260_p0 <= Len;
        else 
            grp_fu_260_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sin_or_cos_double_s_fu_207_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_sin_or_cos_double_s_fu_207_ap_ce <= ap_const_logic_1;
        else 
            grp_sin_or_cos_double_s_fu_207_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_207_ap_start <= grp_sin_or_cos_double_s_fu_207_ap_start_reg;
    i_cast_i_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_196),32));
    i_fu_274_p2 <= std_logic_vector(unsigned(i_i_reg_196) + unsigned(ap_const_lv31_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_130_fu_269_p2 <= "1" when (signed(i_cast_i_fu_264_p1) < signed(Len)) else "0";
end behav;
