-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pitchshift is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    InA_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    InA_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    InA_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    InA_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    InA_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    InA_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    InA_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    InB_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    InB_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    InB_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    InB_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OutA_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OutA_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OutA_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OutA_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OutA_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OutA_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OutA_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OutB_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OutB_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OutB_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OutB_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OutB_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OutB_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OutB_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    InA_TVALID : IN STD_LOGIC;
    InA_TREADY : OUT STD_LOGIC;
    InB_TVALID : IN STD_LOGIC;
    InB_TREADY : OUT STD_LOGIC;
    OutA_TVALID : OUT STD_LOGIC;
    OutA_TREADY : IN STD_LOGIC;
    OutB_TVALID : OUT STD_LOGIC;
    OutB_TREADY : IN STD_LOGIC );
end;


architecture behav of pitchshift is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pitchshift,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.651000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=52,HLS_SYN_DSP=117,HLS_SYN_FF=13430,HLS_SYN_LUT=18439,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal Len : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc117_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc117_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc117_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc117_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc117_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc117_U0_start_out : STD_LOGIC;
    signal Loop_1_proc117_U0_start_write : STD_LOGIC;
    signal Loop_1_proc117_U0_InA_TREADY : STD_LOGIC;
    signal Loop_1_proc117_U0_InB_TREADY : STD_LOGIC;
    signal Loop_1_proc117_U0_Buff_A_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc117_U0_Buff_A_write : STD_LOGIC;
    signal Loop_1_proc117_U0_Buff_B_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc117_U0_Buff_B_write : STD_LOGIC;
    signal Loop_1_proc117_U0_Len_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc117_U0_Len_out_write : STD_LOGIC;
    signal Loop_2_proc118_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc118_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc118_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc118_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc118_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc118_U0_Len_read : STD_LOGIC;
    signal Loop_2_proc118_U0_Buff_A_read : STD_LOGIC;
    signal Loop_2_proc118_U0_Buff_B_read : STD_LOGIC;
    signal Loop_2_proc118_U0_OutA_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc118_U0_OutA_TVALID : STD_LOGIC;
    signal Loop_2_proc118_U0_OutA_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc118_U0_OutA_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc118_U0_OutA_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc118_U0_OutA_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc118_U0_OutA_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc118_U0_OutA_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc118_U0_OutB_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc118_U0_OutB_TVALID : STD_LOGIC;
    signal Loop_2_proc118_U0_OutB_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc118_U0_OutB_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_2_proc118_U0_OutB_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc118_U0_OutB_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc118_U0_OutB_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_2_proc118_U0_OutB_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal Buff_A_channel_full_n : STD_LOGIC;
    signal Buff_A_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff_A_channel_empty_n : STD_LOGIC;
    signal Buff_B_channel_full_n : STD_LOGIC;
    signal Buff_B_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff_B_channel_empty_n : STD_LOGIC;
    signal Len_c_full_n : STD_LOGIC;
    signal Len_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Len_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_Loop_2_proc118_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc118_U0_full_n : STD_LOGIC;
    signal start_for_Loop_2_proc118_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc118_U0_empty_n : STD_LOGIC;
    signal Loop_2_proc118_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc118_U0_start_write : STD_LOGIC;

    component Loop_1_proc117 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        Len : IN STD_LOGIC_VECTOR (31 downto 0);
        InA_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        InA_TVALID : IN STD_LOGIC;
        InA_TREADY : OUT STD_LOGIC;
        InA_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        InA_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        InA_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        InA_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        InA_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        InA_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        InB_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        InB_TVALID : IN STD_LOGIC;
        InB_TREADY : OUT STD_LOGIC;
        InB_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        InB_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        InB_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        InB_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        InB_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        InB_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        Buff_A_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff_A_full_n : IN STD_LOGIC;
        Buff_A_write : OUT STD_LOGIC;
        Buff_B_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff_B_full_n : IN STD_LOGIC;
        Buff_B_write : OUT STD_LOGIC;
        Len_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Len_out_full_n : IN STD_LOGIC;
        Len_out_write : OUT STD_LOGIC );
    end component;


    component Loop_2_proc118 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Len_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Len_empty_n : IN STD_LOGIC;
        Len_read : OUT STD_LOGIC;
        Buff_A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff_A_empty_n : IN STD_LOGIC;
        Buff_A_read : OUT STD_LOGIC;
        Buff_B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff_B_empty_n : IN STD_LOGIC;
        Buff_B_read : OUT STD_LOGIC;
        OutA_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OutA_TVALID : OUT STD_LOGIC;
        OutA_TREADY : IN STD_LOGIC;
        OutA_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OutA_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OutA_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OutA_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OutA_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OutA_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OutB_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OutB_TVALID : OUT STD_LOGIC;
        OutB_TREADY : IN STD_LOGIC;
        OutB_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OutB_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OutB_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OutB_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OutB_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OutB_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d8192_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_2_wdI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pitchshift_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        Len : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pitchshift_ctrl_s_axi_U : component pitchshift_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        Len => Len);

    Loop_1_proc117_U0 : component Loop_1_proc117
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc117_U0_ap_start,
        start_full_n => start_for_Loop_2_proc118_U0_full_n,
        ap_done => Loop_1_proc117_U0_ap_done,
        ap_continue => Loop_1_proc117_U0_ap_continue,
        ap_idle => Loop_1_proc117_U0_ap_idle,
        ap_ready => Loop_1_proc117_U0_ap_ready,
        start_out => Loop_1_proc117_U0_start_out,
        start_write => Loop_1_proc117_U0_start_write,
        Len => Len,
        InA_TDATA => InA_TDATA,
        InA_TVALID => InA_TVALID,
        InA_TREADY => Loop_1_proc117_U0_InA_TREADY,
        InA_TKEEP => InA_TKEEP,
        InA_TSTRB => InA_TSTRB,
        InA_TUSER => InA_TUSER,
        InA_TLAST => InA_TLAST,
        InA_TID => InA_TID,
        InA_TDEST => InA_TDEST,
        InB_TDATA => InB_TDATA,
        InB_TVALID => InB_TVALID,
        InB_TREADY => Loop_1_proc117_U0_InB_TREADY,
        InB_TKEEP => InB_TKEEP,
        InB_TSTRB => InB_TSTRB,
        InB_TUSER => InB_TUSER,
        InB_TLAST => InB_TLAST,
        InB_TID => InB_TID,
        InB_TDEST => InB_TDEST,
        Buff_A_din => Loop_1_proc117_U0_Buff_A_din,
        Buff_A_full_n => Buff_A_channel_full_n,
        Buff_A_write => Loop_1_proc117_U0_Buff_A_write,
        Buff_B_din => Loop_1_proc117_U0_Buff_B_din,
        Buff_B_full_n => Buff_B_channel_full_n,
        Buff_B_write => Loop_1_proc117_U0_Buff_B_write,
        Len_out_din => Loop_1_proc117_U0_Len_out_din,
        Len_out_full_n => Len_c_full_n,
        Len_out_write => Loop_1_proc117_U0_Len_out_write);

    Loop_2_proc118_U0 : component Loop_2_proc118
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc118_U0_ap_start,
        ap_done => Loop_2_proc118_U0_ap_done,
        ap_continue => Loop_2_proc118_U0_ap_continue,
        ap_idle => Loop_2_proc118_U0_ap_idle,
        ap_ready => Loop_2_proc118_U0_ap_ready,
        Len_dout => Len_c_dout,
        Len_empty_n => Len_c_empty_n,
        Len_read => Loop_2_proc118_U0_Len_read,
        Buff_A_dout => Buff_A_channel_dout,
        Buff_A_empty_n => Buff_A_channel_empty_n,
        Buff_A_read => Loop_2_proc118_U0_Buff_A_read,
        Buff_B_dout => Buff_B_channel_dout,
        Buff_B_empty_n => Buff_B_channel_empty_n,
        Buff_B_read => Loop_2_proc118_U0_Buff_B_read,
        OutA_TDATA => Loop_2_proc118_U0_OutA_TDATA,
        OutA_TVALID => Loop_2_proc118_U0_OutA_TVALID,
        OutA_TREADY => OutA_TREADY,
        OutA_TKEEP => Loop_2_proc118_U0_OutA_TKEEP,
        OutA_TSTRB => Loop_2_proc118_U0_OutA_TSTRB,
        OutA_TUSER => Loop_2_proc118_U0_OutA_TUSER,
        OutA_TLAST => Loop_2_proc118_U0_OutA_TLAST,
        OutA_TID => Loop_2_proc118_U0_OutA_TID,
        OutA_TDEST => Loop_2_proc118_U0_OutA_TDEST,
        OutB_TDATA => Loop_2_proc118_U0_OutB_TDATA,
        OutB_TVALID => Loop_2_proc118_U0_OutB_TVALID,
        OutB_TREADY => OutB_TREADY,
        OutB_TKEEP => Loop_2_proc118_U0_OutB_TKEEP,
        OutB_TSTRB => Loop_2_proc118_U0_OutB_TSTRB,
        OutB_TUSER => Loop_2_proc118_U0_OutB_TUSER,
        OutB_TLAST => Loop_2_proc118_U0_OutB_TLAST,
        OutB_TID => Loop_2_proc118_U0_OutB_TID,
        OutB_TDEST => Loop_2_proc118_U0_OutB_TDEST);

    Buff_A_channel_U : component fifo_w32_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc117_U0_Buff_A_din,
        if_full_n => Buff_A_channel_full_n,
        if_write => Loop_1_proc117_U0_Buff_A_write,
        if_dout => Buff_A_channel_dout,
        if_empty_n => Buff_A_channel_empty_n,
        if_read => Loop_2_proc118_U0_Buff_A_read);

    Buff_B_channel_U : component fifo_w32_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc117_U0_Buff_B_din,
        if_full_n => Buff_B_channel_full_n,
        if_write => Loop_1_proc117_U0_Buff_B_write,
        if_dout => Buff_B_channel_dout,
        if_empty_n => Buff_B_channel_empty_n,
        if_read => Loop_2_proc118_U0_Buff_B_read);

    Len_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc117_U0_Len_out_din,
        if_full_n => Len_c_full_n,
        if_write => Loop_1_proc117_U0_Len_out_write,
        if_dout => Len_c_dout,
        if_empty_n => Len_c_empty_n,
        if_read => Loop_2_proc118_U0_Len_read);

    start_for_Loop_2_wdI_U : component start_for_Loop_2_wdI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_2_proc118_U0_din,
        if_full_n => start_for_Loop_2_proc118_U0_full_n,
        if_write => Loop_1_proc117_U0_start_write,
        if_dout => start_for_Loop_2_proc118_U0_dout,
        if_empty_n => start_for_Loop_2_proc118_U0_empty_n,
        if_read => Loop_2_proc118_U0_ap_ready);




    InA_TREADY <= Loop_1_proc117_U0_InA_TREADY;
    InB_TREADY <= Loop_1_proc117_U0_InB_TREADY;
    Loop_1_proc117_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc117_U0_ap_start <= ap_start;
    Loop_2_proc118_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc118_U0_ap_start <= start_for_Loop_2_proc118_U0_empty_n;
    Loop_2_proc118_U0_start_full_n <= ap_const_logic_1;
    Loop_2_proc118_U0_start_write <= ap_const_logic_0;
    OutA_TDATA <= Loop_2_proc118_U0_OutA_TDATA;
    OutA_TDEST <= Loop_2_proc118_U0_OutA_TDEST;
    OutA_TID <= Loop_2_proc118_U0_OutA_TID;
    OutA_TKEEP <= Loop_2_proc118_U0_OutA_TKEEP;
    OutA_TLAST <= Loop_2_proc118_U0_OutA_TLAST;
    OutA_TSTRB <= Loop_2_proc118_U0_OutA_TSTRB;
    OutA_TUSER <= Loop_2_proc118_U0_OutA_TUSER;
    OutA_TVALID <= Loop_2_proc118_U0_OutA_TVALID;
    OutB_TDATA <= Loop_2_proc118_U0_OutB_TDATA;
    OutB_TDEST <= Loop_2_proc118_U0_OutB_TDEST;
    OutB_TID <= Loop_2_proc118_U0_OutB_TID;
    OutB_TKEEP <= Loop_2_proc118_U0_OutB_TKEEP;
    OutB_TLAST <= Loop_2_proc118_U0_OutB_TLAST;
    OutB_TSTRB <= Loop_2_proc118_U0_OutB_TSTRB;
    OutB_TUSER <= Loop_2_proc118_U0_OutB_TUSER;
    OutB_TVALID <= Loop_2_proc118_U0_OutB_TVALID;
    ap_done <= Loop_2_proc118_U0_ap_done;
    ap_idle <= (Loop_2_proc118_U0_ap_idle and Loop_1_proc117_U0_ap_idle);
    ap_ready <= Loop_1_proc117_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_2_proc118_U0_ap_done;
    ap_sync_ready <= Loop_1_proc117_U0_ap_ready;
    start_for_Loop_2_proc118_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
