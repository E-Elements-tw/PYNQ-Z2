// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc118 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Len_dout,
        Len_empty_n,
        Len_read,
        Buff_A_dout,
        Buff_A_empty_n,
        Buff_A_read,
        Buff_B_dout,
        Buff_B_empty_n,
        Buff_B_read,
        OutA_TDATA,
        OutA_TVALID,
        OutA_TREADY,
        OutA_TKEEP,
        OutA_TSTRB,
        OutA_TUSER,
        OutA_TLAST,
        OutA_TID,
        OutA_TDEST,
        OutB_TDATA,
        OutB_TVALID,
        OutB_TREADY,
        OutB_TKEEP,
        OutB_TSTRB,
        OutB_TUSER,
        OutB_TLAST,
        OutB_TID,
        OutB_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Len_dout;
input   Len_empty_n;
output   Len_read;
input  [31:0] Buff_A_dout;
input   Buff_A_empty_n;
output   Buff_A_read;
input  [31:0] Buff_B_dout;
input   Buff_B_empty_n;
output   Buff_B_read;
output  [31:0] OutA_TDATA;
output   OutA_TVALID;
input   OutA_TREADY;
output  [3:0] OutA_TKEEP;
output  [3:0] OutA_TSTRB;
output  [0:0] OutA_TUSER;
output  [0:0] OutA_TLAST;
output  [0:0] OutA_TID;
output  [0:0] OutA_TDEST;
output  [31:0] OutB_TDATA;
output   OutB_TVALID;
input   OutB_TREADY;
output  [3:0] OutB_TKEEP;
output  [3:0] OutB_TSTRB;
output  [0:0] OutB_TUSER;
output  [0:0] OutB_TLAST;
output  [0:0] OutB_TID;
output  [0:0] OutB_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Len_read;
reg Buff_A_read;
reg Buff_B_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] OutA_V_data_V_1_data_out;
reg    OutA_V_data_V_1_vld_in;
wire    OutA_V_data_V_1_vld_out;
wire    OutA_V_data_V_1_ack_in;
wire    OutA_V_data_V_1_ack_out;
reg   [31:0] OutA_V_data_V_1_payload_A;
reg   [31:0] OutA_V_data_V_1_payload_B;
reg    OutA_V_data_V_1_sel_rd;
reg    OutA_V_data_V_1_sel_wr;
wire    OutA_V_data_V_1_sel;
wire    OutA_V_data_V_1_load_A;
wire    OutA_V_data_V_1_load_B;
reg   [1:0] OutA_V_data_V_1_state;
wire    OutA_V_data_V_1_state_cmp_full;
wire   [3:0] OutA_V_keep_V_1_data_out;
reg    OutA_V_keep_V_1_vld_in;
wire    OutA_V_keep_V_1_vld_out;
wire    OutA_V_keep_V_1_ack_in;
wire    OutA_V_keep_V_1_ack_out;
reg    OutA_V_keep_V_1_sel_rd;
wire    OutA_V_keep_V_1_sel;
reg   [1:0] OutA_V_keep_V_1_state;
wire   [3:0] OutA_V_strb_V_1_data_out;
reg    OutA_V_strb_V_1_vld_in;
wire    OutA_V_strb_V_1_vld_out;
wire    OutA_V_strb_V_1_ack_in;
wire    OutA_V_strb_V_1_ack_out;
reg    OutA_V_strb_V_1_sel_rd;
wire    OutA_V_strb_V_1_sel;
reg   [1:0] OutA_V_strb_V_1_state;
wire   [0:0] OutA_V_user_V_1_data_out;
reg    OutA_V_user_V_1_vld_in;
wire    OutA_V_user_V_1_vld_out;
wire    OutA_V_user_V_1_ack_in;
wire    OutA_V_user_V_1_ack_out;
reg    OutA_V_user_V_1_sel_rd;
wire    OutA_V_user_V_1_sel;
reg   [1:0] OutA_V_user_V_1_state;
reg   [0:0] OutA_V_last_V_1_data_out;
reg    OutA_V_last_V_1_vld_in;
wire    OutA_V_last_V_1_vld_out;
wire    OutA_V_last_V_1_ack_in;
wire    OutA_V_last_V_1_ack_out;
reg   [0:0] OutA_V_last_V_1_payload_A;
reg   [0:0] OutA_V_last_V_1_payload_B;
reg    OutA_V_last_V_1_sel_rd;
reg    OutA_V_last_V_1_sel_wr;
wire    OutA_V_last_V_1_sel;
wire    OutA_V_last_V_1_load_A;
wire    OutA_V_last_V_1_load_B;
reg   [1:0] OutA_V_last_V_1_state;
wire    OutA_V_last_V_1_state_cmp_full;
wire   [0:0] OutA_V_id_V_1_data_out;
reg    OutA_V_id_V_1_vld_in;
wire    OutA_V_id_V_1_vld_out;
wire    OutA_V_id_V_1_ack_in;
wire    OutA_V_id_V_1_ack_out;
reg    OutA_V_id_V_1_sel_rd;
wire    OutA_V_id_V_1_sel;
reg   [1:0] OutA_V_id_V_1_state;
wire   [0:0] OutA_V_dest_V_1_data_out;
reg    OutA_V_dest_V_1_vld_in;
wire    OutA_V_dest_V_1_vld_out;
wire    OutA_V_dest_V_1_ack_in;
wire    OutA_V_dest_V_1_ack_out;
reg    OutA_V_dest_V_1_sel_rd;
wire    OutA_V_dest_V_1_sel;
reg   [1:0] OutA_V_dest_V_1_state;
reg   [31:0] OutB_V_data_V_1_data_out;
reg    OutB_V_data_V_1_vld_in;
wire    OutB_V_data_V_1_vld_out;
wire    OutB_V_data_V_1_ack_in;
wire    OutB_V_data_V_1_ack_out;
reg   [31:0] OutB_V_data_V_1_payload_A;
reg   [31:0] OutB_V_data_V_1_payload_B;
reg    OutB_V_data_V_1_sel_rd;
reg    OutB_V_data_V_1_sel_wr;
wire    OutB_V_data_V_1_sel;
wire    OutB_V_data_V_1_load_A;
wire    OutB_V_data_V_1_load_B;
reg   [1:0] OutB_V_data_V_1_state;
wire    OutB_V_data_V_1_state_cmp_full;
wire   [3:0] OutB_V_keep_V_1_data_out;
reg    OutB_V_keep_V_1_vld_in;
wire    OutB_V_keep_V_1_vld_out;
wire    OutB_V_keep_V_1_ack_in;
wire    OutB_V_keep_V_1_ack_out;
reg    OutB_V_keep_V_1_sel_rd;
wire    OutB_V_keep_V_1_sel;
reg   [1:0] OutB_V_keep_V_1_state;
wire   [3:0] OutB_V_strb_V_1_data_out;
reg    OutB_V_strb_V_1_vld_in;
wire    OutB_V_strb_V_1_vld_out;
wire    OutB_V_strb_V_1_ack_in;
wire    OutB_V_strb_V_1_ack_out;
reg    OutB_V_strb_V_1_sel_rd;
wire    OutB_V_strb_V_1_sel;
reg   [1:0] OutB_V_strb_V_1_state;
wire   [0:0] OutB_V_user_V_1_data_out;
reg    OutB_V_user_V_1_vld_in;
wire    OutB_V_user_V_1_vld_out;
wire    OutB_V_user_V_1_ack_in;
wire    OutB_V_user_V_1_ack_out;
reg    OutB_V_user_V_1_sel_rd;
wire    OutB_V_user_V_1_sel;
reg   [1:0] OutB_V_user_V_1_state;
reg   [0:0] OutB_V_last_V_1_data_out;
reg    OutB_V_last_V_1_vld_in;
wire    OutB_V_last_V_1_vld_out;
wire    OutB_V_last_V_1_ack_in;
wire    OutB_V_last_V_1_ack_out;
reg   [0:0] OutB_V_last_V_1_payload_A;
reg   [0:0] OutB_V_last_V_1_payload_B;
reg    OutB_V_last_V_1_sel_rd;
reg    OutB_V_last_V_1_sel_wr;
wire    OutB_V_last_V_1_sel;
wire    OutB_V_last_V_1_load_A;
wire    OutB_V_last_V_1_load_B;
reg   [1:0] OutB_V_last_V_1_state;
wire    OutB_V_last_V_1_state_cmp_full;
wire   [0:0] OutB_V_id_V_1_data_out;
reg    OutB_V_id_V_1_vld_in;
wire    OutB_V_id_V_1_vld_out;
wire    OutB_V_id_V_1_ack_in;
wire    OutB_V_id_V_1_ack_out;
reg    OutB_V_id_V_1_sel_rd;
wire    OutB_V_id_V_1_sel;
reg   [1:0] OutB_V_id_V_1_state;
wire   [0:0] OutB_V_dest_V_1_data_out;
reg    OutB_V_dest_V_1_vld_in;
wire    OutB_V_dest_V_1_vld_out;
wire    OutB_V_dest_V_1_ack_in;
wire    OutB_V_dest_V_1_ack_out;
reg    OutB_V_dest_V_1_sel_rd;
wire    OutB_V_dest_V_1_sel;
reg   [1:0] OutB_V_dest_V_1_state;
reg    Len_blk_n;
reg    Buff_A_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_33_i_reg_549;
reg    Buff_B_blk_n;
reg    OutA_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_33_i_reg_549_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_33_i_reg_549_pp0_iter2_reg;
reg    OutB_TDATA_blk_n;
reg   [30:0] i1_i_reg_222;
reg   [31:0] Len_read_reg_539;
reg    ap_block_state1;
wire   [31:0] tmp_32_i_fu_233_p2;
reg   [31:0] tmp_32_i_reg_544;
wire   [0:0] tmp_33_i_fu_243_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_fu_248_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_254_p2;
reg   [0:0] tmp_last_V_reg_558;
reg   [0:0] tmp_last_V_reg_558_pp0_iter1_reg;
reg   [0:0] p_Result_s_reg_564;
wire   [22:0] loc_V_2_fu_281_p1;
reg   [22:0] loc_V_2_reg_569;
wire   [0:0] isNeg_fu_295_p3;
reg   [0:0] isNeg_reg_574;
wire  signed [8:0] sh_assign_1_fu_313_p3;
reg  signed [8:0] sh_assign_1_reg_579;
reg   [0:0] p_Result_43_reg_585;
wire   [22:0] loc_V_4_fu_343_p1;
reg   [22:0] loc_V_4_reg_590;
wire   [0:0] isNeg_1_fu_357_p3;
reg   [0:0] isNeg_1_reg_595;
wire  signed [8:0] sh_assign_3_fu_375_p3;
reg  signed [8:0] sh_assign_3_reg_600;
wire   [31:0] p_Val2_45_fu_453_p3;
wire   [31:0] p_Val2_46_fu_531_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] i1_cast_i_fu_239_p1;
wire   [31:0] p_Val2_36_fu_259_p1;
wire   [7:0] loc_V_fu_271_p4;
wire   [8:0] tmp_i_i_i_cast_i_fu_285_p1;
wire   [8:0] sh_assign_fu_289_p2;
wire   [7:0] tmp_59_i_i_i_fu_303_p2;
wire  signed [8:0] tmp_59_i_i_cast_i_fu_309_p1;
wire   [31:0] p_Val2_s_fu_321_p1;
wire   [7:0] loc_V_3_fu_333_p4;
wire   [8:0] tmp_i_i_i_cast_i1_fu_347_p1;
wire   [8:0] sh_assign_2_fu_351_p2;
wire   [7:0] tmp_59_i_i_i1_fu_365_p2;
wire  signed [8:0] tmp_59_i_i_cast_i1_fu_371_p1;
wire   [24:0] tmp_58_i_i_i_fu_383_p4;
wire  signed [31:0] sh_assign_2_i_i_cast_fu_396_p1;
wire  signed [24:0] sh_assign_2_i_i_cast_1_fu_399_p1;
wire   [78:0] tmp_58_i_i_cast2_i_fu_392_p1;
wire   [78:0] tmp_60_i_i_i_fu_402_p1;
wire   [24:0] tmp_61_i_i_i_fu_406_p2;
wire   [0:0] tmp_fu_418_p3;
wire   [78:0] tmp_62_i_i_i_fu_412_p2;
wire   [31:0] tmp_s_fu_426_p1;
wire   [31:0] tmp_17_fu_430_p4;
wire   [31:0] p_Val2_38_fu_440_p3;
wire   [31:0] p_Val2_i_i_i_fu_447_p2;
wire   [24:0] tmp_58_i_i_i7_fu_461_p4;
wire  signed [31:0] sh_assign_2_i_i_cast_2_fu_474_p1;
wire  signed [24:0] sh_assign_2_i_i_cast_3_fu_477_p1;
wire   [78:0] tmp_58_i_i_cast2_i8_fu_470_p1;
wire   [78:0] tmp_60_i_i_i1_fu_480_p1;
wire   [24:0] tmp_61_i_i_i1_fu_484_p2;
wire   [0:0] tmp_30_fu_496_p3;
wire   [78:0] tmp_62_i_i_i1_fu_490_p2;
wire   [31:0] tmp_18_fu_504_p1;
wire   [31:0] tmp_19_fu_508_p4;
wire   [31:0] p_Val2_42_fu_518_p3;
wire   [31:0] p_Val2_i_i_i1_fu_525_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 OutA_V_data_V_1_sel_rd = 1'b0;
#0 OutA_V_data_V_1_sel_wr = 1'b0;
#0 OutA_V_data_V_1_state = 2'd0;
#0 OutA_V_keep_V_1_sel_rd = 1'b0;
#0 OutA_V_keep_V_1_state = 2'd0;
#0 OutA_V_strb_V_1_sel_rd = 1'b0;
#0 OutA_V_strb_V_1_state = 2'd0;
#0 OutA_V_user_V_1_sel_rd = 1'b0;
#0 OutA_V_user_V_1_state = 2'd0;
#0 OutA_V_last_V_1_sel_rd = 1'b0;
#0 OutA_V_last_V_1_sel_wr = 1'b0;
#0 OutA_V_last_V_1_state = 2'd0;
#0 OutA_V_id_V_1_sel_rd = 1'b0;
#0 OutA_V_id_V_1_state = 2'd0;
#0 OutA_V_dest_V_1_sel_rd = 1'b0;
#0 OutA_V_dest_V_1_state = 2'd0;
#0 OutB_V_data_V_1_sel_rd = 1'b0;
#0 OutB_V_data_V_1_sel_wr = 1'b0;
#0 OutB_V_data_V_1_state = 2'd0;
#0 OutB_V_keep_V_1_sel_rd = 1'b0;
#0 OutB_V_keep_V_1_state = 2'd0;
#0 OutB_V_strb_V_1_sel_rd = 1'b0;
#0 OutB_V_strb_V_1_state = 2'd0;
#0 OutB_V_user_V_1_sel_rd = 1'b0;
#0 OutB_V_user_V_1_state = 2'd0;
#0 OutB_V_last_V_1_sel_rd = 1'b0;
#0 OutB_V_last_V_1_sel_wr = 1'b0;
#0 OutB_V_last_V_1_state = 2'd0;
#0 OutB_V_id_V_1_sel_rd = 1'b0;
#0 OutB_V_id_V_1_state = 2'd0;
#0 OutB_V_dest_V_1_sel_rd = 1'b0;
#0 OutB_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_data_V_1_ack_out) & (1'b1 == OutA_V_data_V_1_vld_out))) begin
            OutA_V_data_V_1_sel_rd <= ~OutA_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_data_V_1_ack_in) & (1'b1 == OutA_V_data_V_1_vld_in))) begin
            OutA_V_data_V_1_sel_wr <= ~OutA_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutA_V_data_V_1_state) & (1'b0 == OutA_V_data_V_1_vld_in)) | ((2'd3 == OutA_V_data_V_1_state) & (1'b0 == OutA_V_data_V_1_vld_in) & (1'b1 == OutA_V_data_V_1_ack_out)))) begin
            OutA_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutA_V_data_V_1_state) & (1'b0 == OutA_V_data_V_1_ack_out)) | ((2'd3 == OutA_V_data_V_1_state) & (1'b0 == OutA_V_data_V_1_ack_out) & (1'b1 == OutA_V_data_V_1_vld_in)))) begin
            OutA_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutA_V_data_V_1_vld_in) & (1'b1 == OutA_V_data_V_1_ack_out)) & ~((1'b0 == OutA_V_data_V_1_ack_out) & (1'b1 == OutA_V_data_V_1_vld_in)) & (2'd3 == OutA_V_data_V_1_state)) | ((2'd1 == OutA_V_data_V_1_state) & (1'b1 == OutA_V_data_V_1_ack_out)) | ((2'd2 == OutA_V_data_V_1_state) & (1'b1 == OutA_V_data_V_1_vld_in)))) begin
            OutA_V_data_V_1_state <= 2'd3;
        end else begin
            OutA_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_dest_V_1_ack_out) & (1'b1 == OutA_V_dest_V_1_vld_out))) begin
            OutA_V_dest_V_1_sel_rd <= ~OutA_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutA_V_dest_V_1_state) & (1'b0 == OutA_V_dest_V_1_vld_in)) | ((2'd3 == OutA_V_dest_V_1_state) & (1'b0 == OutA_V_dest_V_1_vld_in) & (1'b1 == OutA_V_dest_V_1_ack_out)))) begin
            OutA_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutA_V_dest_V_1_state) & (1'b0 == OutA_V_dest_V_1_ack_out)) | ((2'd3 == OutA_V_dest_V_1_state) & (1'b0 == OutA_V_dest_V_1_ack_out) & (1'b1 == OutA_V_dest_V_1_vld_in)))) begin
            OutA_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutA_V_dest_V_1_vld_in) & (1'b1 == OutA_V_dest_V_1_ack_out)) & ~((1'b0 == OutA_V_dest_V_1_ack_out) & (1'b1 == OutA_V_dest_V_1_vld_in)) & (2'd3 == OutA_V_dest_V_1_state)) | ((2'd1 == OutA_V_dest_V_1_state) & (1'b1 == OutA_V_dest_V_1_ack_out)) | ((2'd2 == OutA_V_dest_V_1_state) & (1'b1 == OutA_V_dest_V_1_vld_in)))) begin
            OutA_V_dest_V_1_state <= 2'd3;
        end else begin
            OutA_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_id_V_1_ack_out) & (1'b1 == OutA_V_id_V_1_vld_out))) begin
            OutA_V_id_V_1_sel_rd <= ~OutA_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutA_V_id_V_1_state) & (1'b0 == OutA_V_id_V_1_vld_in)) | ((2'd3 == OutA_V_id_V_1_state) & (1'b0 == OutA_V_id_V_1_vld_in) & (1'b1 == OutA_V_id_V_1_ack_out)))) begin
            OutA_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutA_V_id_V_1_state) & (1'b0 == OutA_V_id_V_1_ack_out)) | ((2'd3 == OutA_V_id_V_1_state) & (1'b0 == OutA_V_id_V_1_ack_out) & (1'b1 == OutA_V_id_V_1_vld_in)))) begin
            OutA_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutA_V_id_V_1_vld_in) & (1'b1 == OutA_V_id_V_1_ack_out)) & ~((1'b0 == OutA_V_id_V_1_ack_out) & (1'b1 == OutA_V_id_V_1_vld_in)) & (2'd3 == OutA_V_id_V_1_state)) | ((2'd1 == OutA_V_id_V_1_state) & (1'b1 == OutA_V_id_V_1_ack_out)) | ((2'd2 == OutA_V_id_V_1_state) & (1'b1 == OutA_V_id_V_1_vld_in)))) begin
            OutA_V_id_V_1_state <= 2'd3;
        end else begin
            OutA_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_keep_V_1_ack_out) & (1'b1 == OutA_V_keep_V_1_vld_out))) begin
            OutA_V_keep_V_1_sel_rd <= ~OutA_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutA_V_keep_V_1_state) & (1'b0 == OutA_V_keep_V_1_vld_in)) | ((2'd3 == OutA_V_keep_V_1_state) & (1'b0 == OutA_V_keep_V_1_vld_in) & (1'b1 == OutA_V_keep_V_1_ack_out)))) begin
            OutA_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutA_V_keep_V_1_state) & (1'b0 == OutA_V_keep_V_1_ack_out)) | ((2'd3 == OutA_V_keep_V_1_state) & (1'b0 == OutA_V_keep_V_1_ack_out) & (1'b1 == OutA_V_keep_V_1_vld_in)))) begin
            OutA_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutA_V_keep_V_1_vld_in) & (1'b1 == OutA_V_keep_V_1_ack_out)) & ~((1'b0 == OutA_V_keep_V_1_ack_out) & (1'b1 == OutA_V_keep_V_1_vld_in)) & (2'd3 == OutA_V_keep_V_1_state)) | ((2'd1 == OutA_V_keep_V_1_state) & (1'b1 == OutA_V_keep_V_1_ack_out)) | ((2'd2 == OutA_V_keep_V_1_state) & (1'b1 == OutA_V_keep_V_1_vld_in)))) begin
            OutA_V_keep_V_1_state <= 2'd3;
        end else begin
            OutA_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_last_V_1_ack_out) & (1'b1 == OutA_V_last_V_1_vld_out))) begin
            OutA_V_last_V_1_sel_rd <= ~OutA_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_last_V_1_ack_in) & (1'b1 == OutA_V_last_V_1_vld_in))) begin
            OutA_V_last_V_1_sel_wr <= ~OutA_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutA_V_last_V_1_state) & (1'b0 == OutA_V_last_V_1_vld_in)) | ((2'd3 == OutA_V_last_V_1_state) & (1'b0 == OutA_V_last_V_1_vld_in) & (1'b1 == OutA_V_last_V_1_ack_out)))) begin
            OutA_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutA_V_last_V_1_state) & (1'b0 == OutA_V_last_V_1_ack_out)) | ((2'd3 == OutA_V_last_V_1_state) & (1'b0 == OutA_V_last_V_1_ack_out) & (1'b1 == OutA_V_last_V_1_vld_in)))) begin
            OutA_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutA_V_last_V_1_vld_in) & (1'b1 == OutA_V_last_V_1_ack_out)) & ~((1'b0 == OutA_V_last_V_1_ack_out) & (1'b1 == OutA_V_last_V_1_vld_in)) & (2'd3 == OutA_V_last_V_1_state)) | ((2'd1 == OutA_V_last_V_1_state) & (1'b1 == OutA_V_last_V_1_ack_out)) | ((2'd2 == OutA_V_last_V_1_state) & (1'b1 == OutA_V_last_V_1_vld_in)))) begin
            OutA_V_last_V_1_state <= 2'd3;
        end else begin
            OutA_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_strb_V_1_ack_out) & (1'b1 == OutA_V_strb_V_1_vld_out))) begin
            OutA_V_strb_V_1_sel_rd <= ~OutA_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutA_V_strb_V_1_state) & (1'b0 == OutA_V_strb_V_1_vld_in)) | ((2'd3 == OutA_V_strb_V_1_state) & (1'b0 == OutA_V_strb_V_1_vld_in) & (1'b1 == OutA_V_strb_V_1_ack_out)))) begin
            OutA_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutA_V_strb_V_1_state) & (1'b0 == OutA_V_strb_V_1_ack_out)) | ((2'd3 == OutA_V_strb_V_1_state) & (1'b0 == OutA_V_strb_V_1_ack_out) & (1'b1 == OutA_V_strb_V_1_vld_in)))) begin
            OutA_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutA_V_strb_V_1_vld_in) & (1'b1 == OutA_V_strb_V_1_ack_out)) & ~((1'b0 == OutA_V_strb_V_1_ack_out) & (1'b1 == OutA_V_strb_V_1_vld_in)) & (2'd3 == OutA_V_strb_V_1_state)) | ((2'd1 == OutA_V_strb_V_1_state) & (1'b1 == OutA_V_strb_V_1_ack_out)) | ((2'd2 == OutA_V_strb_V_1_state) & (1'b1 == OutA_V_strb_V_1_vld_in)))) begin
            OutA_V_strb_V_1_state <= 2'd3;
        end else begin
            OutA_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutA_V_user_V_1_ack_out) & (1'b1 == OutA_V_user_V_1_vld_out))) begin
            OutA_V_user_V_1_sel_rd <= ~OutA_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutA_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutA_V_user_V_1_state) & (1'b0 == OutA_V_user_V_1_vld_in)) | ((2'd3 == OutA_V_user_V_1_state) & (1'b0 == OutA_V_user_V_1_vld_in) & (1'b1 == OutA_V_user_V_1_ack_out)))) begin
            OutA_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutA_V_user_V_1_state) & (1'b0 == OutA_V_user_V_1_ack_out)) | ((2'd3 == OutA_V_user_V_1_state) & (1'b0 == OutA_V_user_V_1_ack_out) & (1'b1 == OutA_V_user_V_1_vld_in)))) begin
            OutA_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutA_V_user_V_1_vld_in) & (1'b1 == OutA_V_user_V_1_ack_out)) & ~((1'b0 == OutA_V_user_V_1_ack_out) & (1'b1 == OutA_V_user_V_1_vld_in)) & (2'd3 == OutA_V_user_V_1_state)) | ((2'd1 == OutA_V_user_V_1_state) & (1'b1 == OutA_V_user_V_1_ack_out)) | ((2'd2 == OutA_V_user_V_1_state) & (1'b1 == OutA_V_user_V_1_vld_in)))) begin
            OutA_V_user_V_1_state <= 2'd3;
        end else begin
            OutA_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_data_V_1_ack_out) & (1'b1 == OutB_V_data_V_1_vld_out))) begin
            OutB_V_data_V_1_sel_rd <= ~OutB_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_data_V_1_ack_in) & (1'b1 == OutB_V_data_V_1_vld_in))) begin
            OutB_V_data_V_1_sel_wr <= ~OutB_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutB_V_data_V_1_state) & (1'b0 == OutB_V_data_V_1_vld_in)) | ((2'd3 == OutB_V_data_V_1_state) & (1'b0 == OutB_V_data_V_1_vld_in) & (1'b1 == OutB_V_data_V_1_ack_out)))) begin
            OutB_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutB_V_data_V_1_state) & (1'b0 == OutB_V_data_V_1_ack_out)) | ((2'd3 == OutB_V_data_V_1_state) & (1'b0 == OutB_V_data_V_1_ack_out) & (1'b1 == OutB_V_data_V_1_vld_in)))) begin
            OutB_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutB_V_data_V_1_vld_in) & (1'b1 == OutB_V_data_V_1_ack_out)) & ~((1'b0 == OutB_V_data_V_1_ack_out) & (1'b1 == OutB_V_data_V_1_vld_in)) & (2'd3 == OutB_V_data_V_1_state)) | ((2'd1 == OutB_V_data_V_1_state) & (1'b1 == OutB_V_data_V_1_ack_out)) | ((2'd2 == OutB_V_data_V_1_state) & (1'b1 == OutB_V_data_V_1_vld_in)))) begin
            OutB_V_data_V_1_state <= 2'd3;
        end else begin
            OutB_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_dest_V_1_ack_out) & (1'b1 == OutB_V_dest_V_1_vld_out))) begin
            OutB_V_dest_V_1_sel_rd <= ~OutB_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutB_V_dest_V_1_state) & (1'b0 == OutB_V_dest_V_1_vld_in)) | ((2'd3 == OutB_V_dest_V_1_state) & (1'b0 == OutB_V_dest_V_1_vld_in) & (1'b1 == OutB_V_dest_V_1_ack_out)))) begin
            OutB_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutB_V_dest_V_1_state) & (1'b0 == OutB_V_dest_V_1_ack_out)) | ((2'd3 == OutB_V_dest_V_1_state) & (1'b0 == OutB_V_dest_V_1_ack_out) & (1'b1 == OutB_V_dest_V_1_vld_in)))) begin
            OutB_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutB_V_dest_V_1_vld_in) & (1'b1 == OutB_V_dest_V_1_ack_out)) & ~((1'b0 == OutB_V_dest_V_1_ack_out) & (1'b1 == OutB_V_dest_V_1_vld_in)) & (2'd3 == OutB_V_dest_V_1_state)) | ((2'd1 == OutB_V_dest_V_1_state) & (1'b1 == OutB_V_dest_V_1_ack_out)) | ((2'd2 == OutB_V_dest_V_1_state) & (1'b1 == OutB_V_dest_V_1_vld_in)))) begin
            OutB_V_dest_V_1_state <= 2'd3;
        end else begin
            OutB_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_id_V_1_ack_out) & (1'b1 == OutB_V_id_V_1_vld_out))) begin
            OutB_V_id_V_1_sel_rd <= ~OutB_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutB_V_id_V_1_state) & (1'b0 == OutB_V_id_V_1_vld_in)) | ((2'd3 == OutB_V_id_V_1_state) & (1'b0 == OutB_V_id_V_1_vld_in) & (1'b1 == OutB_V_id_V_1_ack_out)))) begin
            OutB_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutB_V_id_V_1_state) & (1'b0 == OutB_V_id_V_1_ack_out)) | ((2'd3 == OutB_V_id_V_1_state) & (1'b0 == OutB_V_id_V_1_ack_out) & (1'b1 == OutB_V_id_V_1_vld_in)))) begin
            OutB_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutB_V_id_V_1_vld_in) & (1'b1 == OutB_V_id_V_1_ack_out)) & ~((1'b0 == OutB_V_id_V_1_ack_out) & (1'b1 == OutB_V_id_V_1_vld_in)) & (2'd3 == OutB_V_id_V_1_state)) | ((2'd1 == OutB_V_id_V_1_state) & (1'b1 == OutB_V_id_V_1_ack_out)) | ((2'd2 == OutB_V_id_V_1_state) & (1'b1 == OutB_V_id_V_1_vld_in)))) begin
            OutB_V_id_V_1_state <= 2'd3;
        end else begin
            OutB_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_keep_V_1_ack_out) & (1'b1 == OutB_V_keep_V_1_vld_out))) begin
            OutB_V_keep_V_1_sel_rd <= ~OutB_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutB_V_keep_V_1_state) & (1'b0 == OutB_V_keep_V_1_vld_in)) | ((2'd3 == OutB_V_keep_V_1_state) & (1'b0 == OutB_V_keep_V_1_vld_in) & (1'b1 == OutB_V_keep_V_1_ack_out)))) begin
            OutB_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutB_V_keep_V_1_state) & (1'b0 == OutB_V_keep_V_1_ack_out)) | ((2'd3 == OutB_V_keep_V_1_state) & (1'b0 == OutB_V_keep_V_1_ack_out) & (1'b1 == OutB_V_keep_V_1_vld_in)))) begin
            OutB_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutB_V_keep_V_1_vld_in) & (1'b1 == OutB_V_keep_V_1_ack_out)) & ~((1'b0 == OutB_V_keep_V_1_ack_out) & (1'b1 == OutB_V_keep_V_1_vld_in)) & (2'd3 == OutB_V_keep_V_1_state)) | ((2'd1 == OutB_V_keep_V_1_state) & (1'b1 == OutB_V_keep_V_1_ack_out)) | ((2'd2 == OutB_V_keep_V_1_state) & (1'b1 == OutB_V_keep_V_1_vld_in)))) begin
            OutB_V_keep_V_1_state <= 2'd3;
        end else begin
            OutB_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_last_V_1_ack_out) & (1'b1 == OutB_V_last_V_1_vld_out))) begin
            OutB_V_last_V_1_sel_rd <= ~OutB_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_last_V_1_ack_in) & (1'b1 == OutB_V_last_V_1_vld_in))) begin
            OutB_V_last_V_1_sel_wr <= ~OutB_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutB_V_last_V_1_state) & (1'b0 == OutB_V_last_V_1_vld_in)) | ((2'd3 == OutB_V_last_V_1_state) & (1'b0 == OutB_V_last_V_1_vld_in) & (1'b1 == OutB_V_last_V_1_ack_out)))) begin
            OutB_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutB_V_last_V_1_state) & (1'b0 == OutB_V_last_V_1_ack_out)) | ((2'd3 == OutB_V_last_V_1_state) & (1'b0 == OutB_V_last_V_1_ack_out) & (1'b1 == OutB_V_last_V_1_vld_in)))) begin
            OutB_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutB_V_last_V_1_vld_in) & (1'b1 == OutB_V_last_V_1_ack_out)) & ~((1'b0 == OutB_V_last_V_1_ack_out) & (1'b1 == OutB_V_last_V_1_vld_in)) & (2'd3 == OutB_V_last_V_1_state)) | ((2'd1 == OutB_V_last_V_1_state) & (1'b1 == OutB_V_last_V_1_ack_out)) | ((2'd2 == OutB_V_last_V_1_state) & (1'b1 == OutB_V_last_V_1_vld_in)))) begin
            OutB_V_last_V_1_state <= 2'd3;
        end else begin
            OutB_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_strb_V_1_ack_out) & (1'b1 == OutB_V_strb_V_1_vld_out))) begin
            OutB_V_strb_V_1_sel_rd <= ~OutB_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutB_V_strb_V_1_state) & (1'b0 == OutB_V_strb_V_1_vld_in)) | ((2'd3 == OutB_V_strb_V_1_state) & (1'b0 == OutB_V_strb_V_1_vld_in) & (1'b1 == OutB_V_strb_V_1_ack_out)))) begin
            OutB_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutB_V_strb_V_1_state) & (1'b0 == OutB_V_strb_V_1_ack_out)) | ((2'd3 == OutB_V_strb_V_1_state) & (1'b0 == OutB_V_strb_V_1_ack_out) & (1'b1 == OutB_V_strb_V_1_vld_in)))) begin
            OutB_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutB_V_strb_V_1_vld_in) & (1'b1 == OutB_V_strb_V_1_ack_out)) & ~((1'b0 == OutB_V_strb_V_1_ack_out) & (1'b1 == OutB_V_strb_V_1_vld_in)) & (2'd3 == OutB_V_strb_V_1_state)) | ((2'd1 == OutB_V_strb_V_1_state) & (1'b1 == OutB_V_strb_V_1_ack_out)) | ((2'd2 == OutB_V_strb_V_1_state) & (1'b1 == OutB_V_strb_V_1_vld_in)))) begin
            OutB_V_strb_V_1_state <= 2'd3;
        end else begin
            OutB_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutB_V_user_V_1_ack_out) & (1'b1 == OutB_V_user_V_1_vld_out))) begin
            OutB_V_user_V_1_sel_rd <= ~OutB_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OutB_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutB_V_user_V_1_state) & (1'b0 == OutB_V_user_V_1_vld_in)) | ((2'd3 == OutB_V_user_V_1_state) & (1'b0 == OutB_V_user_V_1_vld_in) & (1'b1 == OutB_V_user_V_1_ack_out)))) begin
            OutB_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutB_V_user_V_1_state) & (1'b0 == OutB_V_user_V_1_ack_out)) | ((2'd3 == OutB_V_user_V_1_state) & (1'b0 == OutB_V_user_V_1_ack_out) & (1'b1 == OutB_V_user_V_1_vld_in)))) begin
            OutB_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutB_V_user_V_1_vld_in) & (1'b1 == OutB_V_user_V_1_ack_out)) & ~((1'b0 == OutB_V_user_V_1_ack_out) & (1'b1 == OutB_V_user_V_1_vld_in)) & (2'd3 == OutB_V_user_V_1_state)) | ((2'd1 == OutB_V_user_V_1_state) & (1'b1 == OutB_V_user_V_1_ack_out)) | ((2'd2 == OutB_V_user_V_1_state) & (1'b1 == OutB_V_user_V_1_vld_in)))) begin
            OutB_V_user_V_1_state <= 2'd3;
        end else begin
            OutB_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == OutB_V_dest_V_1_ack_in) | (1'b0 == OutB_V_id_V_1_ack_in) | (1'b0 == OutB_V_last_V_1_ack_in) | (1'b0 == OutB_V_user_V_1_ack_in) | (1'b0 == OutB_V_strb_V_1_ack_in) | (1'b0 == OutB_V_keep_V_1_ack_in) | (1'b0 == OutA_V_data_V_1_ack_in) | (1'b0 == OutB_V_data_V_1_ack_in) | (1'b0 == OutA_V_dest_V_1_ack_in) | (1'b0 == OutA_V_id_V_1_ack_in) | (1'b0 == OutA_V_last_V_1_ack_in) | (1'b0 == OutA_V_user_V_1_ack_in) | (1'b0 == OutA_V_strb_V_1_ack_in) | (1'b0 == OutA_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (1'b0 == Len_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (1'b0 == Len_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == Len_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_i_reg_222 <= 31'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_fu_243_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_i_reg_222 <= i_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == Len_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Len_read_reg_539 <= Len_dout;
        tmp_32_i_reg_544 <= tmp_32_i_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutA_V_data_V_1_load_A)) begin
        OutA_V_data_V_1_payload_A <= p_Val2_45_fu_453_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutA_V_data_V_1_load_B)) begin
        OutA_V_data_V_1_payload_B <= p_Val2_45_fu_453_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutA_V_last_V_1_load_A)) begin
        OutA_V_last_V_1_payload_A <= tmp_last_V_reg_558_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutA_V_last_V_1_load_B)) begin
        OutA_V_last_V_1_payload_B <= tmp_last_V_reg_558_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutB_V_data_V_1_load_A)) begin
        OutB_V_data_V_1_payload_A <= p_Val2_46_fu_531_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutB_V_data_V_1_load_B)) begin
        OutB_V_data_V_1_payload_B <= p_Val2_46_fu_531_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutB_V_last_V_1_load_A)) begin
        OutB_V_last_V_1_payload_A <= tmp_last_V_reg_558_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutB_V_last_V_1_load_B)) begin
        OutB_V_last_V_1_payload_B <= tmp_last_V_reg_558_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        isNeg_1_reg_595 <= sh_assign_2_fu_351_p2[32'd8];
        isNeg_reg_574 <= sh_assign_fu_289_p2[32'd8];
        loc_V_2_reg_569 <= loc_V_2_fu_281_p1;
        loc_V_4_reg_590 <= loc_V_4_fu_343_p1;
        p_Result_43_reg_585 <= p_Val2_s_fu_321_p1[32'd31];
        p_Result_s_reg_564 <= p_Val2_36_fu_259_p1[32'd31];
        sh_assign_1_reg_579 <= sh_assign_1_fu_313_p3;
        sh_assign_3_reg_600 <= sh_assign_3_fu_375_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_33_i_reg_549 <= tmp_33_i_fu_243_p2;
        tmp_33_i_reg_549_pp0_iter1_reg <= tmp_33_i_reg_549;
        tmp_last_V_reg_558_pp0_iter1_reg <= tmp_last_V_reg_558;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_33_i_reg_549_pp0_iter2_reg <= tmp_33_i_reg_549_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_558 <= tmp_last_V_fu_254_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_33_i_reg_549 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Buff_A_blk_n = Buff_A_empty_n;
    end else begin
        Buff_A_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Buff_A_read = 1'b1;
    end else begin
        Buff_A_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_33_i_reg_549 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Buff_B_blk_n = Buff_B_empty_n;
    end else begin
        Buff_B_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Buff_B_read = 1'b1;
    end else begin
        Buff_B_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Len_blk_n = Len_empty_n;
    end else begin
        Len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == Len_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Len_read = 1'b1;
    end else begin
        Len_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_33_i_reg_549_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        OutA_TDATA_blk_n = OutA_V_data_V_1_state[1'd1];
    end else begin
        OutA_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OutA_V_data_V_1_sel)) begin
        OutA_V_data_V_1_data_out = OutA_V_data_V_1_payload_B;
    end else begin
        OutA_V_data_V_1_data_out = OutA_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutA_V_data_V_1_vld_in = 1'b1;
    end else begin
        OutA_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutA_V_dest_V_1_vld_in = 1'b1;
    end else begin
        OutA_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutA_V_id_V_1_vld_in = 1'b1;
    end else begin
        OutA_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutA_V_keep_V_1_vld_in = 1'b1;
    end else begin
        OutA_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OutA_V_last_V_1_sel)) begin
        OutA_V_last_V_1_data_out = OutA_V_last_V_1_payload_B;
    end else begin
        OutA_V_last_V_1_data_out = OutA_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutA_V_last_V_1_vld_in = 1'b1;
    end else begin
        OutA_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutA_V_strb_V_1_vld_in = 1'b1;
    end else begin
        OutA_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutA_V_user_V_1_vld_in = 1'b1;
    end else begin
        OutA_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_33_i_reg_549_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        OutB_TDATA_blk_n = OutB_V_data_V_1_state[1'd1];
    end else begin
        OutB_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OutB_V_data_V_1_sel)) begin
        OutB_V_data_V_1_data_out = OutB_V_data_V_1_payload_B;
    end else begin
        OutB_V_data_V_1_data_out = OutB_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutB_V_data_V_1_vld_in = 1'b1;
    end else begin
        OutB_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutB_V_dest_V_1_vld_in = 1'b1;
    end else begin
        OutB_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutB_V_id_V_1_vld_in = 1'b1;
    end else begin
        OutB_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutB_V_keep_V_1_vld_in = 1'b1;
    end else begin
        OutB_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OutB_V_last_V_1_sel)) begin
        OutB_V_last_V_1_data_out = OutB_V_last_V_1_payload_B;
    end else begin
        OutB_V_last_V_1_data_out = OutB_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutB_V_last_V_1_vld_in = 1'b1;
    end else begin
        OutB_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutB_V_strb_V_1_vld_in = 1'b1;
    end else begin
        OutB_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutB_V_user_V_1_vld_in = 1'b1;
    end else begin
        OutB_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_33_i_fu_243_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OutB_V_dest_V_1_ack_in) | (1'b0 == OutB_V_id_V_1_ack_in) | (1'b0 == OutB_V_last_V_1_ack_in) | (1'b0 == OutB_V_user_V_1_ack_in) | (1'b0 == OutB_V_strb_V_1_ack_in) | (1'b0 == OutB_V_keep_V_1_ack_in) | (1'b0 == OutA_V_data_V_1_ack_in) | (1'b0 == OutB_V_data_V_1_ack_in) | (1'b0 == OutA_V_dest_V_1_ack_in) | (1'b0 == OutA_V_id_V_1_ack_in) | (1'b0 == OutA_V_last_V_1_ack_in) | (1'b0 == OutA_V_user_V_1_ack_in) | (1'b0 == OutA_V_strb_V_1_ack_in) | (1'b0 == OutA_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OutB_V_dest_V_1_ack_in) | (1'b0 == OutB_V_id_V_1_ack_in) | (1'b0 == OutB_V_last_V_1_ack_in) | (1'b0 == OutB_V_user_V_1_ack_in) | (1'b0 == OutB_V_strb_V_1_ack_in) | (1'b0 == OutB_V_keep_V_1_ack_in) | (1'b0 == OutA_V_data_V_1_ack_in) | (1'b0 == OutB_V_data_V_1_ack_in) | (1'b0 == OutA_V_dest_V_1_ack_in) | (1'b0 == OutA_V_id_V_1_ack_in) | (1'b0 == OutA_V_last_V_1_ack_in) | (1'b0 == OutA_V_user_V_1_ack_in) | (1'b0 == OutA_V_strb_V_1_ack_in) | (1'b0 == OutA_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == Len_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_33_i_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_33_i_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((1'b0 == OutB_V_dest_V_1_ack_in) | (1'b0 == OutB_V_id_V_1_ack_in) | (1'b0 == OutB_V_last_V_1_ack_in) | (1'b0 == OutB_V_user_V_1_ack_in) | (1'b0 == OutB_V_strb_V_1_ack_in) | (1'b0 == OutB_V_keep_V_1_ack_in) | (1'b0 == OutA_V_data_V_1_ack_in) | (1'b0 == OutB_V_data_V_1_ack_in) | (1'b0 == OutA_V_dest_V_1_ack_in) | (1'b0 == OutA_V_id_V_1_ack_in) | (1'b0 == OutA_V_last_V_1_ack_in) | (1'b0 == OutA_V_user_V_1_ack_in) | (1'b0 == OutA_V_strb_V_1_ack_in) | (1'b0 == OutA_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutA_TDATA = OutA_V_data_V_1_data_out;

assign OutA_TDEST = OutA_V_dest_V_1_data_out;

assign OutA_TID = OutA_V_id_V_1_data_out;

assign OutA_TKEEP = OutA_V_keep_V_1_data_out;

assign OutA_TLAST = OutA_V_last_V_1_data_out;

assign OutA_TSTRB = OutA_V_strb_V_1_data_out;

assign OutA_TUSER = OutA_V_user_V_1_data_out;

assign OutA_TVALID = OutA_V_dest_V_1_state[1'd0];

assign OutA_V_data_V_1_ack_in = OutA_V_data_V_1_state[1'd1];

assign OutA_V_data_V_1_ack_out = OutA_TREADY;

assign OutA_V_data_V_1_load_A = (~OutA_V_data_V_1_sel_wr & OutA_V_data_V_1_state_cmp_full);

assign OutA_V_data_V_1_load_B = (OutA_V_data_V_1_state_cmp_full & OutA_V_data_V_1_sel_wr);

assign OutA_V_data_V_1_sel = OutA_V_data_V_1_sel_rd;

assign OutA_V_data_V_1_state_cmp_full = ((OutA_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OutA_V_data_V_1_vld_out = OutA_V_data_V_1_state[1'd0];

assign OutA_V_dest_V_1_ack_in = OutA_V_dest_V_1_state[1'd1];

assign OutA_V_dest_V_1_ack_out = OutA_TREADY;

assign OutA_V_dest_V_1_data_out = 1'd0;

assign OutA_V_dest_V_1_sel = OutA_V_dest_V_1_sel_rd;

assign OutA_V_dest_V_1_vld_out = OutA_V_dest_V_1_state[1'd0];

assign OutA_V_id_V_1_ack_in = OutA_V_id_V_1_state[1'd1];

assign OutA_V_id_V_1_ack_out = OutA_TREADY;

assign OutA_V_id_V_1_data_out = 1'd0;

assign OutA_V_id_V_1_sel = OutA_V_id_V_1_sel_rd;

assign OutA_V_id_V_1_vld_out = OutA_V_id_V_1_state[1'd0];

assign OutA_V_keep_V_1_ack_in = OutA_V_keep_V_1_state[1'd1];

assign OutA_V_keep_V_1_ack_out = OutA_TREADY;

assign OutA_V_keep_V_1_data_out = 4'd15;

assign OutA_V_keep_V_1_sel = OutA_V_keep_V_1_sel_rd;

assign OutA_V_keep_V_1_vld_out = OutA_V_keep_V_1_state[1'd0];

assign OutA_V_last_V_1_ack_in = OutA_V_last_V_1_state[1'd1];

assign OutA_V_last_V_1_ack_out = OutA_TREADY;

assign OutA_V_last_V_1_load_A = (~OutA_V_last_V_1_sel_wr & OutA_V_last_V_1_state_cmp_full);

assign OutA_V_last_V_1_load_B = (OutA_V_last_V_1_state_cmp_full & OutA_V_last_V_1_sel_wr);

assign OutA_V_last_V_1_sel = OutA_V_last_V_1_sel_rd;

assign OutA_V_last_V_1_state_cmp_full = ((OutA_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OutA_V_last_V_1_vld_out = OutA_V_last_V_1_state[1'd0];

assign OutA_V_strb_V_1_ack_in = OutA_V_strb_V_1_state[1'd1];

assign OutA_V_strb_V_1_ack_out = OutA_TREADY;

assign OutA_V_strb_V_1_data_out = 4'd15;

assign OutA_V_strb_V_1_sel = OutA_V_strb_V_1_sel_rd;

assign OutA_V_strb_V_1_vld_out = OutA_V_strb_V_1_state[1'd0];

assign OutA_V_user_V_1_ack_in = OutA_V_user_V_1_state[1'd1];

assign OutA_V_user_V_1_ack_out = OutA_TREADY;

assign OutA_V_user_V_1_data_out = 1'd0;

assign OutA_V_user_V_1_sel = OutA_V_user_V_1_sel_rd;

assign OutA_V_user_V_1_vld_out = OutA_V_user_V_1_state[1'd0];

assign OutB_TDATA = OutB_V_data_V_1_data_out;

assign OutB_TDEST = OutB_V_dest_V_1_data_out;

assign OutB_TID = OutB_V_id_V_1_data_out;

assign OutB_TKEEP = OutB_V_keep_V_1_data_out;

assign OutB_TLAST = OutB_V_last_V_1_data_out;

assign OutB_TSTRB = OutB_V_strb_V_1_data_out;

assign OutB_TUSER = OutB_V_user_V_1_data_out;

assign OutB_TVALID = OutB_V_dest_V_1_state[1'd0];

assign OutB_V_data_V_1_ack_in = OutB_V_data_V_1_state[1'd1];

assign OutB_V_data_V_1_ack_out = OutB_TREADY;

assign OutB_V_data_V_1_load_A = (~OutB_V_data_V_1_sel_wr & OutB_V_data_V_1_state_cmp_full);

assign OutB_V_data_V_1_load_B = (OutB_V_data_V_1_state_cmp_full & OutB_V_data_V_1_sel_wr);

assign OutB_V_data_V_1_sel = OutB_V_data_V_1_sel_rd;

assign OutB_V_data_V_1_state_cmp_full = ((OutB_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OutB_V_data_V_1_vld_out = OutB_V_data_V_1_state[1'd0];

assign OutB_V_dest_V_1_ack_in = OutB_V_dest_V_1_state[1'd1];

assign OutB_V_dest_V_1_ack_out = OutB_TREADY;

assign OutB_V_dest_V_1_data_out = 1'd0;

assign OutB_V_dest_V_1_sel = OutB_V_dest_V_1_sel_rd;

assign OutB_V_dest_V_1_vld_out = OutB_V_dest_V_1_state[1'd0];

assign OutB_V_id_V_1_ack_in = OutB_V_id_V_1_state[1'd1];

assign OutB_V_id_V_1_ack_out = OutB_TREADY;

assign OutB_V_id_V_1_data_out = 1'd0;

assign OutB_V_id_V_1_sel = OutB_V_id_V_1_sel_rd;

assign OutB_V_id_V_1_vld_out = OutB_V_id_V_1_state[1'd0];

assign OutB_V_keep_V_1_ack_in = OutB_V_keep_V_1_state[1'd1];

assign OutB_V_keep_V_1_ack_out = OutB_TREADY;

assign OutB_V_keep_V_1_data_out = 4'd15;

assign OutB_V_keep_V_1_sel = OutB_V_keep_V_1_sel_rd;

assign OutB_V_keep_V_1_vld_out = OutB_V_keep_V_1_state[1'd0];

assign OutB_V_last_V_1_ack_in = OutB_V_last_V_1_state[1'd1];

assign OutB_V_last_V_1_ack_out = OutB_TREADY;

assign OutB_V_last_V_1_load_A = (~OutB_V_last_V_1_sel_wr & OutB_V_last_V_1_state_cmp_full);

assign OutB_V_last_V_1_load_B = (OutB_V_last_V_1_state_cmp_full & OutB_V_last_V_1_sel_wr);

assign OutB_V_last_V_1_sel = OutB_V_last_V_1_sel_rd;

assign OutB_V_last_V_1_state_cmp_full = ((OutB_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OutB_V_last_V_1_vld_out = OutB_V_last_V_1_state[1'd0];

assign OutB_V_strb_V_1_ack_in = OutB_V_strb_V_1_state[1'd1];

assign OutB_V_strb_V_1_ack_out = OutB_TREADY;

assign OutB_V_strb_V_1_data_out = 4'd15;

assign OutB_V_strb_V_1_sel = OutB_V_strb_V_1_sel_rd;

assign OutB_V_strb_V_1_vld_out = OutB_V_strb_V_1_state[1'd0];

assign OutB_V_user_V_1_ack_in = OutB_V_user_V_1_state[1'd1];

assign OutB_V_user_V_1_ack_out = OutB_TREADY;

assign OutB_V_user_V_1_data_out = 1'd0;

assign OutB_V_user_V_1_sel = OutB_V_user_V_1_sel_rd;

assign OutB_V_user_V_1_vld_out = OutB_V_user_V_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_B_empty_n)) | ((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_A_empty_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_B_empty_n)) | ((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_A_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_B_empty_n)) | ((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_A_empty_n)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == Len_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_B_empty_n)) | ((tmp_33_i_reg_549 == 1'd1) & (1'b0 == Buff_A_empty_n)));
end

always @ (*) begin
    ap_block_state4_io = (((tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (1'b0 == OutB_V_data_V_1_ack_in)) | ((tmp_33_i_reg_549_pp0_iter1_reg == 1'd1) & (1'b0 == OutA_V_data_V_1_ack_in)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((tmp_33_i_reg_549_pp0_iter2_reg == 1'd1) & (1'b0 == OutB_V_data_V_1_ack_in)) | ((tmp_33_i_reg_549_pp0_iter2_reg == 1'd1) & (1'b0 == OutA_V_data_V_1_ack_in)));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((1'b0 == OutB_V_dest_V_1_ack_in) | (1'b0 == OutB_V_id_V_1_ack_in) | (1'b0 == OutB_V_last_V_1_ack_in) | (1'b0 == OutB_V_user_V_1_ack_in) | (1'b0 == OutB_V_strb_V_1_ack_in) | (1'b0 == OutB_V_keep_V_1_ack_in) | (1'b0 == OutA_V_data_V_1_ack_in) | (1'b0 == OutB_V_data_V_1_ack_in) | (1'b0 == OutA_V_dest_V_1_ack_in) | (1'b0 == OutA_V_id_V_1_ack_in) | (1'b0 == OutA_V_last_V_1_ack_in) | (1'b0 == OutA_V_user_V_1_ack_in) | (1'b0 == OutA_V_strb_V_1_ack_in) | (1'b0 == OutA_V_keep_V_1_ack_in));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i1_cast_i_fu_239_p1 = i1_i_reg_222;

assign i_fu_248_p2 = (i1_i_reg_222 + 31'd1);

assign isNeg_1_fu_357_p3 = sh_assign_2_fu_351_p2[32'd8];

assign isNeg_fu_295_p3 = sh_assign_fu_289_p2[32'd8];

assign loc_V_2_fu_281_p1 = p_Val2_36_fu_259_p1[22:0];

assign loc_V_3_fu_333_p4 = {{p_Val2_s_fu_321_p1[30:23]}};

assign loc_V_4_fu_343_p1 = p_Val2_s_fu_321_p1[22:0];

assign loc_V_fu_271_p4 = {{p_Val2_36_fu_259_p1[30:23]}};

assign p_Val2_36_fu_259_p1 = Buff_A_dout;

assign p_Val2_38_fu_440_p3 = ((isNeg_reg_574[0:0] === 1'b1) ? tmp_s_fu_426_p1 : tmp_17_fu_430_p4);

assign p_Val2_42_fu_518_p3 = ((isNeg_1_reg_595[0:0] === 1'b1) ? tmp_18_fu_504_p1 : tmp_19_fu_508_p4);

assign p_Val2_45_fu_453_p3 = ((p_Result_s_reg_564[0:0] === 1'b1) ? p_Val2_i_i_i_fu_447_p2 : p_Val2_38_fu_440_p3);

assign p_Val2_46_fu_531_p3 = ((p_Result_43_reg_585[0:0] === 1'b1) ? p_Val2_i_i_i1_fu_525_p2 : p_Val2_42_fu_518_p3);

assign p_Val2_i_i_i1_fu_525_p2 = (32'd0 - p_Val2_42_fu_518_p3);

assign p_Val2_i_i_i_fu_447_p2 = (32'd0 - p_Val2_38_fu_440_p3);

assign p_Val2_s_fu_321_p1 = Buff_B_dout;

assign sh_assign_1_fu_313_p3 = ((isNeg_fu_295_p3[0:0] === 1'b1) ? tmp_59_i_i_cast_i_fu_309_p1 : sh_assign_fu_289_p2);

assign sh_assign_2_fu_351_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_cast_i1_fu_347_p1));

assign sh_assign_2_i_i_cast_1_fu_399_p1 = sh_assign_1_reg_579;

assign sh_assign_2_i_i_cast_2_fu_474_p1 = sh_assign_3_reg_600;

assign sh_assign_2_i_i_cast_3_fu_477_p1 = sh_assign_3_reg_600;

assign sh_assign_2_i_i_cast_fu_396_p1 = sh_assign_1_reg_579;

assign sh_assign_3_fu_375_p3 = ((isNeg_1_fu_357_p3[0:0] === 1'b1) ? tmp_59_i_i_cast_i1_fu_371_p1 : sh_assign_2_fu_351_p2);

assign sh_assign_fu_289_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_cast_i_fu_285_p1));

assign tmp_17_fu_430_p4 = {{tmp_62_i_i_i_fu_412_p2[55:24]}};

assign tmp_18_fu_504_p1 = tmp_30_fu_496_p3;

assign tmp_19_fu_508_p4 = {{tmp_62_i_i_i1_fu_490_p2[55:24]}};

assign tmp_30_fu_496_p3 = tmp_61_i_i_i1_fu_484_p2[32'd24];

assign tmp_32_i_fu_233_p2 = ($signed(Len_dout) + $signed(32'd4294967295));

assign tmp_33_i_fu_243_p2 = (($signed(i1_cast_i_fu_239_p1) < $signed(Len_read_reg_539)) ? 1'b1 : 1'b0);

assign tmp_58_i_i_cast2_i8_fu_470_p1 = tmp_58_i_i_i7_fu_461_p4;

assign tmp_58_i_i_cast2_i_fu_392_p1 = tmp_58_i_i_i_fu_383_p4;

assign tmp_58_i_i_i7_fu_461_p4 = {{{{1'd1}, {loc_V_4_reg_590}}}, {1'd0}};

assign tmp_58_i_i_i_fu_383_p4 = {{{{1'd1}, {loc_V_2_reg_569}}}, {1'd0}};

assign tmp_59_i_i_cast_i1_fu_371_p1 = $signed(tmp_59_i_i_i1_fu_365_p2);

assign tmp_59_i_i_cast_i_fu_309_p1 = $signed(tmp_59_i_i_i_fu_303_p2);

assign tmp_59_i_i_i1_fu_365_p2 = (8'd127 - loc_V_3_fu_333_p4);

assign tmp_59_i_i_i_fu_303_p2 = (8'd127 - loc_V_fu_271_p4);

assign tmp_60_i_i_i1_fu_480_p1 = $unsigned(sh_assign_2_i_i_cast_2_fu_474_p1);

assign tmp_60_i_i_i_fu_402_p1 = $unsigned(sh_assign_2_i_i_cast_fu_396_p1);

assign tmp_61_i_i_i1_fu_484_p2 = tmp_58_i_i_i7_fu_461_p4 >> sh_assign_2_i_i_cast_3_fu_477_p1;

assign tmp_61_i_i_i_fu_406_p2 = tmp_58_i_i_i_fu_383_p4 >> sh_assign_2_i_i_cast_1_fu_399_p1;

assign tmp_62_i_i_i1_fu_490_p2 = tmp_58_i_i_cast2_i8_fu_470_p1 << tmp_60_i_i_i1_fu_480_p1;

assign tmp_62_i_i_i_fu_412_p2 = tmp_58_i_i_cast2_i_fu_392_p1 << tmp_60_i_i_i_fu_402_p1;

assign tmp_fu_418_p3 = tmp_61_i_i_i_fu_406_p2[32'd24];

assign tmp_i_i_i_cast_i1_fu_347_p1 = loc_V_3_fu_333_p4;

assign tmp_i_i_i_cast_i_fu_285_p1 = loc_V_fu_271_p4;

assign tmp_last_V_fu_254_p2 = ((i1_cast_i_fu_239_p1 == tmp_32_i_reg_544) ? 1'b1 : 1'b0);

assign tmp_s_fu_426_p1 = tmp_fu_418_p3;

endmodule //Loop_2_proc118
