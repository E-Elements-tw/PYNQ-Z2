// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc117 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        Len,
        InA_TDATA,
        InA_TVALID,
        InA_TREADY,
        InA_TKEEP,
        InA_TSTRB,
        InA_TUSER,
        InA_TLAST,
        InA_TID,
        InA_TDEST,
        InB_TDATA,
        InB_TVALID,
        InB_TREADY,
        InB_TKEEP,
        InB_TSTRB,
        InB_TUSER,
        InB_TLAST,
        InB_TID,
        InB_TDEST,
        Buff_A_din,
        Buff_A_full_n,
        Buff_A_write,
        Buff_B_din,
        Buff_B_full_n,
        Buff_B_write,
        Len_out_din,
        Len_out_full_n,
        Len_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_pp0_stage0 = 8'd64;
parameter    ap_ST_fsm_state95 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] Len;
input  [31:0] InA_TDATA;
input   InA_TVALID;
output   InA_TREADY;
input  [3:0] InA_TKEEP;
input  [3:0] InA_TSTRB;
input  [0:0] InA_TUSER;
input  [0:0] InA_TLAST;
input  [0:0] InA_TID;
input  [0:0] InA_TDEST;
input  [31:0] InB_TDATA;
input   InB_TVALID;
output   InB_TREADY;
input  [3:0] InB_TKEEP;
input  [3:0] InB_TSTRB;
input  [0:0] InB_TUSER;
input  [0:0] InB_TLAST;
input  [0:0] InB_TID;
input  [0:0] InB_TDEST;
output  [31:0] Buff_A_din;
input   Buff_A_full_n;
output   Buff_A_write;
output  [31:0] Buff_B_din;
input   Buff_B_full_n;
output   Buff_B_write;
output  [31:0] Len_out_din;
input   Len_out_full_n;
output   Len_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg Buff_A_write;
reg Buff_B_write;
reg Len_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] InA_V_data_V_0_data_out;
wire    InA_V_data_V_0_vld_in;
wire    InA_V_data_V_0_vld_out;
wire    InA_V_data_V_0_ack_in;
reg    InA_V_data_V_0_ack_out;
reg   [31:0] InA_V_data_V_0_payload_A;
reg   [31:0] InA_V_data_V_0_payload_B;
reg    InA_V_data_V_0_sel_rd;
reg    InA_V_data_V_0_sel_wr;
wire    InA_V_data_V_0_sel;
wire    InA_V_data_V_0_load_A;
wire    InA_V_data_V_0_load_B;
reg   [1:0] InA_V_data_V_0_state;
wire    InA_V_data_V_0_state_cmp_full;
wire    InA_V_dest_V_0_vld_in;
reg    InA_V_dest_V_0_ack_out;
reg   [1:0] InA_V_dest_V_0_state;
reg   [31:0] InB_V_data_V_0_data_out;
wire    InB_V_data_V_0_vld_in;
wire    InB_V_data_V_0_vld_out;
wire    InB_V_data_V_0_ack_in;
reg    InB_V_data_V_0_ack_out;
reg   [31:0] InB_V_data_V_0_payload_A;
reg   [31:0] InB_V_data_V_0_payload_B;
reg    InB_V_data_V_0_sel_rd;
reg    InB_V_data_V_0_sel_wr;
wire    InB_V_data_V_0_sel;
wire    InB_V_data_V_0_load_A;
wire    InB_V_data_V_0_load_B;
reg   [1:0] InB_V_data_V_0_state;
wire    InB_V_data_V_0_state_cmp_full;
wire    InB_V_dest_V_0_vld_in;
reg    InB_V_dest_V_0_ack_out;
reg   [1:0] InB_V_dest_V_0_state;
reg    InA_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_i_130_reg_304;
reg    InB_TDATA_blk_n;
reg    Buff_A_blk_n;
reg    ap_enable_reg_pp0_iter87;
reg   [0:0] tmp_i_130_reg_304_pp0_iter86_reg;
reg    Buff_B_blk_n;
reg    Len_out_blk_n;
reg   [30:0] i_i_reg_196;
reg    ap_block_state1;
wire   [63:0] grp_fu_260_p1;
reg   [63:0] tmp_i_reg_294;
wire    ap_CS_fsm_state6;
wire   [31:0] i_cast_i_fu_264_p1;
wire    ap_block_state7_pp0_stage0_iter0;
reg    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state14_pp0_stage0_iter7;
wire    ap_block_state15_pp0_stage0_iter8;
wire    ap_block_state16_pp0_stage0_iter9;
wire    ap_block_state17_pp0_stage0_iter10;
wire    ap_block_state18_pp0_stage0_iter11;
wire    ap_block_state19_pp0_stage0_iter12;
wire    ap_block_state20_pp0_stage0_iter13;
wire    ap_block_state21_pp0_stage0_iter14;
wire    ap_block_state22_pp0_stage0_iter15;
wire    ap_block_state23_pp0_stage0_iter16;
wire    ap_block_state24_pp0_stage0_iter17;
wire    ap_block_state25_pp0_stage0_iter18;
wire    ap_block_state26_pp0_stage0_iter19;
wire    ap_block_state27_pp0_stage0_iter20;
wire    ap_block_state28_pp0_stage0_iter21;
wire    ap_block_state29_pp0_stage0_iter22;
wire    ap_block_state30_pp0_stage0_iter23;
wire    ap_block_state31_pp0_stage0_iter24;
wire    ap_block_state32_pp0_stage0_iter25;
wire    ap_block_state33_pp0_stage0_iter26;
wire    ap_block_state34_pp0_stage0_iter27;
wire    ap_block_state35_pp0_stage0_iter28;
wire    ap_block_state36_pp0_stage0_iter29;
wire    ap_block_state37_pp0_stage0_iter30;
wire    ap_block_state38_pp0_stage0_iter31;
wire    ap_block_state39_pp0_stage0_iter32;
wire    ap_block_state40_pp0_stage0_iter33;
wire    ap_block_state41_pp0_stage0_iter34;
wire    ap_block_state42_pp0_stage0_iter35;
wire    ap_block_state43_pp0_stage0_iter36;
wire    ap_block_state44_pp0_stage0_iter37;
wire    ap_block_state45_pp0_stage0_iter38;
wire    ap_block_state46_pp0_stage0_iter39;
wire    ap_block_state47_pp0_stage0_iter40;
wire    ap_block_state48_pp0_stage0_iter41;
wire    ap_block_state49_pp0_stage0_iter42;
wire    ap_block_state50_pp0_stage0_iter43;
wire    ap_block_state51_pp0_stage0_iter44;
wire    ap_block_state52_pp0_stage0_iter45;
wire    ap_block_state53_pp0_stage0_iter46;
wire    ap_block_state54_pp0_stage0_iter47;
wire    ap_block_state55_pp0_stage0_iter48;
wire    ap_block_state56_pp0_stage0_iter49;
wire    ap_block_state57_pp0_stage0_iter50;
wire    ap_block_state58_pp0_stage0_iter51;
wire    ap_block_state59_pp0_stage0_iter52;
wire    ap_block_state60_pp0_stage0_iter53;
wire    ap_block_state61_pp0_stage0_iter54;
wire    ap_block_state62_pp0_stage0_iter55;
wire    ap_block_state63_pp0_stage0_iter56;
wire    ap_block_state64_pp0_stage0_iter57;
wire    ap_block_state65_pp0_stage0_iter58;
wire    ap_block_state66_pp0_stage0_iter59;
wire    ap_block_state67_pp0_stage0_iter60;
wire    ap_block_state68_pp0_stage0_iter61;
wire    ap_block_state69_pp0_stage0_iter62;
wire    ap_block_state70_pp0_stage0_iter63;
wire    ap_block_state71_pp0_stage0_iter64;
wire    ap_block_state72_pp0_stage0_iter65;
wire    ap_block_state73_pp0_stage0_iter66;
wire    ap_block_state74_pp0_stage0_iter67;
wire    ap_block_state75_pp0_stage0_iter68;
wire    ap_block_state76_pp0_stage0_iter69;
wire    ap_block_state77_pp0_stage0_iter70;
wire    ap_block_state78_pp0_stage0_iter71;
wire    ap_block_state79_pp0_stage0_iter72;
wire    ap_block_state80_pp0_stage0_iter73;
wire    ap_block_state81_pp0_stage0_iter74;
wire    ap_block_state82_pp0_stage0_iter75;
wire    ap_block_state83_pp0_stage0_iter76;
wire    ap_block_state84_pp0_stage0_iter77;
wire    ap_block_state85_pp0_stage0_iter78;
wire    ap_block_state86_pp0_stage0_iter79;
wire    ap_block_state87_pp0_stage0_iter80;
wire    ap_block_state88_pp0_stage0_iter81;
wire    ap_block_state89_pp0_stage0_iter82;
wire    ap_block_state90_pp0_stage0_iter83;
wire    ap_block_state91_pp0_stage0_iter84;
wire    ap_block_state92_pp0_stage0_iter85;
wire    ap_block_state93_pp0_stage0_iter86;
reg    ap_block_state94_pp0_stage0_iter87;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_i_130_fu_269_p2;
reg   [0:0] tmp_i_130_reg_304_pp0_iter1_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter2_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter3_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter4_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter5_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter6_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter7_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter8_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter9_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter10_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter11_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter12_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter13_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter14_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter15_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter16_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter17_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter18_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter19_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter20_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter21_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter22_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter23_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter24_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter25_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter26_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter27_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter28_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter29_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter30_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter31_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter32_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter33_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter34_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter35_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter36_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter37_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter38_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter39_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter40_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter41_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter42_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter43_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter44_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter45_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter46_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter47_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter48_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter49_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter50_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter51_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter52_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter53_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter54_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter55_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter56_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter57_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter58_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter59_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter60_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter61_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter62_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter63_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter64_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter65_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter66_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter67_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter68_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter69_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter70_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter71_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter72_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter73_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter74_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter75_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter76_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter77_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter78_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter79_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter80_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter81_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter82_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter83_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter84_reg;
reg   [0:0] tmp_i_130_reg_304_pp0_iter85_reg;
wire   [30:0] i_fu_274_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] tmp_data_V_reg_313;
reg   [31:0] tmp_data_V_reg_313_pp0_iter2_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter3_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter4_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter5_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter6_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter7_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter8_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter9_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter10_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter11_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter12_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter13_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter14_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter15_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter16_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter17_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter18_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter19_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter20_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter21_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter22_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter23_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter24_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter25_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter26_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter27_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter28_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter29_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter30_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter31_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter32_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter33_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter34_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter35_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter36_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter37_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter38_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter39_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter40_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter41_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter42_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter43_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter44_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter45_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter46_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter47_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter48_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter49_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter50_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter51_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter52_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter53_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter54_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter55_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter56_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter57_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter58_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter59_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter60_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter61_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter62_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter63_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter64_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter65_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter66_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter67_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter68_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter69_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter70_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter71_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter72_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter73_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter74_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter75_reg;
reg   [31:0] tmp_data_V_reg_313_pp0_iter76_reg;
reg   [31:0] tmp_data_V_3_reg_318;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter2_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter3_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter4_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter5_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter6_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter7_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter8_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter9_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter10_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter11_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter12_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter13_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter14_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter15_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter16_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter17_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter18_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter19_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter20_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter21_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter22_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter23_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter24_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter25_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter26_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter27_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter28_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter29_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter30_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter31_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter32_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter33_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter34_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter35_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter36_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter37_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter38_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter39_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter40_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter41_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter42_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter43_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter44_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter45_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter46_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter47_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter48_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter49_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter50_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter51_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter52_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter53_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter54_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter55_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter56_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter57_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter58_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter59_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter60_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter61_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter62_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter63_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter64_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter65_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter66_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter67_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter68_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter69_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter70_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter71_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter72_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter73_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter74_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter75_reg;
reg   [31:0] tmp_data_V_3_reg_318_pp0_iter76_reg;
reg   [63:0] tmp_21_i_reg_323;
reg    ap_enable_reg_pp0_iter5;
wire   [63:0] grp_fu_246_p2;
reg   [63:0] tmp_22_i_reg_328;
wire   [63:0] grp_fu_256_p2;
reg   [63:0] x_assign_reg_333;
wire   [63:0] grp_sin_or_cos_double_s_fu_207_ap_return;
reg   [63:0] tmp_i_i_reg_338;
wire   [63:0] grp_fu_241_p2;
reg   [63:0] tmp_25_i_reg_343;
wire   [63:0] grp_fu_251_p2;
reg   [63:0] tmp_26_i_reg_348;
wire   [31:0] i_op_assign_fu_238_p1;
reg   [31:0] i_op_assign_reg_353;
wire   [31:0] grp_fu_232_p1;
reg   [31:0] tmp_28_i_reg_359;
wire   [31:0] grp_fu_235_p1;
reg   [31:0] tmp_30_i_reg_364;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] tmp_29_i_reg_369;
wire   [31:0] grp_fu_228_p2;
reg   [31:0] tmp_31_i_reg_374;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg    ap_enable_reg_pp0_iter74;
reg    ap_enable_reg_pp0_iter75;
reg    ap_enable_reg_pp0_iter76;
reg    ap_enable_reg_pp0_iter77;
reg    ap_enable_reg_pp0_iter78;
reg    ap_enable_reg_pp0_iter79;
reg    ap_enable_reg_pp0_iter80;
reg    ap_enable_reg_pp0_iter81;
reg    ap_enable_reg_pp0_iter82;
reg    ap_enable_reg_pp0_iter83;
reg    ap_enable_reg_pp0_iter84;
reg    ap_enable_reg_pp0_iter85;
reg    ap_enable_reg_pp0_iter86;
wire    grp_sin_or_cos_double_s_fu_207_ap_start;
wire    grp_sin_or_cos_double_s_fu_207_ap_done;
wire    grp_sin_or_cos_double_s_fu_207_ap_idle;
wire    grp_sin_or_cos_double_s_fu_207_ap_ready;
reg    grp_sin_or_cos_double_s_fu_207_ap_ce;
reg    grp_sin_or_cos_double_s_fu_207_ap_start_reg;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] grp_fu_260_p0;
reg    grp_fu_224_ce;
reg    grp_fu_228_ce;
reg    grp_fu_232_ce;
reg    grp_fu_235_ce;
reg    grp_fu_241_ce;
reg    grp_fu_246_ce;
reg    grp_fu_251_ce;
reg    grp_fu_256_ce;
reg    grp_fu_260_ce;
wire    ap_CS_fsm_state95;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 InA_V_data_V_0_sel_rd = 1'b0;
#0 InA_V_data_V_0_sel_wr = 1'b0;
#0 InA_V_data_V_0_state = 2'd0;
#0 InA_V_dest_V_0_state = 2'd0;
#0 InB_V_data_V_0_sel_rd = 1'b0;
#0 InB_V_data_V_0_sel_wr = 1'b0;
#0 InB_V_data_V_0_state = 2'd0;
#0 InB_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter87 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
#0 ap_enable_reg_pp0_iter75 = 1'b0;
#0 ap_enable_reg_pp0_iter76 = 1'b0;
#0 ap_enable_reg_pp0_iter77 = 1'b0;
#0 ap_enable_reg_pp0_iter78 = 1'b0;
#0 ap_enable_reg_pp0_iter79 = 1'b0;
#0 ap_enable_reg_pp0_iter80 = 1'b0;
#0 ap_enable_reg_pp0_iter81 = 1'b0;
#0 ap_enable_reg_pp0_iter82 = 1'b0;
#0 ap_enable_reg_pp0_iter83 = 1'b0;
#0 ap_enable_reg_pp0_iter84 = 1'b0;
#0 ap_enable_reg_pp0_iter85 = 1'b0;
#0 ap_enable_reg_pp0_iter86 = 1'b0;
#0 grp_sin_or_cos_double_s_fu_207_ap_start_reg = 1'b0;
end

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_207(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_207_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_207_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_207_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_207_ap_ready),
    .ap_ce(grp_sin_or_cos_double_s_fu_207_ap_ce),
    .t_in(x_assign_reg_333),
    .ap_return(grp_sin_or_cos_double_s_fu_207_ap_return)
);

pitchshift_fmul_3pcA #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pitchshift_fmul_3pcA_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_op_assign_reg_353),
    .din1(tmp_28_i_reg_359),
    .ce(grp_fu_224_ce),
    .dout(grp_fu_224_p2)
);

pitchshift_fmul_3pcA #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pitchshift_fmul_3pcA_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_op_assign_reg_353),
    .din1(tmp_30_i_reg_364),
    .ce(grp_fu_228_ce),
    .dout(grp_fu_228_p2)
);

pitchshift_sitofpqcK #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pitchshift_sitofpqcK_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_reg_313_pp0_iter76_reg),
    .ce(grp_fu_232_ce),
    .dout(grp_fu_232_p1)
);

pitchshift_sitofpqcK #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pitchshift_sitofpqcK_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_3_reg_318_pp0_iter76_reg),
    .ce(grp_fu_235_ce),
    .dout(grp_fu_235_p1)
);

pitchshift_fptrunrcU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
pitchshift_fptrunrcU_U32(
    .din0(tmp_26_i_reg_348),
    .dout(i_op_assign_fu_238_p1)
);

pitchshift_dsub_6sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
pitchshift_dsub_6sc4_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_i_i_reg_338),
    .ce(grp_fu_241_ce),
    .dout(grp_fu_241_p2)
);

pitchshift_dmul_6tde #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
pitchshift_dmul_6tde_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_21_i_reg_323),
    .din1(64'd4618760256058742858),
    .ce(grp_fu_246_ce),
    .dout(grp_fu_246_p2)
);

pitchshift_dmul_6tde #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
pitchshift_dmul_6tde_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_25_i_reg_343),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_251_ce),
    .dout(grp_fu_251_p2)
);

pitchshift_ddiv_6udo #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
pitchshift_ddiv_6udo_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_22_i_reg_328),
    .din1(tmp_i_reg_294),
    .ce(grp_fu_256_ce),
    .dout(grp_fu_256_p2)
);

pitchshift_sitodpvdy #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
pitchshift_sitodpvdy_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_260_p0),
    .ce(grp_fu_260_ce),
    .dout(grp_fu_260_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InA_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == InA_V_data_V_0_ack_out) & (1'b1 == InA_V_data_V_0_vld_out))) begin
            InA_V_data_V_0_sel_rd <= ~InA_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InA_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == InA_V_data_V_0_ack_in) & (1'b1 == InA_V_data_V_0_vld_in))) begin
            InA_V_data_V_0_sel_wr <= ~InA_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InA_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == InA_V_data_V_0_state) & (1'b0 == InA_V_data_V_0_vld_in)) | ((2'd3 == InA_V_data_V_0_state) & (1'b0 == InA_V_data_V_0_vld_in) & (1'b1 == InA_V_data_V_0_ack_out)))) begin
            InA_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == InA_V_data_V_0_state) & (1'b0 == InA_V_data_V_0_ack_out)) | ((2'd3 == InA_V_data_V_0_state) & (1'b0 == InA_V_data_V_0_ack_out) & (1'b1 == InA_V_data_V_0_vld_in)))) begin
            InA_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == InA_V_data_V_0_vld_in) & (1'b1 == InA_V_data_V_0_ack_out)) & ~((1'b0 == InA_V_data_V_0_ack_out) & (1'b1 == InA_V_data_V_0_vld_in)) & (2'd3 == InA_V_data_V_0_state)) | ((2'd1 == InA_V_data_V_0_state) & (1'b1 == InA_V_data_V_0_ack_out)) | ((2'd2 == InA_V_data_V_0_state) & (1'b1 == InA_V_data_V_0_vld_in)))) begin
            InA_V_data_V_0_state <= 2'd3;
        end else begin
            InA_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InA_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == InA_V_dest_V_0_state) & (1'b0 == InA_V_dest_V_0_vld_in)) | ((2'd3 == InA_V_dest_V_0_state) & (1'b0 == InA_V_dest_V_0_vld_in) & (1'b1 == InA_V_dest_V_0_ack_out)))) begin
            InA_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == InA_V_dest_V_0_state) & (1'b0 == InA_V_dest_V_0_ack_out)) | ((2'd3 == InA_V_dest_V_0_state) & (1'b0 == InA_V_dest_V_0_ack_out) & (1'b1 == InA_V_dest_V_0_vld_in)))) begin
            InA_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == InA_V_dest_V_0_vld_in) & (1'b1 == InA_V_dest_V_0_ack_out)) & ~((1'b0 == InA_V_dest_V_0_ack_out) & (1'b1 == InA_V_dest_V_0_vld_in)) & (2'd3 == InA_V_dest_V_0_state)) | ((2'd1 == InA_V_dest_V_0_state) & (1'b1 == InA_V_dest_V_0_ack_out)) | ((2'd2 == InA_V_dest_V_0_state) & (1'b1 == InA_V_dest_V_0_vld_in)))) begin
            InA_V_dest_V_0_state <= 2'd3;
        end else begin
            InA_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InB_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == InB_V_data_V_0_ack_out) & (1'b1 == InB_V_data_V_0_vld_out))) begin
            InB_V_data_V_0_sel_rd <= ~InB_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InB_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == InB_V_data_V_0_ack_in) & (1'b1 == InB_V_data_V_0_vld_in))) begin
            InB_V_data_V_0_sel_wr <= ~InB_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InB_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == InB_V_data_V_0_state) & (1'b0 == InB_V_data_V_0_vld_in)) | ((2'd3 == InB_V_data_V_0_state) & (1'b0 == InB_V_data_V_0_vld_in) & (1'b1 == InB_V_data_V_0_ack_out)))) begin
            InB_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == InB_V_data_V_0_state) & (1'b0 == InB_V_data_V_0_ack_out)) | ((2'd3 == InB_V_data_V_0_state) & (1'b0 == InB_V_data_V_0_ack_out) & (1'b1 == InB_V_data_V_0_vld_in)))) begin
            InB_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == InB_V_data_V_0_vld_in) & (1'b1 == InB_V_data_V_0_ack_out)) & ~((1'b0 == InB_V_data_V_0_ack_out) & (1'b1 == InB_V_data_V_0_vld_in)) & (2'd3 == InB_V_data_V_0_state)) | ((2'd1 == InB_V_data_V_0_state) & (1'b1 == InB_V_data_V_0_ack_out)) | ((2'd2 == InB_V_data_V_0_state) & (1'b1 == InB_V_data_V_0_vld_in)))) begin
            InB_V_data_V_0_state <= 2'd3;
        end else begin
            InB_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        InB_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == InB_V_dest_V_0_state) & (1'b0 == InB_V_dest_V_0_vld_in)) | ((2'd3 == InB_V_dest_V_0_state) & (1'b0 == InB_V_dest_V_0_vld_in) & (1'b1 == InB_V_dest_V_0_ack_out)))) begin
            InB_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == InB_V_dest_V_0_state) & (1'b0 == InB_V_dest_V_0_ack_out)) | ((2'd3 == InB_V_dest_V_0_state) & (1'b0 == InB_V_dest_V_0_ack_out) & (1'b1 == InB_V_dest_V_0_vld_in)))) begin
            InB_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == InB_V_dest_V_0_vld_in) & (1'b1 == InB_V_dest_V_0_ack_out)) & ~((1'b0 == InB_V_dest_V_0_ack_out) & (1'b1 == InB_V_dest_V_0_vld_in)) & (2'd3 == InB_V_dest_V_0_state)) | ((2'd1 == InB_V_dest_V_0_state) & (1'b1 == InB_V_dest_V_0_ack_out)) | ((2'd2 == InB_V_dest_V_0_state) & (1'b1 == InB_V_dest_V_0_vld_in)))) begin
            InB_V_dest_V_0_state <= 2'd3;
        end else begin
            InB_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state95)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter75 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter76 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter77 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter78 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter78 <= ap_enable_reg_pp0_iter77;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter79 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter79 <= ap_enable_reg_pp0_iter78;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter80 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter80 <= ap_enable_reg_pp0_iter79;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter81 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter81 <= ap_enable_reg_pp0_iter80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter82 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter82 <= ap_enable_reg_pp0_iter81;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter83 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter83 <= ap_enable_reg_pp0_iter82;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter84 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter84 <= ap_enable_reg_pp0_iter83;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter85 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter85 <= ap_enable_reg_pp0_iter84;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter86 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter86 <= ap_enable_reg_pp0_iter85;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter87 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter87 <= ap_enable_reg_pp0_iter86;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter87 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_207_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_i_130_reg_304_pp0_iter41_reg == 1'd1) & (ap_enable_reg_pp0_iter42 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            grp_sin_or_cos_double_s_fu_207_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_207_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_207_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_i_reg_196 <= i_fu_274_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_i_reg_196 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == InA_V_data_V_0_load_A)) begin
        InA_V_data_V_0_payload_A <= InA_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == InA_V_data_V_0_load_B)) begin
        InA_V_data_V_0_payload_B <= InA_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == InB_V_data_V_0_load_A)) begin
        InB_V_data_V_0_payload_A <= InB_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == InB_V_data_V_0_load_B)) begin
        InB_V_data_V_0_payload_B <= InB_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter81_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_op_assign_reg_353 <= i_op_assign_fu_238_p1;
        tmp_28_i_reg_359 <= grp_fu_232_p1;
        tmp_30_i_reg_364 <= grp_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_21_i_reg_323 <= grp_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter10_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_22_i_reg_328 <= grp_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter74_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_25_i_reg_343 <= grp_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter80_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_26_i_reg_348 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter85_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_29_i_reg_369 <= grp_fu_224_p2;
        tmp_31_i_reg_374 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_3_reg_318 <= InB_V_data_V_0_data_out;
        tmp_data_V_reg_313 <= InA_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_data_V_3_reg_318_pp0_iter10_reg <= tmp_data_V_3_reg_318_pp0_iter9_reg;
        tmp_data_V_3_reg_318_pp0_iter11_reg <= tmp_data_V_3_reg_318_pp0_iter10_reg;
        tmp_data_V_3_reg_318_pp0_iter12_reg <= tmp_data_V_3_reg_318_pp0_iter11_reg;
        tmp_data_V_3_reg_318_pp0_iter13_reg <= tmp_data_V_3_reg_318_pp0_iter12_reg;
        tmp_data_V_3_reg_318_pp0_iter14_reg <= tmp_data_V_3_reg_318_pp0_iter13_reg;
        tmp_data_V_3_reg_318_pp0_iter15_reg <= tmp_data_V_3_reg_318_pp0_iter14_reg;
        tmp_data_V_3_reg_318_pp0_iter16_reg <= tmp_data_V_3_reg_318_pp0_iter15_reg;
        tmp_data_V_3_reg_318_pp0_iter17_reg <= tmp_data_V_3_reg_318_pp0_iter16_reg;
        tmp_data_V_3_reg_318_pp0_iter18_reg <= tmp_data_V_3_reg_318_pp0_iter17_reg;
        tmp_data_V_3_reg_318_pp0_iter19_reg <= tmp_data_V_3_reg_318_pp0_iter18_reg;
        tmp_data_V_3_reg_318_pp0_iter20_reg <= tmp_data_V_3_reg_318_pp0_iter19_reg;
        tmp_data_V_3_reg_318_pp0_iter21_reg <= tmp_data_V_3_reg_318_pp0_iter20_reg;
        tmp_data_V_3_reg_318_pp0_iter22_reg <= tmp_data_V_3_reg_318_pp0_iter21_reg;
        tmp_data_V_3_reg_318_pp0_iter23_reg <= tmp_data_V_3_reg_318_pp0_iter22_reg;
        tmp_data_V_3_reg_318_pp0_iter24_reg <= tmp_data_V_3_reg_318_pp0_iter23_reg;
        tmp_data_V_3_reg_318_pp0_iter25_reg <= tmp_data_V_3_reg_318_pp0_iter24_reg;
        tmp_data_V_3_reg_318_pp0_iter26_reg <= tmp_data_V_3_reg_318_pp0_iter25_reg;
        tmp_data_V_3_reg_318_pp0_iter27_reg <= tmp_data_V_3_reg_318_pp0_iter26_reg;
        tmp_data_V_3_reg_318_pp0_iter28_reg <= tmp_data_V_3_reg_318_pp0_iter27_reg;
        tmp_data_V_3_reg_318_pp0_iter29_reg <= tmp_data_V_3_reg_318_pp0_iter28_reg;
        tmp_data_V_3_reg_318_pp0_iter2_reg <= tmp_data_V_3_reg_318;
        tmp_data_V_3_reg_318_pp0_iter30_reg <= tmp_data_V_3_reg_318_pp0_iter29_reg;
        tmp_data_V_3_reg_318_pp0_iter31_reg <= tmp_data_V_3_reg_318_pp0_iter30_reg;
        tmp_data_V_3_reg_318_pp0_iter32_reg <= tmp_data_V_3_reg_318_pp0_iter31_reg;
        tmp_data_V_3_reg_318_pp0_iter33_reg <= tmp_data_V_3_reg_318_pp0_iter32_reg;
        tmp_data_V_3_reg_318_pp0_iter34_reg <= tmp_data_V_3_reg_318_pp0_iter33_reg;
        tmp_data_V_3_reg_318_pp0_iter35_reg <= tmp_data_V_3_reg_318_pp0_iter34_reg;
        tmp_data_V_3_reg_318_pp0_iter36_reg <= tmp_data_V_3_reg_318_pp0_iter35_reg;
        tmp_data_V_3_reg_318_pp0_iter37_reg <= tmp_data_V_3_reg_318_pp0_iter36_reg;
        tmp_data_V_3_reg_318_pp0_iter38_reg <= tmp_data_V_3_reg_318_pp0_iter37_reg;
        tmp_data_V_3_reg_318_pp0_iter39_reg <= tmp_data_V_3_reg_318_pp0_iter38_reg;
        tmp_data_V_3_reg_318_pp0_iter3_reg <= tmp_data_V_3_reg_318_pp0_iter2_reg;
        tmp_data_V_3_reg_318_pp0_iter40_reg <= tmp_data_V_3_reg_318_pp0_iter39_reg;
        tmp_data_V_3_reg_318_pp0_iter41_reg <= tmp_data_V_3_reg_318_pp0_iter40_reg;
        tmp_data_V_3_reg_318_pp0_iter42_reg <= tmp_data_V_3_reg_318_pp0_iter41_reg;
        tmp_data_V_3_reg_318_pp0_iter43_reg <= tmp_data_V_3_reg_318_pp0_iter42_reg;
        tmp_data_V_3_reg_318_pp0_iter44_reg <= tmp_data_V_3_reg_318_pp0_iter43_reg;
        tmp_data_V_3_reg_318_pp0_iter45_reg <= tmp_data_V_3_reg_318_pp0_iter44_reg;
        tmp_data_V_3_reg_318_pp0_iter46_reg <= tmp_data_V_3_reg_318_pp0_iter45_reg;
        tmp_data_V_3_reg_318_pp0_iter47_reg <= tmp_data_V_3_reg_318_pp0_iter46_reg;
        tmp_data_V_3_reg_318_pp0_iter48_reg <= tmp_data_V_3_reg_318_pp0_iter47_reg;
        tmp_data_V_3_reg_318_pp0_iter49_reg <= tmp_data_V_3_reg_318_pp0_iter48_reg;
        tmp_data_V_3_reg_318_pp0_iter4_reg <= tmp_data_V_3_reg_318_pp0_iter3_reg;
        tmp_data_V_3_reg_318_pp0_iter50_reg <= tmp_data_V_3_reg_318_pp0_iter49_reg;
        tmp_data_V_3_reg_318_pp0_iter51_reg <= tmp_data_V_3_reg_318_pp0_iter50_reg;
        tmp_data_V_3_reg_318_pp0_iter52_reg <= tmp_data_V_3_reg_318_pp0_iter51_reg;
        tmp_data_V_3_reg_318_pp0_iter53_reg <= tmp_data_V_3_reg_318_pp0_iter52_reg;
        tmp_data_V_3_reg_318_pp0_iter54_reg <= tmp_data_V_3_reg_318_pp0_iter53_reg;
        tmp_data_V_3_reg_318_pp0_iter55_reg <= tmp_data_V_3_reg_318_pp0_iter54_reg;
        tmp_data_V_3_reg_318_pp0_iter56_reg <= tmp_data_V_3_reg_318_pp0_iter55_reg;
        tmp_data_V_3_reg_318_pp0_iter57_reg <= tmp_data_V_3_reg_318_pp0_iter56_reg;
        tmp_data_V_3_reg_318_pp0_iter58_reg <= tmp_data_V_3_reg_318_pp0_iter57_reg;
        tmp_data_V_3_reg_318_pp0_iter59_reg <= tmp_data_V_3_reg_318_pp0_iter58_reg;
        tmp_data_V_3_reg_318_pp0_iter5_reg <= tmp_data_V_3_reg_318_pp0_iter4_reg;
        tmp_data_V_3_reg_318_pp0_iter60_reg <= tmp_data_V_3_reg_318_pp0_iter59_reg;
        tmp_data_V_3_reg_318_pp0_iter61_reg <= tmp_data_V_3_reg_318_pp0_iter60_reg;
        tmp_data_V_3_reg_318_pp0_iter62_reg <= tmp_data_V_3_reg_318_pp0_iter61_reg;
        tmp_data_V_3_reg_318_pp0_iter63_reg <= tmp_data_V_3_reg_318_pp0_iter62_reg;
        tmp_data_V_3_reg_318_pp0_iter64_reg <= tmp_data_V_3_reg_318_pp0_iter63_reg;
        tmp_data_V_3_reg_318_pp0_iter65_reg <= tmp_data_V_3_reg_318_pp0_iter64_reg;
        tmp_data_V_3_reg_318_pp0_iter66_reg <= tmp_data_V_3_reg_318_pp0_iter65_reg;
        tmp_data_V_3_reg_318_pp0_iter67_reg <= tmp_data_V_3_reg_318_pp0_iter66_reg;
        tmp_data_V_3_reg_318_pp0_iter68_reg <= tmp_data_V_3_reg_318_pp0_iter67_reg;
        tmp_data_V_3_reg_318_pp0_iter69_reg <= tmp_data_V_3_reg_318_pp0_iter68_reg;
        tmp_data_V_3_reg_318_pp0_iter6_reg <= tmp_data_V_3_reg_318_pp0_iter5_reg;
        tmp_data_V_3_reg_318_pp0_iter70_reg <= tmp_data_V_3_reg_318_pp0_iter69_reg;
        tmp_data_V_3_reg_318_pp0_iter71_reg <= tmp_data_V_3_reg_318_pp0_iter70_reg;
        tmp_data_V_3_reg_318_pp0_iter72_reg <= tmp_data_V_3_reg_318_pp0_iter71_reg;
        tmp_data_V_3_reg_318_pp0_iter73_reg <= tmp_data_V_3_reg_318_pp0_iter72_reg;
        tmp_data_V_3_reg_318_pp0_iter74_reg <= tmp_data_V_3_reg_318_pp0_iter73_reg;
        tmp_data_V_3_reg_318_pp0_iter75_reg <= tmp_data_V_3_reg_318_pp0_iter74_reg;
        tmp_data_V_3_reg_318_pp0_iter76_reg <= tmp_data_V_3_reg_318_pp0_iter75_reg;
        tmp_data_V_3_reg_318_pp0_iter7_reg <= tmp_data_V_3_reg_318_pp0_iter6_reg;
        tmp_data_V_3_reg_318_pp0_iter8_reg <= tmp_data_V_3_reg_318_pp0_iter7_reg;
        tmp_data_V_3_reg_318_pp0_iter9_reg <= tmp_data_V_3_reg_318_pp0_iter8_reg;
        tmp_data_V_reg_313_pp0_iter10_reg <= tmp_data_V_reg_313_pp0_iter9_reg;
        tmp_data_V_reg_313_pp0_iter11_reg <= tmp_data_V_reg_313_pp0_iter10_reg;
        tmp_data_V_reg_313_pp0_iter12_reg <= tmp_data_V_reg_313_pp0_iter11_reg;
        tmp_data_V_reg_313_pp0_iter13_reg <= tmp_data_V_reg_313_pp0_iter12_reg;
        tmp_data_V_reg_313_pp0_iter14_reg <= tmp_data_V_reg_313_pp0_iter13_reg;
        tmp_data_V_reg_313_pp0_iter15_reg <= tmp_data_V_reg_313_pp0_iter14_reg;
        tmp_data_V_reg_313_pp0_iter16_reg <= tmp_data_V_reg_313_pp0_iter15_reg;
        tmp_data_V_reg_313_pp0_iter17_reg <= tmp_data_V_reg_313_pp0_iter16_reg;
        tmp_data_V_reg_313_pp0_iter18_reg <= tmp_data_V_reg_313_pp0_iter17_reg;
        tmp_data_V_reg_313_pp0_iter19_reg <= tmp_data_V_reg_313_pp0_iter18_reg;
        tmp_data_V_reg_313_pp0_iter20_reg <= tmp_data_V_reg_313_pp0_iter19_reg;
        tmp_data_V_reg_313_pp0_iter21_reg <= tmp_data_V_reg_313_pp0_iter20_reg;
        tmp_data_V_reg_313_pp0_iter22_reg <= tmp_data_V_reg_313_pp0_iter21_reg;
        tmp_data_V_reg_313_pp0_iter23_reg <= tmp_data_V_reg_313_pp0_iter22_reg;
        tmp_data_V_reg_313_pp0_iter24_reg <= tmp_data_V_reg_313_pp0_iter23_reg;
        tmp_data_V_reg_313_pp0_iter25_reg <= tmp_data_V_reg_313_pp0_iter24_reg;
        tmp_data_V_reg_313_pp0_iter26_reg <= tmp_data_V_reg_313_pp0_iter25_reg;
        tmp_data_V_reg_313_pp0_iter27_reg <= tmp_data_V_reg_313_pp0_iter26_reg;
        tmp_data_V_reg_313_pp0_iter28_reg <= tmp_data_V_reg_313_pp0_iter27_reg;
        tmp_data_V_reg_313_pp0_iter29_reg <= tmp_data_V_reg_313_pp0_iter28_reg;
        tmp_data_V_reg_313_pp0_iter2_reg <= tmp_data_V_reg_313;
        tmp_data_V_reg_313_pp0_iter30_reg <= tmp_data_V_reg_313_pp0_iter29_reg;
        tmp_data_V_reg_313_pp0_iter31_reg <= tmp_data_V_reg_313_pp0_iter30_reg;
        tmp_data_V_reg_313_pp0_iter32_reg <= tmp_data_V_reg_313_pp0_iter31_reg;
        tmp_data_V_reg_313_pp0_iter33_reg <= tmp_data_V_reg_313_pp0_iter32_reg;
        tmp_data_V_reg_313_pp0_iter34_reg <= tmp_data_V_reg_313_pp0_iter33_reg;
        tmp_data_V_reg_313_pp0_iter35_reg <= tmp_data_V_reg_313_pp0_iter34_reg;
        tmp_data_V_reg_313_pp0_iter36_reg <= tmp_data_V_reg_313_pp0_iter35_reg;
        tmp_data_V_reg_313_pp0_iter37_reg <= tmp_data_V_reg_313_pp0_iter36_reg;
        tmp_data_V_reg_313_pp0_iter38_reg <= tmp_data_V_reg_313_pp0_iter37_reg;
        tmp_data_V_reg_313_pp0_iter39_reg <= tmp_data_V_reg_313_pp0_iter38_reg;
        tmp_data_V_reg_313_pp0_iter3_reg <= tmp_data_V_reg_313_pp0_iter2_reg;
        tmp_data_V_reg_313_pp0_iter40_reg <= tmp_data_V_reg_313_pp0_iter39_reg;
        tmp_data_V_reg_313_pp0_iter41_reg <= tmp_data_V_reg_313_pp0_iter40_reg;
        tmp_data_V_reg_313_pp0_iter42_reg <= tmp_data_V_reg_313_pp0_iter41_reg;
        tmp_data_V_reg_313_pp0_iter43_reg <= tmp_data_V_reg_313_pp0_iter42_reg;
        tmp_data_V_reg_313_pp0_iter44_reg <= tmp_data_V_reg_313_pp0_iter43_reg;
        tmp_data_V_reg_313_pp0_iter45_reg <= tmp_data_V_reg_313_pp0_iter44_reg;
        tmp_data_V_reg_313_pp0_iter46_reg <= tmp_data_V_reg_313_pp0_iter45_reg;
        tmp_data_V_reg_313_pp0_iter47_reg <= tmp_data_V_reg_313_pp0_iter46_reg;
        tmp_data_V_reg_313_pp0_iter48_reg <= tmp_data_V_reg_313_pp0_iter47_reg;
        tmp_data_V_reg_313_pp0_iter49_reg <= tmp_data_V_reg_313_pp0_iter48_reg;
        tmp_data_V_reg_313_pp0_iter4_reg <= tmp_data_V_reg_313_pp0_iter3_reg;
        tmp_data_V_reg_313_pp0_iter50_reg <= tmp_data_V_reg_313_pp0_iter49_reg;
        tmp_data_V_reg_313_pp0_iter51_reg <= tmp_data_V_reg_313_pp0_iter50_reg;
        tmp_data_V_reg_313_pp0_iter52_reg <= tmp_data_V_reg_313_pp0_iter51_reg;
        tmp_data_V_reg_313_pp0_iter53_reg <= tmp_data_V_reg_313_pp0_iter52_reg;
        tmp_data_V_reg_313_pp0_iter54_reg <= tmp_data_V_reg_313_pp0_iter53_reg;
        tmp_data_V_reg_313_pp0_iter55_reg <= tmp_data_V_reg_313_pp0_iter54_reg;
        tmp_data_V_reg_313_pp0_iter56_reg <= tmp_data_V_reg_313_pp0_iter55_reg;
        tmp_data_V_reg_313_pp0_iter57_reg <= tmp_data_V_reg_313_pp0_iter56_reg;
        tmp_data_V_reg_313_pp0_iter58_reg <= tmp_data_V_reg_313_pp0_iter57_reg;
        tmp_data_V_reg_313_pp0_iter59_reg <= tmp_data_V_reg_313_pp0_iter58_reg;
        tmp_data_V_reg_313_pp0_iter5_reg <= tmp_data_V_reg_313_pp0_iter4_reg;
        tmp_data_V_reg_313_pp0_iter60_reg <= tmp_data_V_reg_313_pp0_iter59_reg;
        tmp_data_V_reg_313_pp0_iter61_reg <= tmp_data_V_reg_313_pp0_iter60_reg;
        tmp_data_V_reg_313_pp0_iter62_reg <= tmp_data_V_reg_313_pp0_iter61_reg;
        tmp_data_V_reg_313_pp0_iter63_reg <= tmp_data_V_reg_313_pp0_iter62_reg;
        tmp_data_V_reg_313_pp0_iter64_reg <= tmp_data_V_reg_313_pp0_iter63_reg;
        tmp_data_V_reg_313_pp0_iter65_reg <= tmp_data_V_reg_313_pp0_iter64_reg;
        tmp_data_V_reg_313_pp0_iter66_reg <= tmp_data_V_reg_313_pp0_iter65_reg;
        tmp_data_V_reg_313_pp0_iter67_reg <= tmp_data_V_reg_313_pp0_iter66_reg;
        tmp_data_V_reg_313_pp0_iter68_reg <= tmp_data_V_reg_313_pp0_iter67_reg;
        tmp_data_V_reg_313_pp0_iter69_reg <= tmp_data_V_reg_313_pp0_iter68_reg;
        tmp_data_V_reg_313_pp0_iter6_reg <= tmp_data_V_reg_313_pp0_iter5_reg;
        tmp_data_V_reg_313_pp0_iter70_reg <= tmp_data_V_reg_313_pp0_iter69_reg;
        tmp_data_V_reg_313_pp0_iter71_reg <= tmp_data_V_reg_313_pp0_iter70_reg;
        tmp_data_V_reg_313_pp0_iter72_reg <= tmp_data_V_reg_313_pp0_iter71_reg;
        tmp_data_V_reg_313_pp0_iter73_reg <= tmp_data_V_reg_313_pp0_iter72_reg;
        tmp_data_V_reg_313_pp0_iter74_reg <= tmp_data_V_reg_313_pp0_iter73_reg;
        tmp_data_V_reg_313_pp0_iter75_reg <= tmp_data_V_reg_313_pp0_iter74_reg;
        tmp_data_V_reg_313_pp0_iter76_reg <= tmp_data_V_reg_313_pp0_iter75_reg;
        tmp_data_V_reg_313_pp0_iter7_reg <= tmp_data_V_reg_313_pp0_iter6_reg;
        tmp_data_V_reg_313_pp0_iter8_reg <= tmp_data_V_reg_313_pp0_iter7_reg;
        tmp_data_V_reg_313_pp0_iter9_reg <= tmp_data_V_reg_313_pp0_iter8_reg;
        tmp_i_130_reg_304_pp0_iter10_reg <= tmp_i_130_reg_304_pp0_iter9_reg;
        tmp_i_130_reg_304_pp0_iter11_reg <= tmp_i_130_reg_304_pp0_iter10_reg;
        tmp_i_130_reg_304_pp0_iter12_reg <= tmp_i_130_reg_304_pp0_iter11_reg;
        tmp_i_130_reg_304_pp0_iter13_reg <= tmp_i_130_reg_304_pp0_iter12_reg;
        tmp_i_130_reg_304_pp0_iter14_reg <= tmp_i_130_reg_304_pp0_iter13_reg;
        tmp_i_130_reg_304_pp0_iter15_reg <= tmp_i_130_reg_304_pp0_iter14_reg;
        tmp_i_130_reg_304_pp0_iter16_reg <= tmp_i_130_reg_304_pp0_iter15_reg;
        tmp_i_130_reg_304_pp0_iter17_reg <= tmp_i_130_reg_304_pp0_iter16_reg;
        tmp_i_130_reg_304_pp0_iter18_reg <= tmp_i_130_reg_304_pp0_iter17_reg;
        tmp_i_130_reg_304_pp0_iter19_reg <= tmp_i_130_reg_304_pp0_iter18_reg;
        tmp_i_130_reg_304_pp0_iter20_reg <= tmp_i_130_reg_304_pp0_iter19_reg;
        tmp_i_130_reg_304_pp0_iter21_reg <= tmp_i_130_reg_304_pp0_iter20_reg;
        tmp_i_130_reg_304_pp0_iter22_reg <= tmp_i_130_reg_304_pp0_iter21_reg;
        tmp_i_130_reg_304_pp0_iter23_reg <= tmp_i_130_reg_304_pp0_iter22_reg;
        tmp_i_130_reg_304_pp0_iter24_reg <= tmp_i_130_reg_304_pp0_iter23_reg;
        tmp_i_130_reg_304_pp0_iter25_reg <= tmp_i_130_reg_304_pp0_iter24_reg;
        tmp_i_130_reg_304_pp0_iter26_reg <= tmp_i_130_reg_304_pp0_iter25_reg;
        tmp_i_130_reg_304_pp0_iter27_reg <= tmp_i_130_reg_304_pp0_iter26_reg;
        tmp_i_130_reg_304_pp0_iter28_reg <= tmp_i_130_reg_304_pp0_iter27_reg;
        tmp_i_130_reg_304_pp0_iter29_reg <= tmp_i_130_reg_304_pp0_iter28_reg;
        tmp_i_130_reg_304_pp0_iter2_reg <= tmp_i_130_reg_304_pp0_iter1_reg;
        tmp_i_130_reg_304_pp0_iter30_reg <= tmp_i_130_reg_304_pp0_iter29_reg;
        tmp_i_130_reg_304_pp0_iter31_reg <= tmp_i_130_reg_304_pp0_iter30_reg;
        tmp_i_130_reg_304_pp0_iter32_reg <= tmp_i_130_reg_304_pp0_iter31_reg;
        tmp_i_130_reg_304_pp0_iter33_reg <= tmp_i_130_reg_304_pp0_iter32_reg;
        tmp_i_130_reg_304_pp0_iter34_reg <= tmp_i_130_reg_304_pp0_iter33_reg;
        tmp_i_130_reg_304_pp0_iter35_reg <= tmp_i_130_reg_304_pp0_iter34_reg;
        tmp_i_130_reg_304_pp0_iter36_reg <= tmp_i_130_reg_304_pp0_iter35_reg;
        tmp_i_130_reg_304_pp0_iter37_reg <= tmp_i_130_reg_304_pp0_iter36_reg;
        tmp_i_130_reg_304_pp0_iter38_reg <= tmp_i_130_reg_304_pp0_iter37_reg;
        tmp_i_130_reg_304_pp0_iter39_reg <= tmp_i_130_reg_304_pp0_iter38_reg;
        tmp_i_130_reg_304_pp0_iter3_reg <= tmp_i_130_reg_304_pp0_iter2_reg;
        tmp_i_130_reg_304_pp0_iter40_reg <= tmp_i_130_reg_304_pp0_iter39_reg;
        tmp_i_130_reg_304_pp0_iter41_reg <= tmp_i_130_reg_304_pp0_iter40_reg;
        tmp_i_130_reg_304_pp0_iter42_reg <= tmp_i_130_reg_304_pp0_iter41_reg;
        tmp_i_130_reg_304_pp0_iter43_reg <= tmp_i_130_reg_304_pp0_iter42_reg;
        tmp_i_130_reg_304_pp0_iter44_reg <= tmp_i_130_reg_304_pp0_iter43_reg;
        tmp_i_130_reg_304_pp0_iter45_reg <= tmp_i_130_reg_304_pp0_iter44_reg;
        tmp_i_130_reg_304_pp0_iter46_reg <= tmp_i_130_reg_304_pp0_iter45_reg;
        tmp_i_130_reg_304_pp0_iter47_reg <= tmp_i_130_reg_304_pp0_iter46_reg;
        tmp_i_130_reg_304_pp0_iter48_reg <= tmp_i_130_reg_304_pp0_iter47_reg;
        tmp_i_130_reg_304_pp0_iter49_reg <= tmp_i_130_reg_304_pp0_iter48_reg;
        tmp_i_130_reg_304_pp0_iter4_reg <= tmp_i_130_reg_304_pp0_iter3_reg;
        tmp_i_130_reg_304_pp0_iter50_reg <= tmp_i_130_reg_304_pp0_iter49_reg;
        tmp_i_130_reg_304_pp0_iter51_reg <= tmp_i_130_reg_304_pp0_iter50_reg;
        tmp_i_130_reg_304_pp0_iter52_reg <= tmp_i_130_reg_304_pp0_iter51_reg;
        tmp_i_130_reg_304_pp0_iter53_reg <= tmp_i_130_reg_304_pp0_iter52_reg;
        tmp_i_130_reg_304_pp0_iter54_reg <= tmp_i_130_reg_304_pp0_iter53_reg;
        tmp_i_130_reg_304_pp0_iter55_reg <= tmp_i_130_reg_304_pp0_iter54_reg;
        tmp_i_130_reg_304_pp0_iter56_reg <= tmp_i_130_reg_304_pp0_iter55_reg;
        tmp_i_130_reg_304_pp0_iter57_reg <= tmp_i_130_reg_304_pp0_iter56_reg;
        tmp_i_130_reg_304_pp0_iter58_reg <= tmp_i_130_reg_304_pp0_iter57_reg;
        tmp_i_130_reg_304_pp0_iter59_reg <= tmp_i_130_reg_304_pp0_iter58_reg;
        tmp_i_130_reg_304_pp0_iter5_reg <= tmp_i_130_reg_304_pp0_iter4_reg;
        tmp_i_130_reg_304_pp0_iter60_reg <= tmp_i_130_reg_304_pp0_iter59_reg;
        tmp_i_130_reg_304_pp0_iter61_reg <= tmp_i_130_reg_304_pp0_iter60_reg;
        tmp_i_130_reg_304_pp0_iter62_reg <= tmp_i_130_reg_304_pp0_iter61_reg;
        tmp_i_130_reg_304_pp0_iter63_reg <= tmp_i_130_reg_304_pp0_iter62_reg;
        tmp_i_130_reg_304_pp0_iter64_reg <= tmp_i_130_reg_304_pp0_iter63_reg;
        tmp_i_130_reg_304_pp0_iter65_reg <= tmp_i_130_reg_304_pp0_iter64_reg;
        tmp_i_130_reg_304_pp0_iter66_reg <= tmp_i_130_reg_304_pp0_iter65_reg;
        tmp_i_130_reg_304_pp0_iter67_reg <= tmp_i_130_reg_304_pp0_iter66_reg;
        tmp_i_130_reg_304_pp0_iter68_reg <= tmp_i_130_reg_304_pp0_iter67_reg;
        tmp_i_130_reg_304_pp0_iter69_reg <= tmp_i_130_reg_304_pp0_iter68_reg;
        tmp_i_130_reg_304_pp0_iter6_reg <= tmp_i_130_reg_304_pp0_iter5_reg;
        tmp_i_130_reg_304_pp0_iter70_reg <= tmp_i_130_reg_304_pp0_iter69_reg;
        tmp_i_130_reg_304_pp0_iter71_reg <= tmp_i_130_reg_304_pp0_iter70_reg;
        tmp_i_130_reg_304_pp0_iter72_reg <= tmp_i_130_reg_304_pp0_iter71_reg;
        tmp_i_130_reg_304_pp0_iter73_reg <= tmp_i_130_reg_304_pp0_iter72_reg;
        tmp_i_130_reg_304_pp0_iter74_reg <= tmp_i_130_reg_304_pp0_iter73_reg;
        tmp_i_130_reg_304_pp0_iter75_reg <= tmp_i_130_reg_304_pp0_iter74_reg;
        tmp_i_130_reg_304_pp0_iter76_reg <= tmp_i_130_reg_304_pp0_iter75_reg;
        tmp_i_130_reg_304_pp0_iter77_reg <= tmp_i_130_reg_304_pp0_iter76_reg;
        tmp_i_130_reg_304_pp0_iter78_reg <= tmp_i_130_reg_304_pp0_iter77_reg;
        tmp_i_130_reg_304_pp0_iter79_reg <= tmp_i_130_reg_304_pp0_iter78_reg;
        tmp_i_130_reg_304_pp0_iter7_reg <= tmp_i_130_reg_304_pp0_iter6_reg;
        tmp_i_130_reg_304_pp0_iter80_reg <= tmp_i_130_reg_304_pp0_iter79_reg;
        tmp_i_130_reg_304_pp0_iter81_reg <= tmp_i_130_reg_304_pp0_iter80_reg;
        tmp_i_130_reg_304_pp0_iter82_reg <= tmp_i_130_reg_304_pp0_iter81_reg;
        tmp_i_130_reg_304_pp0_iter83_reg <= tmp_i_130_reg_304_pp0_iter82_reg;
        tmp_i_130_reg_304_pp0_iter84_reg <= tmp_i_130_reg_304_pp0_iter83_reg;
        tmp_i_130_reg_304_pp0_iter85_reg <= tmp_i_130_reg_304_pp0_iter84_reg;
        tmp_i_130_reg_304_pp0_iter86_reg <= tmp_i_130_reg_304_pp0_iter85_reg;
        tmp_i_130_reg_304_pp0_iter8_reg <= tmp_i_130_reg_304_pp0_iter7_reg;
        tmp_i_130_reg_304_pp0_iter9_reg <= tmp_i_130_reg_304_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_130_reg_304 <= tmp_i_130_fu_269_p2;
        tmp_i_130_reg_304_pp0_iter1_reg <= tmp_i_130_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter69_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_i_reg_338 <= grp_sin_or_cos_double_s_fu_207_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_i_reg_294 <= grp_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_130_reg_304_pp0_iter41_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_assign_reg_333 <= grp_fu_256_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (ap_enable_reg_pp0_iter87 == 1'b1))) begin
        Buff_A_blk_n = Buff_A_full_n;
    end else begin
        Buff_A_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (ap_enable_reg_pp0_iter87 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Buff_A_write = 1'b1;
    end else begin
        Buff_A_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (ap_enable_reg_pp0_iter87 == 1'b1))) begin
        Buff_B_blk_n = Buff_B_full_n;
    end else begin
        Buff_B_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (ap_enable_reg_pp0_iter87 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Buff_B_write = 1'b1;
    end else begin
        Buff_B_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_130_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        InA_TDATA_blk_n = InA_V_data_V_0_state[1'd0];
    end else begin
        InA_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_130_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        InA_V_data_V_0_ack_out = 1'b1;
    end else begin
        InA_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == InA_V_data_V_0_sel)) begin
        InA_V_data_V_0_data_out = InA_V_data_V_0_payload_B;
    end else begin
        InA_V_data_V_0_data_out = InA_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_i_130_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        InA_V_dest_V_0_ack_out = 1'b1;
    end else begin
        InA_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_130_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        InB_TDATA_blk_n = InB_V_data_V_0_state[1'd0];
    end else begin
        InB_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_130_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        InB_V_data_V_0_ack_out = 1'b1;
    end else begin
        InB_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == InB_V_data_V_0_sel)) begin
        InB_V_data_V_0_data_out = InB_V_data_V_0_payload_B;
    end else begin
        InB_V_data_V_0_data_out = InB_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_i_130_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        InB_V_dest_V_0_ack_out = 1'b1;
    end else begin
        InB_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Len_out_blk_n = Len_out_full_n;
    end else begin
        Len_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Len_out_full_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Len_out_write = 1'b1;
    end else begin
        Len_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_i_130_fu_269_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter87 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter86 == 1'b0) & (ap_enable_reg_pp0_iter85 == 1'b0) & (ap_enable_reg_pp0_iter84 == 1'b0) & (ap_enable_reg_pp0_iter83 == 1'b0) & (ap_enable_reg_pp0_iter82 == 1'b0) & (ap_enable_reg_pp0_iter81 == 1'b0) & (ap_enable_reg_pp0_iter80 == 1'b0) & (ap_enable_reg_pp0_iter79 == 1'b0) & (ap_enable_reg_pp0_iter78 == 1'b0) & (ap_enable_reg_pp0_iter77 == 1'b0) & (ap_enable_reg_pp0_iter76 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_228_ce = 1'b1;
    end else begin
        grp_fu_228_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_235_ce = 1'b1;
    end else begin
        grp_fu_235_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_241_ce = 1'b1;
    end else begin
        grp_fu_241_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_246_ce = 1'b1;
    end else begin
        grp_fu_246_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_251_ce = 1'b1;
    end else begin
        grp_fu_251_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_256_ce = 1'b1;
    end else begin
        grp_fu_256_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state95) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & ((1'b0 == Len_out_full_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1))))) begin
        grp_fu_260_ce = 1'b0;
    end else begin
        grp_fu_260_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_260_p0 = i_cast_i_fu_264_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_260_p0 = Len;
    end else begin
        grp_fu_260_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_sin_or_cos_double_s_fu_207_ap_ce = 1'b1;
    end else begin
        grp_sin_or_cos_double_s_fu_207_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Len_out_full_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_i_130_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter87 == 1'b1) & (ap_enable_reg_pp0_iter86 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter87 == 1'b1) & (ap_enable_reg_pp0_iter86 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_i_130_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Buff_A_din = tmp_29_i_reg_369;

assign Buff_B_din = tmp_31_i_reg_374;

assign InA_TREADY = InA_V_dest_V_0_state[1'd1];

assign InA_V_data_V_0_ack_in = InA_V_data_V_0_state[1'd1];

assign InA_V_data_V_0_load_A = (~InA_V_data_V_0_sel_wr & InA_V_data_V_0_state_cmp_full);

assign InA_V_data_V_0_load_B = (InA_V_data_V_0_state_cmp_full & InA_V_data_V_0_sel_wr);

assign InA_V_data_V_0_sel = InA_V_data_V_0_sel_rd;

assign InA_V_data_V_0_state_cmp_full = ((InA_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign InA_V_data_V_0_vld_in = InA_TVALID;

assign InA_V_data_V_0_vld_out = InA_V_data_V_0_state[1'd0];

assign InA_V_dest_V_0_vld_in = InA_TVALID;

assign InB_TREADY = InB_V_dest_V_0_state[1'd1];

assign InB_V_data_V_0_ack_in = InB_V_data_V_0_state[1'd1];

assign InB_V_data_V_0_load_A = (~InB_V_data_V_0_sel_wr & InB_V_data_V_0_state_cmp_full);

assign InB_V_data_V_0_load_B = (InB_V_data_V_0_state_cmp_full & InB_V_data_V_0_sel_wr);

assign InB_V_data_V_0_sel = InB_V_data_V_0_sel_rd;

assign InB_V_data_V_0_state_cmp_full = ((InB_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign InB_V_data_V_0_vld_in = InB_TVALID;

assign InB_V_data_V_0_vld_out = InB_V_data_V_0_state[1'd0];

assign InB_V_dest_V_0_vld_in = InB_TVALID;

assign Len_out_din = Len;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter87 == 1'b1) & (((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_B_full_n)) | ((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_A_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InB_V_data_V_0_vld_out)) | ((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InA_V_data_V_0_vld_out)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter87 == 1'b1) & (((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_B_full_n)) | ((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_A_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InB_V_data_V_0_vld_out)) | ((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InA_V_data_V_0_vld_out)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter87 == 1'b1) & (((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_B_full_n)) | ((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_A_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InB_V_data_V_0_vld_out)) | ((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InA_V_data_V_0_vld_out)))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Len_out_full_n) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage0_iter72 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter73 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage0_iter74 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage0_iter75 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage0_iter76 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage0_iter77 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage0_iter78 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter79 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage0_iter80 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter81 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter82 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter1 = (((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InB_V_data_V_0_vld_out)) | ((tmp_i_130_reg_304 == 1'd1) & (1'b0 == InA_V_data_V_0_vld_out)));
end

assign ap_block_state90_pp0_stage0_iter83 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage0_iter84 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter85 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage0_iter86 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state94_pp0_stage0_iter87 = (((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_B_full_n)) | ((tmp_i_130_reg_304_pp0_iter86_reg == 1'd1) & (1'b0 == Buff_A_full_n)));
end

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_sin_or_cos_double_s_fu_207_ap_start = grp_sin_or_cos_double_s_fu_207_ap_start_reg;

assign i_cast_i_fu_264_p1 = i_i_reg_196;

assign i_fu_274_p2 = (i_i_reg_196 + 31'd1);

assign start_out = real_start;

assign tmp_i_130_fu_269_p2 = (($signed(i_cast_i_fu_264_p1) < $signed(Len)) ? 1'b1 : 1'b0);

endmodule //Loop_1_proc117
