-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_4_ce0 : STD_LOGIC;
    signal fourth_order_double_4_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_5_ce0 : STD_LOGIC;
    signal fourth_order_double_5_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_6_ce0 : STD_LOGIC;
    signal fourth_order_double_6_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_7_ce0 : STD_LOGIC;
    signal fourth_order_double_7_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_s_ce0 : STD_LOGIC;
    signal fourth_order_double_s_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_30_reg_1493 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_reg_1493_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_reg_1493_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_reg_1493_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_reg_1493_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_reg_1493_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_reg_1493_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_314_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1498_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_324_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1505 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1505_pp0_iter1_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1511_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_363_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_reg_1522 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_reg_1527 : STD_LOGIC_VECTOR (169 downto 0);
    signal tmp_4_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1542 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1542_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1542_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1542_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1542_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_reg_1548 : STD_LOGIC_VECTOR (123 downto 0);
    signal tmp_11_i_reg_1554 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_9_fu_446_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_9_reg_1559 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_9_reg_1559_pp0_iter8_reg : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_i2_i_reg_1564 : STD_LOGIC_VECTOR (60 downto 0);
    signal sin_basis_fu_463_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1569_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_44_reg_1576_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1583_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1588_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_zeros_V_fu_653_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_1593 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_V_reg_1599 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter10_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter11_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter12_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter13_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter14_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter15_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter16_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter17_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1599_pp0_iter18_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Ex_V_fu_690_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter18_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter19_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter20_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter21_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter22_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter23_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter24_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1606_pp0_iter25_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1612 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_reg_1618 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_i_reg_1618_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_i_reg_1618_pp0_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_16_fu_755_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_16_reg_1623 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_16_reg_1623_pp0_iter11_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_16_reg_1623_pp0_iter12_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_16_reg_1623_pp0_iter13_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_16_reg_1623_pp0_iter14_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_i1_reg_1628 : STD_LOGIC_VECTOR (48 downto 0);
    signal OP1_V_fu_769_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_1633 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_1633_pp0_iter12_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_37_i_reg_1640 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_37_i_reg_1640_pp0_iter13_reg : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_37_i_reg_1640_pp0_iter14_reg : STD_LOGIC_VECTOR (48 downto 0);
    signal OP2_V_fu_788_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_39_i_reg_1678 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_41_i_reg_1683 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_20_reg_1688 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_20_reg_1688_pp0_iter15_reg : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_20_reg_1688_pp0_iter16_reg : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_20_reg_1688_pp0_iter17_reg : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_10_reg_1693 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_12_reg_1698 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_14_reg_1703 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_16_reg_1708 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_s_reg_1743 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_reg_1743_pp0_iter16_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_i_reg_1748 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_8_i_reg_1748_pp0_iter17_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_10_i1_reg_1753 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_1_reg_1758 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp8_fu_944_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp8_reg_1763 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_fu_973_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_reg_1768 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_reg_1783 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_1_i_reg_1788 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_1_i_reg_1793 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_1_i_reg_1793_pp0_iter24_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_2_i_reg_1798 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_2_i_reg_1798_pp0_iter24_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_i1_reg_1803 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_i1_reg_1803_pp0_iter24_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal in_V_cast_i_reg_1808 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_i_i_fu_1087_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_1813 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_1813_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i4_fu_1099_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_8_i4_reg_1819 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_8_i4_reg_1819_pp0_iter25_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_8_i4_reg_1819_pp0_iter26_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_9_i7_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i7_reg_1825 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i7_reg_1825_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_i_fu_1194_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_reg_1830 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_i3_fu_1212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_i3_reg_1836 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_i3_reg_1836_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_1_i_fu_1220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_1_i_reg_1842 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_1_i_fu_1230_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_8_1_i_reg_1847 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_8_1_i_reg_1847_pp0_iter26_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_10_1_i_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_1_i_reg_1853 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_2_i_fu_1241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_2_i_reg_1859 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i5_reg_1865 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_2_i_fu_1265_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_8_2_i_reg_1870 : STD_LOGIC_VECTOR (61 downto 0);
    signal sel_tmp6_i_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_reg_1876 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1881 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_1886 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1891 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_9_fu_1380_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_9_reg_1896 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_2_i_i_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_i_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal expv_op_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_V_fu_340_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_348_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_i_i_fu_367_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_3_fu_370_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_31_fu_386_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_400_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_400_p1 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal p_Val2_34_fu_431_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_437_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_441_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_41_fu_485_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_492_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_530_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_demorgan_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_results_sign_V_ret_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_620_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_33_fu_627_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_34_fu_637_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_i_fu_645_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_657_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_i_fu_669_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_14_fu_672_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_fu_662_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_i_fu_687_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_i_cast_fu_704_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_i_fu_707_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_713_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_i_cast_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_fu_724_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_19_i_fu_728_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_20_i_fu_733_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_15_fu_738_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_772_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_772_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_772_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_791_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_791_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_796_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_796_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_35_fu_802_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_791_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_796_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_843_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_855_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_867_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_867_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_2_fu_879_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_2_fu_879_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_2_fu_879_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_843_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_855_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_867_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal tmp_51_i_cast_cast_fu_931_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_12_i1_fu_925_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp9_fu_934_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_47_i_cast_cast_fu_928_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp9_cast_fu_940_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_21_fu_950_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_45_i_fu_961_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_i_fu_957_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_964_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp8_cast_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_V_read_assign_fu_979_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_992_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal tmp_i_43_fu_1058_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_24_fu_1065_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_37_fu_1077_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_i_fu_1095_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_1_i_fu_1109_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_i_fu_1128_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_i_fu_1147_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_25_fu_1116_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_38_fu_1166_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_26_fu_1135_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_39_fu_1184_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_36_fu_1154_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_40_fu_1202_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_i_fu_1176_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_cast_i_fu_1226_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal Ex_V_ret_s_fu_1247_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_2_cast_i_fu_1262_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal sel_tmp2_i_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_2_i_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_2_3_i_fu_1275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel3_fu_1307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel4_fu_1314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_1253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_i_fu_1328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_cast_i_fu_1334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel5_fu_1320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1357_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_results_exp_V_ret_fu_1369_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_exp_V_fu_1361_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_3_cast_i_fu_1388_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_8_3_i_fu_1391_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_10_fu_1396_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_11_fu_1406_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_13_fu_1422_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_14_fu_1431_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_12_fu_1415_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_15_fu_1440_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_16_fu_1447_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal not_or_cond1_fu_1461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_results_sig_V_ret_c_fu_1466_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_35_fu_1454_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_10_fu_1474_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_42_fu_1481_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_400_ce : STD_LOGIC;
    signal grp_fu_772_ce : STD_LOGIC;
    signal grp_fu_791_ce : STD_LOGIC;
    signal grp_fu_796_ce : STD_LOGIC;
    signal grp_fu_843_ce : STD_LOGIC;
    signal grp_fu_855_ce : STD_LOGIC;
    signal grp_fu_867_ce : STD_LOGIC;
    signal grp_fu_992_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to26 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_400_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_400_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_843_p10 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_855_p10 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_867_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_867_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_992_p00 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Val2_2_fu_879_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Val2_2_fu_879_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component pitchshift_mul_53hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (169 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component pitchshift_mux_83ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pitchshift_mux_16jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pitchshift_mul_49kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component pitchshift_mul_52lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component pitchshift_mul_44mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component pitchshift_mul_33ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component pitchshift_mul_63ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component sin_or_cos_doublebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component sin_or_cos_doublecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component sin_or_cos_doubledEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component sin_or_cos_doubleeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component sin_or_cos_doublefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sin_or_cos_doubleg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component sin_or_cos_doublebkb
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_4_U : component sin_or_cos_doublecud
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_4_address0,
        ce0 => fourth_order_double_4_ce0,
        q0 => fourth_order_double_4_q0);

    fourth_order_double_5_U : component sin_or_cos_doubledEe
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_5_address0,
        ce0 => fourth_order_double_5_ce0,
        q0 => fourth_order_double_5_q0);

    fourth_order_double_6_U : component sin_or_cos_doubleeOg
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_6_address0,
        ce0 => fourth_order_double_6_ce0,
        q0 => fourth_order_double_6_q0);

    fourth_order_double_7_U : component sin_or_cos_doublefYi
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_7_address0,
        ce0 => fourth_order_double_7_ce0,
        q0 => fourth_order_double_7_q0);

    fourth_order_double_s_U : component sin_or_cos_doubleg8j
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_s_address0,
        ce0 => fourth_order_double_s_ce0,
        q0 => fourth_order_double_s_q0);

    pitchshift_mul_53hbi_U1 : component pitchshift_mul_53hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 53,
        din1_WIDTH => 170,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_400_p0,
        din1 => grp_fu_400_p1,
        ce => grp_fu_400_ce,
        dout => grp_fu_400_p2);

    pitchshift_mux_83ibs_U2 : component pitchshift_mux_83ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_34_fu_431_p3,
        dout => sin_basis_fu_463_p10);

    pitchshift_mux_16jbC_U3 : component pitchshift_mux_16jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_41_fu_485_p3,
        dout => tmp_6_fu_492_p18);

    pitchshift_mux_16jbC_U4 : component pitchshift_mux_16jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_41_fu_485_p3,
        dout => tmp_7_fu_530_p18);

    pitchshift_mul_49kbM_U5 : component pitchshift_mul_49kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_772_p0,
        din1 => grp_fu_772_p1,
        ce => grp_fu_772_ce,
        dout => grp_fu_772_p2);

    pitchshift_mul_49kbM_U6 : component pitchshift_mul_49kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_791_p0,
        din1 => grp_fu_791_p1,
        ce => grp_fu_791_ce,
        dout => grp_fu_791_p2);

    pitchshift_mul_49kbM_U7 : component pitchshift_mul_49kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_796_p0,
        din1 => grp_fu_796_p1,
        ce => grp_fu_796_ce,
        dout => grp_fu_796_p2);

    pitchshift_mul_52lbW_U8 : component pitchshift_mul_52lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 52,
        din1_WIDTH => 56,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fourth_order_double_10_reg_1693,
        din1 => grp_fu_843_p1,
        ce => grp_fu_843_ce,
        dout => grp_fu_843_p2);

    pitchshift_mul_44mb6_U9 : component pitchshift_mul_44mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 44,
        din1_WIDTH => 49,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fourth_order_double_12_reg_1698,
        din1 => grp_fu_855_p1,
        ce => grp_fu_855_ce,
        dout => grp_fu_855_p2);

    pitchshift_mul_33ncg_U10 : component pitchshift_mul_33ncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 42,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_867_p0,
        din1 => grp_fu_867_p1,
        ce => grp_fu_867_ce,
        dout => grp_fu_867_p2);

    pitchshift_mul_63ocq_U11 : component pitchshift_mul_63ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 64,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_992_p0,
        din1 => r_V_reg_1768,
        ce => grp_fu_992_ce,
        dout => grp_fu_992_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Ex_V_reg_1606 <= Ex_V_fu_690_p2;
                Ex_V_reg_1606_pp0_iter10_reg <= Ex_V_reg_1606;
                Ex_V_reg_1606_pp0_iter11_reg <= Ex_V_reg_1606_pp0_iter10_reg;
                Ex_V_reg_1606_pp0_iter12_reg <= Ex_V_reg_1606_pp0_iter11_reg;
                Ex_V_reg_1606_pp0_iter13_reg <= Ex_V_reg_1606_pp0_iter12_reg;
                Ex_V_reg_1606_pp0_iter14_reg <= Ex_V_reg_1606_pp0_iter13_reg;
                Ex_V_reg_1606_pp0_iter15_reg <= Ex_V_reg_1606_pp0_iter14_reg;
                Ex_V_reg_1606_pp0_iter16_reg <= Ex_V_reg_1606_pp0_iter15_reg;
                Ex_V_reg_1606_pp0_iter17_reg <= Ex_V_reg_1606_pp0_iter16_reg;
                Ex_V_reg_1606_pp0_iter18_reg <= Ex_V_reg_1606_pp0_iter17_reg;
                Ex_V_reg_1606_pp0_iter19_reg <= Ex_V_reg_1606_pp0_iter18_reg;
                Ex_V_reg_1606_pp0_iter20_reg <= Ex_V_reg_1606_pp0_iter19_reg;
                Ex_V_reg_1606_pp0_iter21_reg <= Ex_V_reg_1606_pp0_iter20_reg;
                Ex_V_reg_1606_pp0_iter22_reg <= Ex_V_reg_1606_pp0_iter21_reg;
                Ex_V_reg_1606_pp0_iter23_reg <= Ex_V_reg_1606_pp0_iter22_reg;
                Ex_V_reg_1606_pp0_iter24_reg <= Ex_V_reg_1606_pp0_iter23_reg;
                Ex_V_reg_1606_pp0_iter25_reg <= Ex_V_reg_1606_pp0_iter24_reg;
                Mx_V_reg_1599 <= p_Val2_14_fu_672_p2(123 downto 61);
                Mx_V_reg_1599_pp0_iter10_reg <= Mx_V_reg_1599;
                Mx_V_reg_1599_pp0_iter11_reg <= Mx_V_reg_1599_pp0_iter10_reg;
                Mx_V_reg_1599_pp0_iter12_reg <= Mx_V_reg_1599_pp0_iter11_reg;
                Mx_V_reg_1599_pp0_iter13_reg <= Mx_V_reg_1599_pp0_iter12_reg;
                Mx_V_reg_1599_pp0_iter14_reg <= Mx_V_reg_1599_pp0_iter13_reg;
                Mx_V_reg_1599_pp0_iter15_reg <= Mx_V_reg_1599_pp0_iter14_reg;
                Mx_V_reg_1599_pp0_iter16_reg <= Mx_V_reg_1599_pp0_iter15_reg;
                Mx_V_reg_1599_pp0_iter17_reg <= Mx_V_reg_1599_pp0_iter16_reg;
                Mx_V_reg_1599_pp0_iter18_reg <= Mx_V_reg_1599_pp0_iter17_reg;
                Mx_zeros_V_reg_1593 <= Mx_zeros_V_fu_653_p1;
                    OP1_V_reg_1633(48 downto 0) <= OP1_V_fu_769_p1(48 downto 0);
                    OP1_V_reg_1633_pp0_iter12_reg(48 downto 0) <= OP1_V_reg_1633(48 downto 0);
                closepath_reg_1511_pp0_iter2_reg <= closepath_reg_1511_pp0_iter1_reg;
                closepath_reg_1511_pp0_iter3_reg <= closepath_reg_1511_pp0_iter2_reg;
                closepath_reg_1511_pp0_iter4_reg <= closepath_reg_1511_pp0_iter3_reg;
                closepath_reg_1511_pp0_iter5_reg <= closepath_reg_1511_pp0_iter4_reg;
                closepath_reg_1511_pp0_iter6_reg <= closepath_reg_1511_pp0_iter5_reg;
                closepath_reg_1511_pp0_iter7_reg <= closepath_reg_1511_pp0_iter6_reg;
                closepath_reg_1511_pp0_iter8_reg <= closepath_reg_1511_pp0_iter7_reg;
                fourth_order_double_10_reg_1693 <= fourth_order_double_5_q0;
                fourth_order_double_12_reg_1698 <= fourth_order_double_6_q0;
                fourth_order_double_14_reg_1703 <= fourth_order_double_7_q0;
                fourth_order_double_16_reg_1708 <= fourth_order_double_s_q0;
                in_V_cast_i_reg_1808 <= grp_fu_992_p2(124 downto 63);
                isNeg_reg_1612 <= Ex_V_fu_690_p2(10 downto 10);
                loc_V_reg_1498_pp0_iter2_reg <= loc_V_reg_1498_pp0_iter1_reg;
                loc_V_reg_1498_pp0_iter3_reg <= loc_V_reg_1498_pp0_iter2_reg;
                loc_V_reg_1498_pp0_iter4_reg <= loc_V_reg_1498_pp0_iter3_reg;
                loc_V_reg_1498_pp0_iter5_reg <= loc_V_reg_1498_pp0_iter4_reg;
                loc_V_reg_1498_pp0_iter6_reg <= loc_V_reg_1498_pp0_iter5_reg;
                loc_V_reg_1498_pp0_iter7_reg <= loc_V_reg_1498_pp0_iter6_reg;
                loc_V_reg_1498_pp0_iter8_reg <= loc_V_reg_1498_pp0_iter7_reg;
                or_cond_44_reg_1576 <= or_cond_44_fu_581_p2;
                or_cond_44_reg_1576_pp0_iter10_reg <= or_cond_44_reg_1576_pp0_iter9_reg;
                or_cond_44_reg_1576_pp0_iter11_reg <= or_cond_44_reg_1576_pp0_iter10_reg;
                or_cond_44_reg_1576_pp0_iter12_reg <= or_cond_44_reg_1576_pp0_iter11_reg;
                or_cond_44_reg_1576_pp0_iter13_reg <= or_cond_44_reg_1576_pp0_iter12_reg;
                or_cond_44_reg_1576_pp0_iter14_reg <= or_cond_44_reg_1576_pp0_iter13_reg;
                or_cond_44_reg_1576_pp0_iter15_reg <= or_cond_44_reg_1576_pp0_iter14_reg;
                or_cond_44_reg_1576_pp0_iter16_reg <= or_cond_44_reg_1576_pp0_iter15_reg;
                or_cond_44_reg_1576_pp0_iter17_reg <= or_cond_44_reg_1576_pp0_iter16_reg;
                or_cond_44_reg_1576_pp0_iter18_reg <= or_cond_44_reg_1576_pp0_iter17_reg;
                or_cond_44_reg_1576_pp0_iter19_reg <= or_cond_44_reg_1576_pp0_iter18_reg;
                or_cond_44_reg_1576_pp0_iter20_reg <= or_cond_44_reg_1576_pp0_iter19_reg;
                or_cond_44_reg_1576_pp0_iter21_reg <= or_cond_44_reg_1576_pp0_iter20_reg;
                or_cond_44_reg_1576_pp0_iter22_reg <= or_cond_44_reg_1576_pp0_iter21_reg;
                or_cond_44_reg_1576_pp0_iter23_reg <= or_cond_44_reg_1576_pp0_iter22_reg;
                or_cond_44_reg_1576_pp0_iter24_reg <= or_cond_44_reg_1576_pp0_iter23_reg;
                or_cond_44_reg_1576_pp0_iter25_reg <= or_cond_44_reg_1576_pp0_iter24_reg;
                or_cond_44_reg_1576_pp0_iter26_reg <= or_cond_44_reg_1576_pp0_iter25_reg;
                or_cond_44_reg_1576_pp0_iter8_reg <= or_cond_44_reg_1576;
                or_cond_44_reg_1576_pp0_iter9_reg <= or_cond_44_reg_1576_pp0_iter8_reg;
                or_cond_i_reg_1886 <= or_cond_i_fu_1352_p2;
                or_cond_reg_1881 <= or_cond_fu_1301_p2;
                p_Result_13_1_i_reg_1793 <= grp_fu_992_p2(109 downto 94);
                p_Result_13_1_i_reg_1793_pp0_iter24_reg <= p_Result_13_1_i_reg_1793;
                p_Result_13_2_i_reg_1798 <= grp_fu_992_p2(93 downto 78);
                p_Result_13_2_i_reg_1798_pp0_iter24_reg <= p_Result_13_2_i_reg_1798;
                p_Result_1_i_reg_1788 <= grp_fu_992_p2(125 downto 110);
                p_Result_30_reg_1493_pp0_iter2_reg <= p_Result_30_reg_1493_pp0_iter1_reg;
                p_Result_30_reg_1493_pp0_iter3_reg <= p_Result_30_reg_1493_pp0_iter2_reg;
                p_Result_30_reg_1493_pp0_iter4_reg <= p_Result_30_reg_1493_pp0_iter3_reg;
                p_Result_30_reg_1493_pp0_iter5_reg <= p_Result_30_reg_1493_pp0_iter4_reg;
                p_Result_30_reg_1493_pp0_iter6_reg <= p_Result_30_reg_1493_pp0_iter5_reg;
                p_Result_i1_reg_1803 <= grp_fu_992_p2(77 downto 63);
                p_Result_i1_reg_1803_pp0_iter24_reg <= p_Result_i1_reg_1803;
                p_Result_i2_i_reg_1564 <= p_Val2_9_fu_446_p3(123 downto 63);
                p_Result_i_reg_1618 <= p_Val2_15_fu_738_p3(62 downto 56);
                p_Result_i_reg_1618_pp0_iter11_reg <= p_Result_i_reg_1618;
                p_Result_i_reg_1618_pp0_iter12_reg <= p_Result_i_reg_1618_pp0_iter11_reg;
                p_Result_s_reg_1588 <= p_Result_s_fu_614_p2;
                p_Result_s_reg_1588_pp0_iter10_reg <= p_Result_s_reg_1588_pp0_iter9_reg;
                p_Result_s_reg_1588_pp0_iter11_reg <= p_Result_s_reg_1588_pp0_iter10_reg;
                p_Result_s_reg_1588_pp0_iter12_reg <= p_Result_s_reg_1588_pp0_iter11_reg;
                p_Result_s_reg_1588_pp0_iter13_reg <= p_Result_s_reg_1588_pp0_iter12_reg;
                p_Result_s_reg_1588_pp0_iter14_reg <= p_Result_s_reg_1588_pp0_iter13_reg;
                p_Result_s_reg_1588_pp0_iter15_reg <= p_Result_s_reg_1588_pp0_iter14_reg;
                p_Result_s_reg_1588_pp0_iter16_reg <= p_Result_s_reg_1588_pp0_iter15_reg;
                p_Result_s_reg_1588_pp0_iter17_reg <= p_Result_s_reg_1588_pp0_iter16_reg;
                p_Result_s_reg_1588_pp0_iter18_reg <= p_Result_s_reg_1588_pp0_iter17_reg;
                p_Result_s_reg_1588_pp0_iter19_reg <= p_Result_s_reg_1588_pp0_iter18_reg;
                p_Result_s_reg_1588_pp0_iter20_reg <= p_Result_s_reg_1588_pp0_iter19_reg;
                p_Result_s_reg_1588_pp0_iter21_reg <= p_Result_s_reg_1588_pp0_iter20_reg;
                p_Result_s_reg_1588_pp0_iter22_reg <= p_Result_s_reg_1588_pp0_iter21_reg;
                p_Result_s_reg_1588_pp0_iter23_reg <= p_Result_s_reg_1588_pp0_iter22_reg;
                p_Result_s_reg_1588_pp0_iter24_reg <= p_Result_s_reg_1588_pp0_iter23_reg;
                p_Result_s_reg_1588_pp0_iter25_reg <= p_Result_s_reg_1588_pp0_iter24_reg;
                p_Result_s_reg_1588_pp0_iter26_reg <= p_Result_s_reg_1588_pp0_iter25_reg;
                p_Result_s_reg_1588_pp0_iter8_reg <= p_Result_s_reg_1588;
                p_Result_s_reg_1588_pp0_iter9_reg <= p_Result_s_reg_1588_pp0_iter8_reg;
                p_Val2_16_reg_1623 <= p_Val2_16_fu_755_p1;
                p_Val2_16_reg_1623_pp0_iter11_reg <= p_Val2_16_reg_1623;
                p_Val2_16_reg_1623_pp0_iter12_reg <= p_Val2_16_reg_1623_pp0_iter11_reg;
                p_Val2_16_reg_1623_pp0_iter13_reg <= p_Val2_16_reg_1623_pp0_iter12_reg;
                p_Val2_16_reg_1623_pp0_iter14_reg <= p_Val2_16_reg_1623_pp0_iter13_reg;
                p_Val2_20_reg_1688 <= fourth_order_double_4_q0;
                p_Val2_20_reg_1688_pp0_iter15_reg <= p_Val2_20_reg_1688;
                p_Val2_20_reg_1688_pp0_iter16_reg <= p_Val2_20_reg_1688_pp0_iter15_reg;
                p_Val2_20_reg_1688_pp0_iter17_reg <= p_Val2_20_reg_1688_pp0_iter16_reg;
                p_Val2_8_reg_1548 <= grp_fu_400_p2(166 downto 43);
                p_Val2_9_reg_1559 <= p_Val2_9_fu_446_p3;
                p_Val2_9_reg_1559_pp0_iter8_reg <= p_Val2_9_reg_1559;
                r_V_reg_1768 <= r_V_fu_973_p2;
                result_V_reg_1783 <= grp_fu_992_p2(125 downto 63);
                ret_V_9_reg_1896 <= ret_V_9_fu_1380_p3;
                sel_tmp6_i_reg_1876 <= sel_tmp6_i_fu_1295_p2;
                shift_2_1_i_reg_1842 <= shift_2_1_i_fu_1220_p2;
                shift_2_2_i_reg_1859 <= shift_2_2_i_fu_1241_p2;
                sin_basis_reg_1569 <= sin_basis_fu_463_p10;
                sin_basis_reg_1569_pp0_iter10_reg <= sin_basis_reg_1569_pp0_iter9_reg;
                sin_basis_reg_1569_pp0_iter11_reg <= sin_basis_reg_1569_pp0_iter10_reg;
                sin_basis_reg_1569_pp0_iter12_reg <= sin_basis_reg_1569_pp0_iter11_reg;
                sin_basis_reg_1569_pp0_iter13_reg <= sin_basis_reg_1569_pp0_iter12_reg;
                sin_basis_reg_1569_pp0_iter14_reg <= sin_basis_reg_1569_pp0_iter13_reg;
                sin_basis_reg_1569_pp0_iter15_reg <= sin_basis_reg_1569_pp0_iter14_reg;
                sin_basis_reg_1569_pp0_iter16_reg <= sin_basis_reg_1569_pp0_iter15_reg;
                sin_basis_reg_1569_pp0_iter17_reg <= sin_basis_reg_1569_pp0_iter16_reg;
                sin_basis_reg_1569_pp0_iter18_reg <= sin_basis_reg_1569_pp0_iter17_reg;
                sin_basis_reg_1569_pp0_iter19_reg <= sin_basis_reg_1569_pp0_iter18_reg;
                sin_basis_reg_1569_pp0_iter20_reg <= sin_basis_reg_1569_pp0_iter19_reg;
                sin_basis_reg_1569_pp0_iter21_reg <= sin_basis_reg_1569_pp0_iter20_reg;
                sin_basis_reg_1569_pp0_iter22_reg <= sin_basis_reg_1569_pp0_iter21_reg;
                sin_basis_reg_1569_pp0_iter23_reg <= sin_basis_reg_1569_pp0_iter22_reg;
                sin_basis_reg_1569_pp0_iter24_reg <= sin_basis_reg_1569_pp0_iter23_reg;
                sin_basis_reg_1569_pp0_iter25_reg <= sin_basis_reg_1569_pp0_iter24_reg;
                sin_basis_reg_1569_pp0_iter8_reg <= sin_basis_reg_1569;
                sin_basis_reg_1569_pp0_iter9_reg <= sin_basis_reg_1569_pp0_iter8_reg;
                tmp8_reg_1763 <= tmp8_fu_944_p2;
                tmp_10_1_i_reg_1853 <= tmp_10_1_i_fu_1235_p2;
                tmp_10_i1_reg_1753 <= grp_fu_855_p2(92 downto 45);
                tmp_1_reg_1758 <= grp_fu_867_p2(74 downto 38);
                tmp_37_i_reg_1640 <= grp_fu_772_p2(97 downto 49);
                tmp_37_i_reg_1640_pp0_iter13_reg <= tmp_37_i_reg_1640;
                tmp_37_i_reg_1640_pp0_iter14_reg <= tmp_37_i_reg_1640_pp0_iter13_reg;
                tmp_39_i_reg_1678 <= grp_fu_791_p2(97 downto 56);
                tmp_41_i_reg_1683 <= grp_fu_796_p2(97 downto 63);
                tmp_4_reg_1542 <= tmp_4_fu_406_p2;
                tmp_4_reg_1542_pp0_iter3_reg <= tmp_4_reg_1542;
                tmp_4_reg_1542_pp0_iter4_reg <= tmp_4_reg_1542_pp0_iter3_reg;
                tmp_4_reg_1542_pp0_iter5_reg <= tmp_4_reg_1542_pp0_iter4_reg;
                tmp_4_reg_1542_pp0_iter6_reg <= tmp_4_reg_1542_pp0_iter5_reg;
                tmp_5_reg_1583 <= tmp_5_fu_586_p2;
                tmp_5_reg_1583_pp0_iter10_reg <= tmp_5_reg_1583_pp0_iter9_reg;
                tmp_5_reg_1583_pp0_iter11_reg <= tmp_5_reg_1583_pp0_iter10_reg;
                tmp_5_reg_1583_pp0_iter12_reg <= tmp_5_reg_1583_pp0_iter11_reg;
                tmp_5_reg_1583_pp0_iter13_reg <= tmp_5_reg_1583_pp0_iter12_reg;
                tmp_5_reg_1583_pp0_iter14_reg <= tmp_5_reg_1583_pp0_iter13_reg;
                tmp_5_reg_1583_pp0_iter15_reg <= tmp_5_reg_1583_pp0_iter14_reg;
                tmp_5_reg_1583_pp0_iter16_reg <= tmp_5_reg_1583_pp0_iter15_reg;
                tmp_5_reg_1583_pp0_iter17_reg <= tmp_5_reg_1583_pp0_iter16_reg;
                tmp_5_reg_1583_pp0_iter18_reg <= tmp_5_reg_1583_pp0_iter17_reg;
                tmp_5_reg_1583_pp0_iter19_reg <= tmp_5_reg_1583_pp0_iter18_reg;
                tmp_5_reg_1583_pp0_iter20_reg <= tmp_5_reg_1583_pp0_iter19_reg;
                tmp_5_reg_1583_pp0_iter21_reg <= tmp_5_reg_1583_pp0_iter20_reg;
                tmp_5_reg_1583_pp0_iter22_reg <= tmp_5_reg_1583_pp0_iter21_reg;
                tmp_5_reg_1583_pp0_iter23_reg <= tmp_5_reg_1583_pp0_iter22_reg;
                tmp_5_reg_1583_pp0_iter24_reg <= tmp_5_reg_1583_pp0_iter23_reg;
                tmp_5_reg_1583_pp0_iter25_reg <= tmp_5_reg_1583_pp0_iter24_reg;
                tmp_5_reg_1583_pp0_iter8_reg <= tmp_5_reg_1583;
                tmp_5_reg_1583_pp0_iter9_reg <= tmp_5_reg_1583_pp0_iter8_reg;
                tmp_8_1_i_reg_1847 <= tmp_8_1_i_fu_1230_p2;
                tmp_8_1_i_reg_1847_pp0_iter26_reg <= tmp_8_1_i_reg_1847;
                tmp_8_2_i_reg_1870 <= tmp_8_2_i_fu_1265_p2;
                tmp_8_i4_reg_1819 <= tmp_8_i4_fu_1099_p2;
                tmp_8_i4_reg_1819_pp0_iter25_reg <= tmp_8_i4_reg_1819;
                tmp_8_i4_reg_1819_pp0_iter26_reg <= tmp_8_i4_reg_1819_pp0_iter25_reg;
                tmp_8_i_reg_1748 <= grp_fu_843_p2(107 downto 52);
                tmp_8_i_reg_1748_pp0_iter17_reg <= tmp_8_i_reg_1748;
                tmp_9_i7_reg_1825 <= tmp_9_i7_fu_1104_p2;
                tmp_9_i7_reg_1825_pp0_iter25_reg <= tmp_9_i7_reg_1825;
                tmp_9_reg_1891 <= tmp_9_fu_1376_p2;
                tmp_i1_reg_1628 <= p_Val2_15_fu_738_p3(55 downto 7);
                tmp_i2_i_reg_1830 <= tmp_i2_i_fu_1194_p3;
                tmp_i3_i3_reg_1836 <= tmp_i3_i3_fu_1212_p3;
                tmp_i3_i3_reg_1836_pp0_iter26_reg <= tmp_i3_i3_reg_1836;
                tmp_i5_reg_1865 <= tmp_i5_fu_1257_p2;
                tmp_i_i_reg_1813 <= tmp_i_i_fu_1087_p3;
                tmp_i_i_reg_1813_pp0_iter25_reg <= tmp_i_i_reg_1813;
                tmp_s_reg_1743 <= p_Val2_2_fu_879_p2(59 downto 31);
                tmp_s_reg_1743_pp0_iter16_reg <= tmp_s_reg_1743;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                closepath_reg_1511 <= closepath_fu_328_p2;
                closepath_reg_1511_pp0_iter1_reg <= closepath_reg_1511;
                loc_V_1_reg_1505 <= loc_V_1_fu_324_p1;
                loc_V_1_reg_1505_pp0_iter1_reg <= loc_V_1_reg_1505;
                loc_V_reg_1498 <= p_Val2_s_fu_302_p1(62 downto 52);
                loc_V_reg_1498_pp0_iter1_reg <= loc_V_reg_1498;
                p_Result_30_reg_1493 <= p_Val2_s_fu_302_p1(63 downto 63);
                p_Result_30_reg_1493_pp0_iter1_reg <= p_Result_30_reg_1493;
                ret_V_reg_1527 <= r_V_3_fu_370_p2(255 downto 86);
                tmp_20_reg_1522 <= tmp_20_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1511_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_11_i_reg_1554 <= grp_fu_400_p2(169 downto 167);
            end if;
        end if;
    end process;
    OP1_V_reg_1633(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    OP1_V_reg_1633_pp0_iter12_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Ex_V_fu_690_p2 <= std_logic_vector(unsigned(storemerge_i_fu_662_p3) - unsigned(tmp_15_i_fu_687_p1));
    Ex_V_ret_s_fu_1247_p3 <= 
        Ex_V_reg_1606_pp0_iter25_reg when (sin_basis_reg_1569_pp0_iter25_reg(0) = '1') else 
        ap_const_lv11_0;
    Mx_V_read_assign_fu_979_p3 <= 
        Mx_V_reg_1599_pp0_iter18_reg when (sin_basis_reg_1569_pp0_iter18_reg(0) = '1') else 
        ap_const_lv63_7FFFFFFFFFFFFFFF;
    Mx_zeros_V_fu_653_p1 <= tmp_i3_i_fu_645_p3(6 - 1 downto 0);
    OP1_V_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_reg_1628),98));
    OP2_V_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_i_reg_1640),98));
    addr_V_fu_340_p3 <= 
        ap_const_lv11_4A when (closepath_fu_328_p2(0) = '1') else 
        expv_op_fu_334_p2;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter27, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to26_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0_0to26 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to26)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to26 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_42_fu_1481_p4;
    closepath_fu_328_p2 <= "1" when (unsigned(loc_V_fu_314_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    expv_op_fu_334_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(loc_V_fu_314_p4));
    fourth_order_double_4_address0 <= tmp_42_i_fu_808_p1(8 - 1 downto 0);

    fourth_order_double_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_4_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_5_address0 <= tmp_42_i_fu_808_p1(8 - 1 downto 0);

    fourth_order_double_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_5_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_6_address0 <= tmp_42_i_fu_808_p1(8 - 1 downto 0);

    fourth_order_double_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_6_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_7_address0 <= tmp_42_i_fu_808_p1(8 - 1 downto 0);

    fourth_order_double_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_7_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_s_address0 <= tmp_42_i_fu_808_p1(8 - 1 downto 0);

    fourth_order_double_s_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_s_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_400_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_400_ce <= ap_const_logic_1;
        else 
            grp_fu_400_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_400_p0 <= grp_fu_400_p00(53 - 1 downto 0);
    grp_fu_400_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_31_fu_386_p3),223));
    grp_fu_400_p1 <= grp_fu_400_p10(170 - 1 downto 0);
    grp_fu_400_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1527),223));

    grp_fu_772_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_772_ce <= ap_const_logic_1;
        else 
            grp_fu_772_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_772_p0 <= OP1_V_fu_769_p1(49 - 1 downto 0);
    grp_fu_772_p1 <= OP1_V_fu_769_p1(49 - 1 downto 0);

    grp_fu_791_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_791_ce <= ap_const_logic_1;
        else 
            grp_fu_791_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_791_p0 <= OP2_V_fu_788_p1(49 - 1 downto 0);
    grp_fu_791_p1 <= OP1_V_reg_1633_pp0_iter12_reg(49 - 1 downto 0);

    grp_fu_796_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_796_ce <= ap_const_logic_1;
        else 
            grp_fu_796_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_796_p0 <= OP2_V_fu_788_p1(49 - 1 downto 0);
    grp_fu_796_p1 <= OP2_V_fu_788_p1(49 - 1 downto 0);

    grp_fu_843_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_843_ce <= ap_const_logic_1;
        else 
            grp_fu_843_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_843_p1 <= grp_fu_843_p10(56 - 1 downto 0);
    grp_fu_843_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_16_reg_1623_pp0_iter14_reg),108));

    grp_fu_855_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_855_ce <= ap_const_logic_1;
        else 
            grp_fu_855_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_855_p1 <= grp_fu_855_p10(49 - 1 downto 0);
    grp_fu_855_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_i_reg_1640_pp0_iter14_reg),93));

    grp_fu_867_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_867_ce <= ap_const_logic_1;
        else 
            grp_fu_867_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_867_p0 <= grp_fu_867_p00(33 - 1 downto 0);
    grp_fu_867_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_14_reg_1703),75));
    grp_fu_867_p1 <= grp_fu_867_p10(42 - 1 downto 0);
    grp_fu_867_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_i_reg_1678),75));

    grp_fu_992_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_992_ce <= ap_const_logic_1;
        else 
            grp_fu_992_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_992_p0 <= grp_fu_992_p00(63 - 1 downto 0);
    grp_fu_992_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_fu_979_p3),126));
    loc_V_1_fu_324_p1 <= p_Val2_s_fu_302_p1(52 - 1 downto 0);
    loc_V_fu_314_p4 <= p_Val2_s_fu_302_p1(62 downto 52);
    newSel3_fu_1307_p3 <= 
        shift_2_3_i_fu_1275_p2 when (sel_tmp6_i_fu_1295_p2(0) = '1') else 
        shift_2_1_i_reg_1842;
    newSel4_fu_1314_p3 <= 
        shift_2_2_i_reg_1859 when (tmp_i5_fu_1257_p2(0) = '1') else 
        tmp_i_i_reg_1813_pp0_iter25_reg;
    newSel5_fu_1320_p3 <= 
        newSel3_fu_1307_p3 when (or_cond_fu_1301_p2(0) = '1') else 
        newSel4_fu_1314_p3;
    newexp_fu_1338_p2 <= std_logic_vector(signed(tmp_6_cast_i_fu_1334_p1) - signed(newSel5_fu_1320_p3));
    not_or_cond1_fu_1461_p2 <= (or_cond_44_reg_1576_pp0_iter26_reg xor ap_const_lv1_1);
    not_or_cond_demorgan_fu_603_p2 <= (tmp_4_reg_1542_pp0_iter6_reg and tmp_3_fu_576_p2);
    not_or_cond_fu_608_p2 <= (not_or_cond_demorgan_fu_603_p2 xor ap_const_lv1_1);
    or_cond_44_fu_581_p2 <= (tmp_4_reg_1542_pp0_iter6_reg and tmp_3_fu_576_p2);
    or_cond_fu_1301_p2 <= (sel_tmp6_i_fu_1295_p2 or sel_tmp3_i_fu_1284_p2);
    or_cond_i_fu_1352_p2 <= (tmp_9_i7_reg_1825_pp0_iter25_reg or tmp_25_fu_1344_p3);
    out_exp_V_fu_1361_p3 <= 
        ap_const_lv11_0 when (or_cond_i_fu_1352_p2(0) = '1') else 
        tmp_26_fu_1357_p1;
    p_Result_31_fu_386_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1505_pp0_iter1_reg);
    p_Result_32_fu_620_p3 <= (p_Result_i2_i_reg_1564 & ap_const_lv1_1);
    
    p_Result_33_fu_627_p4_proc : process(p_Result_32_fu_620_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_33_fu_627_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_32_fu_620_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_33_fu_627_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_33_fu_627_p4_i) := p_Result_32_fu_620_p3(62-1-p_Result_33_fu_627_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_33_fu_627_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_34_fu_637_p3 <= (ap_const_lv2_3 & p_Result_33_fu_627_p4);
    p_Result_35_fu_802_p3 <= (sin_basis_reg_1569_pp0_iter12_reg & p_Result_i_reg_1618_pp0_iter12_reg);
    p_Result_36_fu_1154_p5 <= (tmp_3_i_fu_1147_p3 & ap_const_lv32_0(15 downto 0));
    
    p_Result_37_fu_1077_p4_proc : process(p_Val2_24_fu_1065_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_37_fu_1077_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_24_fu_1065_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_37_fu_1077_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_37_fu_1077_p4_i) := p_Val2_24_fu_1065_p5(32-1-p_Result_37_fu_1077_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_37_fu_1077_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_38_fu_1166_p4_proc : process(p_Val2_25_fu_1116_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_38_fu_1166_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_25_fu_1116_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_38_fu_1166_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_38_fu_1166_p4_i) := p_Val2_25_fu_1116_p5(32-1-p_Result_38_fu_1166_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_38_fu_1166_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_39_fu_1184_p4_proc : process(p_Val2_26_fu_1135_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_39_fu_1184_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_26_fu_1135_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_39_fu_1184_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_39_fu_1184_p4_i) := p_Val2_26_fu_1135_p5(32-1-p_Result_39_fu_1184_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_39_fu_1184_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_40_fu_1202_p4_proc : process(p_Result_36_fu_1154_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_40_fu_1202_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_36_fu_1154_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_40_fu_1202_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_40_fu_1202_p4_i) := p_Result_36_fu_1154_p5(32-1-p_Result_40_fu_1202_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_40_fu_1202_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_41_fu_485_p3 <= (p_Result_30_reg_1493_pp0_iter6_reg & p_Val2_34_fu_431_p3);
    p_Result_42_fu_1481_p4 <= ((p_Result_s_reg_1588_pp0_iter26_reg & ret_V_9_reg_1896) & ret_V_10_fu_1474_p3);
    p_Result_i_i_fu_348_p4 <= addr_V_fu_340_p3(10 downto 7);
    p_Result_s_fu_614_p2 <= (p_results_sign_V_ret_fu_597_p2 and not_or_cond_fu_608_p2);
    p_Val2_14_fu_672_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_9_reg_1559_pp0_iter8_reg),to_integer(unsigned('0' & tmp_12_i_fu_669_p1(31-1 downto 0)))));
    p_Val2_15_fu_738_p3 <= 
        tmp_19_i_fu_728_p2 when (isNeg_reg_1612(0) = '1') else 
        tmp_20_i_fu_733_p2;
    p_Val2_16_fu_755_p1 <= p_Val2_15_fu_738_p3(56 - 1 downto 0);
    p_Val2_21_fu_950_p3 <= (p_Val2_20_reg_1688_pp0_iter17_reg & ap_const_lv4_0);
    p_Val2_24_fu_1065_p5 <= (tmp_i_43_fu_1058_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_25_fu_1116_p5 <= (tmp_1_i_fu_1109_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_26_fu_1135_p5 <= (tmp_2_i_fu_1128_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_2_fu_879_p0 <= p_Val2_2_fu_879_p00(25 - 1 downto 0);
    p_Val2_2_fu_879_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_16_reg_1708),60));
    p_Val2_2_fu_879_p1 <= p_Val2_2_fu_879_p10(35 - 1 downto 0);
    p_Val2_2_fu_879_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_i_reg_1683),60));
    p_Val2_2_fu_879_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_fu_879_p0) * unsigned(p_Val2_2_fu_879_p1), 60));
    p_Val2_34_fu_431_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1511_pp0_iter6_reg(0) = '1') else 
        tmp_11_i_reg_1554;
    p_Val2_35_fu_1454_p3 <= 
        ap_const_lv52_0 when (or_cond_i_reg_1886(0) = '1') else 
        tmp_16_fu_1447_p3;
    p_Val2_9_fu_446_p3 <= 
        p_Val2_i_fu_441_p2 when (tmp_21_fu_437_p1(0) = '1') else 
        p_Val2_8_reg_1548;
    p_Val2_i_fu_441_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_8_reg_1548));
    p_Val2_s_fu_302_p1 <= t_in;
    p_results_exp_V_ret_fu_1369_p3 <= 
        ap_const_lv11_3FF when (or_cond_44_reg_1576_pp0_iter25_reg(0) = '1') else 
        ap_const_lv11_7FF;
    p_results_sig_V_ret_c_fu_1466_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond1_fu_1461_p2(0) = '1') else 
        ap_const_lv52_0;
    p_results_sign_V_ret_fu_597_p2 <= (tmp_8_fu_591_p2 and tmp_2_fu_568_p3);
    r_V_3_fu_370_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_V_q0),to_integer(unsigned('0' & tmp_4_i_i_fu_367_p1(31-1 downto 0)))));
    r_V_fu_973_p2 <= std_logic_vector(unsigned(tmp_fu_964_p2) + unsigned(tmp8_cast_fu_970_p1));
    ref_4oPi_table_256_V_address0 <= tmp_2_i_i_fu_358_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1474_p3 <= 
        p_results_sig_V_ret_c_fu_1466_p3 when (tmp_9_reg_1891(0) = '1') else 
        p_Val2_35_fu_1454_p3;
    ret_V_9_fu_1380_p3 <= 
        p_results_exp_V_ret_fu_1369_p3 when (tmp_9_fu_1376_p2(0) = '1') else 
        out_exp_V_fu_1361_p3;
        rhs_V_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_ret_s_fu_1247_p3),12));

    sel_tmp2_i_fu_1279_p2 <= (tmp_10_1_i_reg_1853 xor ap_const_lv1_1);
    sel_tmp3_i_fu_1284_p2 <= (tmp_i5_fu_1257_p2 and sel_tmp2_i_fu_1279_p2);
    sel_tmp6_i_fu_1295_p2 <= (tmp_i5_fu_1257_p2 and tmp2_fu_1290_p2);
        sh_assign_1_i_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_fu_713_p3),32));

    sh_assign_fu_713_p3 <= 
        tmp_17_i_fu_707_p2 when (isNeg_reg_1612(0) = '1') else 
        sh_i_cast_fu_704_p1;
        sh_i_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_reg_1606),12));

    shift_2_1_i_fu_1220_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(tmp_i1_i_fu_1176_p3));
    shift_2_2_i_fu_1241_p2 <= std_logic_vector(unsigned(tmp_i2_i_fu_1194_p3) + unsigned(shift_2_1_i_fu_1220_p2));
    shift_2_3_i_fu_1275_p2 <= std_logic_vector(unsigned(tmp_i3_i3_reg_1836) + unsigned(shift_2_2_i_reg_1859));
    storemerge_i_fu_662_p3 <= 
        tmp_i_fu_657_p2 when (closepath_reg_1511_pp0_iter8_reg(0) = '1') else 
        ap_const_lv11_0;
    tmp2_fu_1290_p2 <= (tmp_10_2_i_fu_1270_p2 and tmp_10_1_i_reg_1853);
        tmp8_cast_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1763),64));

    tmp8_fu_944_p2 <= std_logic_vector(signed(tmp_47_i_cast_cast_fu_928_p1) + signed(tmp9_cast_fu_940_p1));
    tmp9_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_fu_934_p2),49));
    tmp9_fu_934_p2 <= std_logic_vector(unsigned(tmp_51_i_cast_cast_fu_931_p1) + unsigned(tmp_12_i1_fu_925_p1));
    tmp_10_1_i_fu_1235_p2 <= "1" when (tmp_i1_i_fu_1176_p3 = ap_const_lv32_10) else "0";
    tmp_10_2_i_fu_1270_p2 <= "1" when (tmp_i2_i_reg_1830 = ap_const_lv32_10) else "0";
    tmp_10_fu_1396_p4 <= tmp_8_3_i_fu_1391_p2(61 downto 10);
    tmp_11_fu_1406_p4 <= tmp_8_1_i_reg_1847_pp0_iter26_reg(61 downto 10);
    tmp_12_fu_1415_p3 <= 
        tmp_10_fu_1396_p4 when (sel_tmp6_i_reg_1876(0) = '1') else 
        tmp_11_fu_1406_p4;
    tmp_12_i1_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1758),38));
    tmp_12_i_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1593),124));
    tmp_13_fu_1422_p4 <= tmp_8_2_i_reg_1870(61 downto 10);
    tmp_14_fu_1431_p4 <= tmp_8_i4_reg_1819_pp0_iter26_reg(61 downto 10);
    tmp_15_fu_1440_p3 <= 
        tmp_13_fu_1422_p4 when (tmp_i5_reg_1865(0) = '1') else 
        tmp_14_fu_1431_p4;
    tmp_15_i_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1593),11));
    tmp_16_fu_1447_p3 <= 
        tmp_12_fu_1415_p3 when (or_cond_reg_1881(0) = '1') else 
        tmp_15_fu_1440_p3;
    tmp_17_i_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_i_cast_fu_704_p1));
    tmp_18_i_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_cast_fu_720_p1),63));
    tmp_19_i_fu_728_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1599),to_integer(unsigned('0' & tmp_18_i_fu_724_p1(31-1 downto 0)))));
    tmp_1_i_fu_1109_p3 <= (p_Result_13_1_i_reg_1793_pp0_iter24_reg & ap_const_lv1_1);
    tmp_20_fu_363_p1 <= addr_V_fu_340_p3(7 - 1 downto 0);
    tmp_20_i_fu_733_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1599),to_integer(unsigned('0' & tmp_18_i_fu_724_p1(31-1 downto 0)))));
    tmp_21_fu_437_p1 <= p_Val2_34_fu_431_p3(1 - 1 downto 0);
    tmp_25_fu_1344_p3 <= newexp_fu_1338_p2(31 downto 31);
    tmp_26_fu_1357_p1 <= newexp_fu_1338_p2(11 - 1 downto 0);
    tmp_2_fu_568_p3 <= 
        tmp_6_fu_492_p18 when (sin_basis_fu_463_p10(0) = '1') else 
        tmp_7_fu_530_p18;
    tmp_2_i_fu_1128_p3 <= (p_Result_13_2_i_reg_1798_pp0_iter24_reg & ap_const_lv1_1);
    tmp_2_i_i_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_348_p4),64));
    tmp_3_fu_576_p2 <= "1" when (loc_V_reg_1498_pp0_iter6_reg = ap_const_lv11_0) else "0";
    tmp_3_i_fu_1147_p3 <= (p_Result_i1_reg_1803_pp0_iter24_reg & ap_const_lv1_1);
    tmp_42_i_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_35_fu_802_p3),64));
        tmp_44_i_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_21_fu_950_p3),64));

        tmp_45_i_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_i_reg_1748_pp0_iter17_reg),64));

        tmp_47_i_cast_cast_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_i1_reg_1753),49));

    tmp_4_1_cast_i_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_i_fu_1176_p3),62));
    tmp_4_2_cast_i_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i2_i_reg_1830),62));
    tmp_4_3_cast_i_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i3_i3_reg_1836_pp0_iter26_reg),62));
    tmp_4_cast_i_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_fu_1087_p3),62));
    tmp_4_fu_406_p2 <= "1" when (loc_V_1_reg_1505_pp0_iter1_reg = ap_const_lv52_0) else "0";
    tmp_4_i_i_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_1522),256));
    tmp_51_i_cast_cast_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1743_pp0_iter16_reg),38));
    tmp_5_fu_586_p2 <= "1" when (loc_V_reg_1498_pp0_iter6_reg = ap_const_lv11_7FF) else "0";
        tmp_6_cast_i_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_i_fu_1328_p2),32));

    tmp_6_i_fu_1328_p2 <= std_logic_vector(unsigned(ap_const_lv12_3FF) + unsigned(rhs_V_fu_1253_p1));
    tmp_8_1_i_fu_1230_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_i4_reg_1819),to_integer(unsigned('0' & tmp_4_1_cast_i_fu_1226_p1(31-1 downto 0)))));
    tmp_8_2_i_fu_1265_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_1_i_reg_1847),to_integer(unsigned('0' & tmp_4_2_cast_i_fu_1262_p1(31-1 downto 0)))));
    tmp_8_3_i_fu_1391_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_2_i_reg_1870),to_integer(unsigned('0' & tmp_4_3_cast_i_fu_1388_p1(31-1 downto 0)))));
    tmp_8_fu_591_p2 <= (tmp_5_fu_586_p2 xor ap_const_lv1_1);
    tmp_8_i4_fu_1099_p2 <= std_logic_vector(shift_left(unsigned(in_V_cast_i_reg_1808),to_integer(unsigned('0' & tmp_4_cast_i_fu_1095_p1(31-1 downto 0)))));
    tmp_9_fu_1376_p2 <= (tmp_5_reg_1583_pp0_iter25_reg or or_cond_44_reg_1576_pp0_iter25_reg);
    tmp_9_i7_fu_1104_p2 <= "1" when (result_V_reg_1783 = ap_const_lv63_0) else "0";
    tmp_fu_964_p2 <= std_logic_vector(signed(tmp_45_i_fu_961_p1) + signed(tmp_44_i_fu_957_p1));
    
    tmp_i1_i_fu_1176_p3_proc : process(p_Result_38_fu_1166_p4)
    begin
        tmp_i1_i_fu_1176_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_38_fu_1166_p4(i) = '1' then
                tmp_i1_i_fu_1176_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i2_i_fu_1194_p3_proc : process(p_Result_39_fu_1184_p4)
    begin
        tmp_i2_i_fu_1194_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_39_fu_1184_p4(i) = '1' then
                tmp_i2_i_fu_1194_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i3_i3_fu_1212_p3_proc : process(p_Result_40_fu_1202_p4)
    begin
        tmp_i3_i3_fu_1212_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_40_fu_1202_p4(i) = '1' then
                tmp_i3_i3_fu_1212_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i3_i_fu_645_p3_proc : process(p_Result_34_fu_637_p3)
    begin
        tmp_i3_i_fu_645_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_34_fu_637_p3(i) = '1' then
                tmp_i3_i_fu_645_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i5_fu_1257_p2 <= "1" when (tmp_i_i_reg_1813_pp0_iter25_reg = ap_const_lv32_10) else "0";
    tmp_i_43_fu_1058_p3 <= (p_Result_1_i_reg_1788 & ap_const_lv1_1);
    tmp_i_fu_657_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(loc_V_reg_1498_pp0_iter8_reg));
    
    tmp_i_i_fu_1087_p3_proc : process(p_Result_37_fu_1077_p4)
    begin
        tmp_i_i_fu_1087_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_37_fu_1077_p4(i) = '1' then
                tmp_i_i_fu_1087_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

end behav;
