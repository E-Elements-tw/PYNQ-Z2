-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity testloop is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of testloop is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "testloop,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=461,HLS_SYN_LUT=515,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (31 downto 0);
    signal X_ap_vld : STD_LOGIC;
    signal A_read_reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal smax_fu_67_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_reg_169 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_79_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_85_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_7_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_195 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_11_fu_141_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_reg_205 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal accum_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_fu_57_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_63_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_57_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_63_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_cast_fu_75_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_97_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_97_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_97_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_14_fu_113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_145_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_97_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_fu_97_p10 : STD_LOGIC_VECTOR (32 downto 0);

    component testloop_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (31 downto 0);
        X : IN STD_LOGIC_VECTOR (31 downto 0);
        X_ap_vld : IN STD_LOGIC );
    end component;



begin
    testloop_AXILiteS_s_axi_U : component testloop_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        X => accum_reg_215,
        X_ap_vld => X_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                A_read_reg_161 <= A;
                smax_reg_169 <= smax_fu_67_p3;
                tmp_2_reg_175 <= tmp_2_fu_79_p2;
                tmp_s_reg_180 <= tmp_s_fu_85_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                accum_reg_215 <= accum_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_10_reg_195 <= tmp_9_fu_123_p2(31 downto 1);
                tmp_6_reg_185 <= tmp_4_fu_97_p2(32 downto 1);
                tmp_7_reg_190 <= tmp_7_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_11_reg_205 <= tmp_11_fu_141_p2;
                tmp_8_reg_200 <= tmp_8_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_13_reg_210 <= tmp_13_fu_152_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    X_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            X_ap_vld <= ap_const_logic_1;
        else 
            X_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    accum_fu_157_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_read_reg_161) * signed(tmp_13_reg_210))), 32));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    smax_cast_fu_75_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_67_p3),32));
    smax_fu_67_p3 <= 
        tmp_5_fu_63_p1 when (tmp_fu_57_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_11_fu_141_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_10_reg_195) * signed(smax_reg_169))), 31));
    tmp_12_fu_145_p3 <= (tmp_11_reg_205 & ap_const_lv1_0);
    tmp_13_fu_152_p2 <= std_logic_vector(unsigned(tmp_8_reg_200) - unsigned(tmp_12_fu_145_p3));
    tmp_14_fu_113_p2 <= std_logic_vector(shift_left(unsigned(A_read_reg_161),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_2_fu_79_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(smax_cast_fu_75_p1));
    tmp_4_fu_97_p0 <= tmp_4_fu_97_p00(32 - 1 downto 0);
    tmp_4_fu_97_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_175),33));
    tmp_4_fu_97_p1 <= tmp_4_fu_97_p10(31 - 1 downto 0);
    tmp_4_fu_97_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_reg_169),33));
    tmp_4_fu_97_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_97_p0) * unsigned(tmp_4_fu_97_p1), 33));
    tmp_5_fu_63_p0 <= A;
    tmp_5_fu_63_p1 <= tmp_5_fu_63_p0(31 - 1 downto 0);
    tmp_7_fu_118_p2 <= std_logic_vector(unsigned(tmp_14_fu_113_p2) - unsigned(A_read_reg_161));
    tmp_8_fu_137_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_7_reg_190) * signed(tmp_6_reg_185))), 32));
    tmp_9_fu_123_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_read_reg_161) * signed(tmp_s_reg_180))), 32));
    tmp_fu_57_p0 <= A;
    tmp_fu_57_p2 <= "1" when (signed(tmp_fu_57_p0) > signed(ap_const_lv32_0)) else "0";
    tmp_s_fu_85_p1 <= A;
    tmp_s_fu_85_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(tmp_s_fu_85_p1));
end behav;
