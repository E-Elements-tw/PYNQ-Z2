// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="testloop,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=461,HLS_SYN_LUT=515,HLS_VERSION=2018_2}" *)

module testloop (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] A;
reg    X_ap_vld;
reg  signed [31:0] A_read_reg_161;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [30:0] smax_fu_67_p3;
reg  signed [30:0] smax_reg_169;
wire   [31:0] tmp_2_fu_79_p2;
reg   [31:0] tmp_2_reg_175;
wire  signed [31:0] tmp_s_fu_85_p2;
reg  signed [31:0] tmp_s_reg_180;
reg  signed [31:0] tmp_6_reg_185;
wire    ap_CS_fsm_state2;
wire  signed [31:0] tmp_7_fu_118_p2;
reg  signed [31:0] tmp_7_reg_190;
reg  signed [30:0] tmp_10_reg_195;
wire   [31:0] tmp_8_fu_137_p2;
reg   [31:0] tmp_8_reg_200;
wire    ap_CS_fsm_state3;
wire   [30:0] tmp_11_fu_141_p2;
reg   [30:0] tmp_11_reg_205;
wire  signed [31:0] tmp_13_fu_152_p2;
reg  signed [31:0] tmp_13_reg_210;
wire    ap_CS_fsm_state4;
wire   [31:0] accum_fu_157_p2;
reg   [31:0] accum_reg_215;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire  signed [31:0] tmp_fu_57_p0;
wire  signed [31:0] tmp_5_fu_63_p0;
wire   [0:0] tmp_fu_57_p2;
wire   [30:0] tmp_5_fu_63_p1;
wire   [31:0] smax_cast_fu_75_p1;
wire  signed [31:0] tmp_s_fu_85_p1;
wire   [31:0] tmp_4_fu_97_p0;
wire   [30:0] tmp_4_fu_97_p1;
wire   [32:0] tmp_4_fu_97_p2;
wire   [31:0] tmp_14_fu_113_p2;
wire   [31:0] tmp_9_fu_123_p2;
wire   [31:0] tmp_12_fu_145_p3;
reg   [5:0] ap_NS_fsm;
wire   [32:0] tmp_4_fu_97_p00;
wire   [32:0] tmp_4_fu_97_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

testloop_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
testloop_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .X(accum_reg_215),
    .X_ap_vld(X_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        A_read_reg_161 <= A;
        smax_reg_169 <= smax_fu_67_p3;
        tmp_2_reg_175 <= tmp_2_fu_79_p2;
        tmp_s_reg_180 <= tmp_s_fu_85_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_reg_215 <= accum_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_10_reg_195 <= {{tmp_9_fu_123_p2[31:1]}};
        tmp_6_reg_185 <= {{tmp_4_fu_97_p2[32:1]}};
        tmp_7_reg_190 <= tmp_7_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_11_reg_205 <= tmp_11_fu_141_p2;
        tmp_8_reg_200 <= tmp_8_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_13_reg_210 <= tmp_13_fu_152_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        X_ap_vld = 1'b1;
    end else begin
        X_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_fu_157_p2 = ($signed(A_read_reg_161) * $signed(tmp_13_reg_210));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign smax_cast_fu_75_p1 = $unsigned(smax_fu_67_p3);

assign smax_fu_67_p3 = ((tmp_fu_57_p2[0:0] === 1'b1) ? tmp_5_fu_63_p1 : 31'd0);

assign tmp_11_fu_141_p2 = ($signed(tmp_10_reg_195) * $signed(smax_reg_169));

assign tmp_12_fu_145_p3 = {{tmp_11_reg_205}, {1'd0}};

assign tmp_13_fu_152_p2 = (tmp_8_reg_200 - tmp_12_fu_145_p3);

assign tmp_14_fu_113_p2 = A_read_reg_161 << 32'd2;

assign tmp_2_fu_79_p2 = ($signed(32'd4294967295) + $signed(smax_cast_fu_75_p1));

assign tmp_4_fu_97_p0 = tmp_4_fu_97_p00;

assign tmp_4_fu_97_p00 = tmp_2_reg_175;

assign tmp_4_fu_97_p1 = tmp_4_fu_97_p10;

assign tmp_4_fu_97_p10 = $unsigned(smax_reg_169);

assign tmp_4_fu_97_p2 = (tmp_4_fu_97_p0 * tmp_4_fu_97_p1);

assign tmp_5_fu_63_p0 = A;

assign tmp_5_fu_63_p1 = tmp_5_fu_63_p0[30:0];

assign tmp_7_fu_118_p2 = ($signed(tmp_14_fu_113_p2) - $signed(A_read_reg_161));

assign tmp_8_fu_137_p2 = ($signed(tmp_7_reg_190) * $signed(tmp_6_reg_185));

assign tmp_9_fu_123_p2 = ($signed(A_read_reg_161) * $signed(tmp_s_reg_180));

assign tmp_fu_57_p0 = A;

assign tmp_fu_57_p2 = (($signed(tmp_fu_57_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_85_p1 = A;

assign tmp_s_fu_85_p2 = ($signed(32'd4294967295) + $signed(tmp_s_fu_85_p1));

endmodule //testloop
